<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrdinaSoft.Base</name>
    </assembly>
    <members>
        <member name="T:OrdinaSoft.Collections.CaseInsensitiveStringSet">
            <summary>
               Set of unique strings, in a case-insensitive manner.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringSet.#ctor">
            <summary>
               Initializes an empty set.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringSet.#ctor(System.Int32)">
            <summary>
               Initializes a set, with a minimum capacity.
             </summary>
             <param name="Capacity">The initial capacity.</param>
             <remarks>
               As the library is currently compatible with .NET Standard 2.0, the
               <paramref name="Capacity" /> parameter is ignored. When the library is converted to
               .NET Standard 2.1, the parameter will be used.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringSet.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
               Initializes a set, from an existing one.
             </summary>
             <param name="Strings">The strings to copy to the set.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Strings" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Strings" /> can contains <b>null</b> strings.
               </para>
               <para>
                 The set can contains less items than <paramref name="Strings" /> if there are
                 duplicates in them.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Collections.CaseInsensitiveStringKeyConcurrentDictionary`1">
            <summary>
               Concurrent dictionary with a case-insensitive string as the key.
             </summary>
             <typeparam name="TValue">The type of a value in the dictionary.</typeparam>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyConcurrentDictionary`1.#ctor">
            <summary>
               Initializes an empty dictionary.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyConcurrentDictionary`1.#ctor(System.Int32)">
            <summary>
               Initializes an empty dictionary, specifying its initial capacity.
             </summary>
             <param name="Capacity">
               The initial number of items that the dictionary can contain.
             </param>
             <exception cref="T:System.ArgumentException">
               <paramref name="Capacity" /> is less than <i>0</i>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyConcurrentDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
               Initializes a dictionary that contains items from a collection.
             </summary>
             <param name="List">The items to add to the new dictionary.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="List" /> contains one or more duplicate keys.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="List" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionaryExtension">
            <summary>
               Extension methods for the <i>ConcurrentDictionary&lt;TKey,TValue></i> class.
             </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryExtension.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
               Removes an entry from the dictionary.
             </summary>
             <typeparam name="TKey">The type of the key.</typeparam>
             <typeparam name="TValue">The type of the value.</typeparam>
             <param name="Dict">The dictionary.</param>
             <param name="Key">The key to remove.</param>
             <returns>
               <b>true</b> if the entry was removed successfully;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1">
            <summary>
               Dictionary with a case-insensitive string as the key.
             </summary>
             <typeparam name="TValue">The type of a value in the dictionary.</typeparam>
             <remarks>
               If <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is <b>true</b>, getting a value with a non-existing
               key returns <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.get_Item(System.String)">
            <summary>
               Gets the value with the specified key.
             </summary>
             <param name="Key">
               The key of the value to retrieve. Can be <b>null</b>. See the remarks.
             </param>
             <returns>The value related to the specified key.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b> and <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is
               <b>false</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is <b>false</b> and there is no entry with the
               specified key in the dictionary.
             </exception>
             <remarks>
               <para>
                 If <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is <b>true</b>, <paramref name="Key" /> can be
                 <b>null</b>. If <paramref name="Key" /> is <b>null</b> or there is no entry with
                 the specified key in the dictionary, the result is <b>null</b>.
               </para>
               <para>
                 This is the getter of the <see cref="P:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.Item(System.String)" /> indexed property, see the
                 property documentation for more information.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.#ctor">
            <summary>
               Initializes an empty dictionary.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.#ctor(System.Int32)">
            <summary>
               Initializes an empty dictionary, specifying its initial capacity.
             </summary>
             <param name="Capacity">
               The initial number of items that the dictionary can contain.
             </param>
             <exception cref="T:System.ArgumentException">
               <paramref name="Capacity" /> is less than <i>0</i>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
               Initializes a dictionary that contains items from a collection.
             </summary>
             <param name="List">The items to add to the new dictionary.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="List" /> contains one or more duplicate keys.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="List" /> is <b>null</b>.
             </exception>
        </member>
        <member name="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval">
            <summary>
               Indicates how the dictionary must react when retrieving a value whose index doesn't
               exist.
             </summary>
             <remarks>
               <para>
                 If the value is <b>true</b>, the dictionary returns <b>null</b> for a non-existent
                 index. Otherwise, an exception will be raised.
               </para>
               <para>
                 Independently of the value of this field, setting the value of a non-existent
                 index always raises an exception.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.Item(System.String)">
            <summary>
               Gets or sets the value associated with the specified key.
             </summary>
             <param name="Key">
               The key of the value to retrieve. Can be <b>null</b>. See the remarks.
             </param>
             <value>The value related to the specified key.</value>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b> and <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is
               <b>false</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is <b>false</b> and there is no entry with the
               specified key in the dictionary.
             </exception>
             <remarks>
               If <see cref="F:OrdinaSoft.Collections.CaseInsensitiveStringKeyDictionary`1.SafeItemRetrieval" /> is <b>true</b>, <paramref name="Key" /> can be
               <b>null</b>. If <paramref name="Key" /> is <b>null</b> or there is no entry with the
               specified key in the dictionary, the result is <b>null</b>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Collections.HybridCollection`2">
            <summary>
               Hybrid collection.
             </summary>
             <typeparam name="TKey">The type of the keys for the dictionary.</typeparam>
             <typeparam name="TValue">The type of the items in the collection.</typeparam>
             <remarks>
               <para>
                 An hybrid collection contains both a dictionary and a list. The dictionary is used
                 for fast access of an item based on a key. The list is used to display items in a
                 list and to notify of the changes of the list.<br />
                 Contrary to the <see cref="T:System.Collections.Generic.SortedDictionary`2" /> and the <see cref="T:System.Collections.SortedList" />
                 classes, the list is not automatically sorted but can be sorted using the
                 <see cref="M:OrdinaSoft.Collections.HybridCollection`2.Sort(System.Comparison{`1})" /> method.
               </para>
               <para>
                 When searching an item in the list (for change or delete operations), this class uses
                 the default equality comparer for <see cref="T:TValue" />:
                 <b>EqualityComparer&lt;TValue&gt;.Default</b>.
               </para>
               <para>
                 This class implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface. Iterating on the
                 items of the class returns them in the current list order.
               </para>
             </remarks>
             <seealso cref="T:System.Collections.Generic.SortedDictionary`2" />
             <seealso cref="T:System.Collections.SortedList" />
        </member>
        <member name="F:OrdinaSoft.Collections.HybridCollection`2.Comparer">
            <summary>
               To compare the items in the list.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.HybridCollection`2.Dict">
            <summary>
               The internal dictionary.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.HybridCollection`2.List">
            <summary>
              The internal list.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.set_Item(`0,`1)">
            <summary>
               Sets the item with the specified key.
             </summary>
             <param name="Key">The key.</param>
             <param name="Item">The item.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               There is no item with the specifed key in the collection.
             </exception>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Collections.HybridCollection`2.Item(`0)" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.#ctor">
            <summary>
               Initializes an empty hybrid collection.
             </summary>
        </member>
        <member name="P:OrdinaSoft.Collections.HybridCollection`2.Count">
            <summary>
               Gets the number of items in the hybrid collection.
             </summary>
             <value>The number of items.</value>
        </member>
        <member name="P:OrdinaSoft.Collections.HybridCollection`2.Item(`0)">
            <summary>
               Gets or sets the item with the specified key.
             </summary>
             <param name="Key">The key.</param>
             <value>The item with the specified key.</value>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               There is no item with the specifed key in the collection.
             </exception>
             <remarks>
               <para>This is the default indexed property.</para>
               <para>
                 If there is no item with the specified key in the collection, the item is added.
               </para>
               <para>
                 When setting an item, the internal list is also updated, so this method is an
                 O(n) operation, where n is the number of items in the collection.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Collections.HybridCollection`2.Keys">
            <summary>
               Gets all the keys in the collection.
             </summary>
             <value>A collection of the keys in the collection.</value>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.Add(`0,`1)">
            <summary>
               Adds an item to the collection.
             </summary>
             <param name="Key">The key.</param>
             <param name="Item">The item.</param>
             <exception cref="T:System.ArgumentException">
               An item with the same key already exists in the collection.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.ContainsKey(`0)">
            <summary>
               Indicates whether there is an item with a specific key in the collection.
             </summary>
             <param name="Key">The key to check.</param>
             <returns>
               <b>true</b> if there is an item with the specific key in the collection;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.Remove(`0)">
            <summary>
               Removes the item with the specified key.
             </summary>
             <param name="Key">The key of the item to remove.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.Sort(System.Comparison{`1})">
            <summary>
               Sorts the list part of the hybrid collection.
             </summary>
             <param name="Comparison">The delegate to use to compare the items.</param>
             <exception cref="T:System.ArgumentException">
               The implementation of <paramref name="Comparison" /> caused an error during the sort.
               For example, comparison might not return 0 when comparing an item with itself.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Comparison" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.HybridCollection`2.TryGetValue(`0,`1@)">
            <summary>
               Tries to get a value from its key.
             </summary>
             <param name="Key">The key.</param>
             <param name="Value">
               If there is an item with the specified key in the collection, will contain the
               item;<br />
               otherwise, <b>null</b>.
             </param>
             <returns>
               <b>true</b> if there is an item with the specified key in the collection;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Key" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Collections.LightList`1">
            <summary>
               A light generic list.
             </summary>
             <typeparam name="T">The type of an item.</typeparam>
             <remarks>
               <para>
                 The advantages of this class over <see cref="T:System.Collections.Generic.List`1" /> are the following:
                 <list type="number">
                   <item>It never allocates memory in the Large Objects Heap.</item>
                   <item>It never copies memory when the capacity must be increased.</item>
                 </list><br />
                 To attain these goals, this list can only be used to add items at the end and to
                 enumerate its content. There are many usages where only these operations are needed
                 on a list.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1._Count">
            <summary>
               The number of items.
             </summary>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Collections.LightList`1.Count" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1._FirstChunk">
            <summary>
               The first chunk.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1._LastChunk">
            <summary>
               The last chunk.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1._LastChunkCapacity">
            <summary>
               The capacity for the last chunk.
             </summary>
             <remarks>
               When an instance is created, this field contains the capacity of the first chunk.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.GetCollectionEnumerator">
            <summary>
               Gets the non-generic enumerator.
             </summary>
             <returns>The enumerator.</returns>
             <remarks>
               This method uses deferred execution.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.GetEnumerator">
            <summary>
               Gets the generic enumerator.
             </summary>
             <returns>The enumerator.</returns>
             <remarks>
               This method uses deferred execution.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1.MaxChunkSize">
            <summary>
               The maximum size of a chunk in bytes.
             </summary>
             <remarks>
               <para>
                 The maximum size is <b>65536</b>.
               </para>
               <para>
                 The value was cosen to avoid that the chunks are allocated in the <i>Large Objects
                 Heap</i>.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.#ctor">
            <summary>
               Initializes an instance of the list.
             </summary>
             <remarks>
               Using this constructor, the initial capacity is set to 16. If more capacity is
               needed, additional chunks are allocated.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.#ctor(System.Int32)">
            <summary>
               Initializes an instance of the list, with an initial capacity.
             </summary>
             <param name="Capacity"></param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="Capacity" /> is less than 0.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Capacity" /> is 0, a default initial capacity of 16 is used.
               </para>
               <para>
                 If the size of <i>T</i> multiplied by <paramref name="Capacity" />  is greater than
                 <see cref="F:OrdinaSoft.Collections.LightList`1.MaxChunkSize" /> (65536), the initial capacity is decreased. If more
                 capacity is needed, additional chunks are allocated.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Collections.LightList`1.Count">
            <summary>
               Gets the number of items.
             </summary>
             <value>The number of items.</value>
        </member>
        <member name="P:OrdinaSoft.Collections.LightList`1.IsSynchronized">
            <summary>
               Gets a value indicating whether access to the list is thread safe.
             </summary>
             <value>Always <b>false</b>.</value>
        </member>
        <member name="P:OrdinaSoft.Collections.LightList`1.SyncRoot">
            <summary>
               Gets an object that can be used to synchronize access to the list.
             </summary>
             <value>The current instance.</value>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.Add(`0)">
            <summary>
               Adds an item.
             </summary>
             <param name="Item">The item. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Adds items.
             </summary>
             <param name="Items">The items.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Items" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.CopyTo(System.Array,System.Int32)">
            <summary>
               Copies the elements of the list to an array, starting at a particular index.
             </summary>
             <param name="Array">The destination of the copy.</param>
             <param name="Index">
               The zero-based index in <paramref name="Array" />at which copying begins.
             </param>
        </member>
        <member name="T:OrdinaSoft.Collections.LightList`1.Chunk">
            <summary>
               A chunk for the <see cref="T:OrdinaSoft.Collections.LightList`1" /> class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1.Chunk.Capacity">
            <summary>
               The capacity.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.Chunk.#ctor(System.Int32)">
            <summary>
               Initializes an instance of the chunk.
             </summary>
             <param name="Capacity">The capacity</param>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1.Chunk.Items">
            <summary>
               The items in the chunk.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1.Chunk.NbItems">
            <summary>
               The number of items in the chunk.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.LightList`1.Chunk.Next">
            <summary>
               The next chunk.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.LightList`1.Chunk.Add(`0)">
            <summary>
               Adds an item.
             </summary>
             <param name="Item">The item. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if the item was added;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               The result is <b>false</b> if the chunk is full and doesn't have the place to keep
               the new item.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.osReadOnlyCollection`1">
            <summary>
               Extension to the .NET <i>ReadOnlyCollection&lt;T&gt;></i> class.
             </summary>
             <typeparam name="T">The type of elements in the collection.</typeparam>
             <remarks>
               This class simplifies the creation of a read-only collection.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Initializes a read-only collection with the specified items.
             </summary>
             <param name="Items">The items to put in the collection</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Items" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor creates a <i>List&lt;T&gt;</i> with the items and wraps this list in
               the read-only collection.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
               Initializes a read-only collection that is a wrapper around the specified list.
             </summary>
             <param name="List">The list to wrap.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="List" /> is <b>null</b>.
             </exception>
             <remarks>
               To prevent any modifications to <paramref name="List" />, expose it only through this
               wrapper
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Collections.MultiSort">
            <summary>
               Tool to sort using multiple criteria.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Collections.MultiSort.Criteria">
            <summary>
               The criteria.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.#ctor">
            <summary>
               Initializes an instance of the tool.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_Equality(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether two sort tools are equal.
             </summary>
             <param name="Tool1">The first sort tool. Can be <b>null</b>.</param>
             <param name="Tool2">The second sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Tool1" /> is equal to <paramref name="Tool2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always not equal
                 to a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_GreaterThan(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether a sort tool is greater than another one.
             </summary>
             <param name="Left">The left sort tool. Can be <b>null</b>.</param>
             <param name="Right">The right sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_GreaterThanOrEqual(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether a sort tool is greater than or equal to another one.
             </summary>
             <param name="Left">The left sort tool. Can be <b>null</b>.</param>
             <param name="Right">The right sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_LessThan(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether a sort tool is less than another one.
             </summary>
             <param name="Left">The left sort tool. Can be <b>null</b>.</param>
             <param name="Right">The right sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_LessThanOrEqual(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether a sort tool is less than or equal to another one.
             </summary>
             <param name="Left">The left sort tool. Can be <b>null</b>.</param>
             <param name="Right">The right sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.op_Inequality(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether two sort tools are not equal.
             </summary>
             <param name="Tool1">The first sort tool. Can be <b>null</b>.</param>
             <param name="Tool2">The second sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Tool1" /> is not equal to
               <paramref name="Tool2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always not equal
                 to a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.Add(System.IComparable)">
            <summary>
               Adds a value to the criteria.
             </summary>
             <param name="Value">The value.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.Compare(OrdinaSoft.Collections.MultiSort,OrdinaSoft.Collections.MultiSort)">
            <summary>
               Compares two instances of the sort tool.
             </summary>
             <param name="Left">The left sort tool. Can be <b>null</b>.</param>
             <param name="Right">The right sort tool. Can be <b>null</b>.</param>
             <returns>
               <b>&lt; 0</b> if <paramref name="Left" /> is less than
               <paramref name="Right" />;<br />
               <b>0</b> if <paramref name="Left" /> is equal to <paramref name="Right" />;<br />
               <b>&gt; 0</b> if <paramref name="Left" /> is greater than <paramref name="Right" />.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.CompareTo(OrdinaSoft.Collections.MultiSort)">
            <summary>
               Compares the current instance to another one.
             </summary>
             <param name="Other">
               The instance to compare to the current one. Can be <b>null</b>.
             </param>
             <returns>
               <b>&lt; 0</b> if the current instance> is less than <paramref name="Other" />;<br />
               <b>0</b> if the current instance is equal to <paramref name="Other" />;<br />
               <b>&gt; 0</b> if the current instance is greater than <paramref name="Other" />.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always less than
                 a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.Equals(System.Object)">
            <summary>
               Indicates whether the sort tool is equal to another instance.
             </summary>
             <param name="Obj">
               The instance to compare to the current one. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Obj" /> is a sort tool and the current instance is
               equal to <paramref name="Obj" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always not equal
                 to a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.Equals(OrdinaSoft.Collections.MultiSort)">
            <summary>
               Indicates whether the sort tool is equal to another instance.
             </summary>
             <param name="Other">
               The instance to compare to the current one. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if the current instance is equal to <paramref name="Other" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 Two <b>null</b> values are always equal and a <b>null</b> value is always not equal
                 to a <b>non-null</b> one.
               </para>
               <para>
                 The sort tools are compared using their first integer value; if they are equal,
                 they are compared using their second integer value; and so on...
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.GetHashCode">
            <summary>
               Gets the hash code for the sort tool.
             </summary>
             <returns>The hash code.</returns>
        </member>
        <member name="M:OrdinaSoft.Collections.MultiSort.ToString">
            <summary>
               Returns a string representation of the values.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.Collections.osNotifyCollectionChanged">
            <summary>
               Base class that implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> interface.
             </summary>
             <remarks>
               This class uses the <see cref="F:OrdinaSoft.osNotifyPropertyChanged.EventRaiser" /> field to raise the notification events.
               See the remarks of the <see cref="T:OrdinaSoft.osEventManager" /> class and the
               <see cref="T:OrdinaSoft.IEventRaiser" /> interface for more information.
             </remarks>
             <seealso cref="T:OrdinaSoft.IEventRaiser" />
             <seealso cref="T:OrdinaSoft.osEventManager" />
             <seealso cref="T:OrdinaSoft.osNotifyPropertyChanged" />
        </member>
        <member name="F:OrdinaSoft.Collections.osNotifyCollectionChanged._CollectionChanged">
            <summary>
               To manage the <see cref="E:OrdinaSoft.Collections.osNotifyCollectionChanged.CollectionChanged" /> event.
             </summary>
             <remarks>
               Unfortunately, we can't use the <b>OsEvent</b> aspect, because the event doesn't use
               the generic event definition.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.add_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
               Adds a handler to call when the list is changed.
             </summary>
             <param name="Handler">An event handler to add to the list.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyPropertyChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged" /> events when the list is modified.
             </summary>
             <remarks>
               We notify the change of the following properties: <b>Count</b> and <b>Indexer</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.remove_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
               Removes a handler to no more call when the list is changed.
             </summary>
             <param name="Handler">An event handler to remove from the list.</param>
        </member>
        <member name="F:OrdinaSoft.Collections.osNotifyCollectionChanged.PropName_Count">
            <summary>
               Name of the <b>Count</b> property.
             </summary>
             <remarks>
               The property is called <b>Count</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Collections.osNotifyCollectionChanged.PropName_Indexer">
            <summary>
               Name of the <b>Indexer</b> property.
             </summary>
             <remarks>
               The property is called <b>Item[]</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyItemAdded(System.Object,System.Int32)">
            <summary>
               Sends notifications for an item added to the list.
             </summary>
             <param name="Item">Item that was added to the list.</param>
             <param name="Position">Zero-based position of the added item.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyItemChanged(System.Object,System.Object)">
            <summary>
               Sends notifications for an item changed in the list.
             </summary>
             <param name="OldItem">The item that was replaced in the list.</param>
             <param name="NewItem">The new item that replaces the old one.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyItemChanged(System.Object,System.Object,System.Int32)">
            <summary>
               Sends notifications for an item changed in the list at a specified position.
             </summary>
             <param name="OldItem">The item that was replaced in the list.</param>
             <param name="NewItem">The new item that replaces the old one.</param>
             <param name="Position">Zero-based position of the changed item.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyItemRemoved(System.Object,System.Int32)">
            <summary>
               Sends notifications for an item removed from the list.
             </summary>
             <param name="Item">The item that has been removed from the list.</param>
             <param name="Position">Zero-based position of the removed item.</param>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.NotifyReset">
            <summary>
               Sends notifications when the list is completely changed.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Collections.osNotifyCollectionChanged.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Collections.osNotifyCollectionChanged.CollectionChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="E:OrdinaSoft.Collections.osNotifyCollectionChanged.CollectionChanged">
            <summary>
               Occurs when the list is changed.
             </summary>
        </member>
        <member name="T:System.Linq.Enumerable">
            <summary>
               Extension methods for the <see cref="T:System.Collections.IEnumerable" /> interface.
             </summary>
        </member>
        <member name="M:System.Linq.Enumerable.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
               Executes an action to all the items of a sequence.
             </summary>
             <param name="Items">The items. Can be <b>null</b>.</param>
             <param name="Action">The action to perform.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Action" /> is <b>null</b>.
             </exception>
             <remarks>
               The parameter of the action is the current item.
             </remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
               Executes an action to all the items of a sequence.
             </summary>
             <typeparam name="TSource">The type of a source item.</typeparam>
             <param name="Items">The items. Can be <b>null</b>.</param>
             <param name="Action">The action to perform.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Action" /> is <b>null</b>.
             </exception>
             <remarks>
               The parameter of the action is the current item.
             </remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ForEach``2(System.Collections.Generic.IEnumerable{``0},``1,System.Action{``0,``1})">
            <summary>
               Executes an action to all the items of a sequence, with a parameter.
             </summary>
             <typeparam name="TSource">The type of a source item.</typeparam>
             <typeparam name="TParameter">The type of the parameter.</typeparam>
             <param name="Items">The items. Can be <b>null</b>.</param>
             <param name="Parameter">The parameter for the action. Can be <b>null</b>.</param>
             <param name="Action">The action to perform.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Action" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 The first parameter of the action is the current item.<br />
                 The second parameter of the action if the user parameter.
               </para>
               <para>
                 <paramref name="Parameter" /> is not used directly by this method but is used as a
                 parameter for <paramref name="Action" />, so it is possible that exceptions are
                 raised by <i>Action</i>, depending on the value of the parameter.
               </para>
             </remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ForEach``3(System.Collections.Generic.IEnumerable{``0},``1,``2,System.Action{``0,``1,``2})">
            <summary>
               Executes an action to all the items of a sequence, with two parameter.
             </summary>
             <typeparam name="TSource">The type of a source item.</typeparam>
             <typeparam name="TParameter1">The type of the first parameter.</typeparam>
             <typeparam name="TParameter2">The type of the second parameter.</typeparam>
             <param name="Items">The items. Can be <b>null</b>.</param>
             <param name="Parameter1">
               The first parameter for the action. Can be <b>null</b>.
             </param>
             <param name="Parameter2">
               The second parameter for the action. Can be <b>null</b>.
             </param>
             <param name="Action">The action to perform.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Action" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 The first parameter of the action is the current item.<br />
                 The second parameter of the action if the first user parameter.<br />
                 The third parameter of the action if the second user parameter.
               </para>
               <para>
                 <paramref name="Parameter1" /> and <paramref name="Parameter2" /> are not used
                 directly by this method but is used as parameters for <paramref name="Action" />,
                 so it is possible that exceptions are raised by <i>Action</i>, depending on the
                 value of the parameters.
               </para>
             </remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Or``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
               Computes the <i>OR</i> of all the values of a sequence.
             </summary>
             <typeparam name="TSource">The type of a source item.</typeparam>
             <param name="Items">The items.</param>
             <param name="Selector">A function that returns the value to <i>OR</i>.</param>
             <returns>The result of all the <i>OR-ed</i> values</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Items" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Selector" /> is <b>null</b>.
             </exception>
             <remarks>
               The parameter of the selector is the current item and it must return the value to be
               <i>OR-ed</i>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.ComponentModel.TypeConverterForString">
            <summary>
               Type converter for strings.
             </summary>
             <remarks>
               Inheriting from this class simplifies writing type converters, because type converters
               often just need to convert from/to strings.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.TypeConverterForString.ConvertValue(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
            <summary>
               Converts a string value to the right object.
             </summary>
             <param name="Context">An object that provides a format context.</param>
             <param name="Culture">The culture to use for the conversion.</param>
             <param name="Value">The string value to convert.</param>
             <returns>The converted value.</returns>
             <remarks>
               The descendant class must override this method to perform the conversion.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.TypeConverterForString.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
               Indicates whether we can convert a data of the specified source type.
             </summary>
             <param name="Context">An object that provides a format context.</param>
             <param name="SourceType">Type of the source data.</param>
             <returns>
               <b>true</b> if <paramref name="SourceType" /> is <see cref="T:System.String" />;<br />
               otherwise, the result of the inherited method.
             </returns>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.TypeConverterForString.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
               Indicates whether we can convert to another type.
             </summary>
             <param name="Context">An object that provides a format context.</param>
             <param name="DestinationType">The type to convert to.</param>
             <returns>
               <b>true</b> if <paramref name="DestinationType" /> is <see cref="T:System.String" />;<br />
               otherwise, the result of the inherited method.
             </returns>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.TypeConverterForString.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
               Converts a string value to the right object.
             </summary>
             <param name="Context">An object that provides a format context.</param>
             <param name="Culture">The culture to use for the conversion.</param>
             <param name="Value">The source value to convert.</param>
             <returns>
               If <paramref name="Value" /> is a <see cref="T:System.String" />, this method will call the
               <see cref="M:OrdinaSoft.ComponentModel.TypeConverterForString.ConvertValue(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)" /> method;<br />
               otherwise it will call the inherited one.
             </returns>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.TypeConverterForString.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
               Converts a value to another type.
             </summary>
             <param name="Context">An object that provides a format context.</param>
             <param name="Culture">The culture to use for the conversion.</param>
             <param name="Value">The value to convert.</param>
             <param name="DestinationType">The type to convert to.</param>
             <returns>
               If <paramref name="DestinationType" /> is <b>typeof(String)</b>:
               <list type="bullet">
                 <item>If <paramref name="Value" /> is <b>null</b>, an empty string.</item>
                 <item>
                   If <paramref name="Value" /> is not <b>null</b>, the result of the call to the
                   <b>ToString</b> method on <paramref name="Value" />.
                 </item>
               </list><br />
               Otherwise, it will call the inherited method.
             </returns>
        </member>
        <member name="T:OrdinaSoft.Data.PreviewSelectedItemEventArgs">
            <summary>
               Arguments for the selection of items.
             </summary>
             <seealso cref="T:OrdinaSoft.Data.SelectableItemCollection`1" />
        </member>
        <member name="M:OrdinaSoft.Data.PreviewSelectedItemEventArgs.#ctor(System.Object)">
            <summary>
               Initializes an instance or the arguments.
             </summary>
             <param name="Item">The item that was selected or unselected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Data.PreviewSelectedItemEventArgs.Item">
            <summary>
               Gets or sets the item that was selected or unselected.
             </summary>
             <value>The item</value>
        </member>
        <member name="T:OrdinaSoft.Data.SelectableItem`1">
            <summary>
               Item that can be selected.
             </summary>
             <typeparam name="TItem">The type of the item.</typeparam>
             <remarks>
               This class defines an <see cref="P:OrdinaSoft.Data.SelectableItem`1.Item" /> property, to contain the item, and an
               <see cref="P:OrdinaSoft.Data.SelectableItem`1.IsSelected" /> property to indicate whether the item is selected.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Data.SelectableItem`1._IsSelected">
            <summary>
               Indicates whether the item is selected.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Data.SelectableItem`1.IsSelected" /> property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItem`1.set_IsSelected(System.Boolean)">
            <summary>
               Sets a value that indicates whether the item is selected.
             </summary>
             <param name="IsSelected">
               <b>true</b> if the item is selected;<br />
               otherwise, <b>false</b>.
             </param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Data.SelectableItem`1.IsSelected" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItem`1.OnIsSelectedChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItem`1.IsSelectedChanged" /> event with default arguments.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItem`1.OnIsSelectedChanged(System.EventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItem`1.IsSelectedChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItem`1.#ctor(`0)">
            <summary>
               Initializes a selectable item.
             </summary>
             <param name="Item">The item that can be selected. Can be <b>null</b>.</param>
        </member>
        <member name="P:OrdinaSoft.Data.SelectableItem`1.IsSelected">
            <summary>
               Gets or sets a value that indicates whether the item is selected.
             </summary>
             <value>
               <b>true</b> if the item is selected;<br />
               otherwise, <b>false</b>.
             </value>
        </member>
        <member name="P:OrdinaSoft.Data.SelectableItem`1.Item">
            <summary>
               Gets or sets the item.
             </summary>
             <value>The item.</value>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItem`1.IsSelectedChanged">
            <summary>
               Occurs when the <see cref="P:OrdinaSoft.Data.SelectableItem`1.IsSelected" /> property has changed for the item.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItem`1.ToString">
            <summary>
               Returns a string representation of the item.
             </summary>
             <returns>A string representation of the item.</returns>
        </member>
        <member name="T:OrdinaSoft.Data.SelectableItemCollection`1">
            <summary>
               Collection of <see cref="T:OrdinaSoft.Data.SelectableItem`1">selectable items</see>.
             </summary>
             <typeparam name="TItem">
               The type of an item in the collection. See the remarks for the constriants.
             </typeparam>
             <remarks>
               <h3>Constraint on TItem</h3>
               <para>
                 It must be an <i>IEquatable&lt;TItem></i>.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Data.SelectableItemCollection`1.DisableNotifications">
            <summary>
               Indicates whether the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.SelectionChanged" /> notifications are disabled.
             </summary>
             <remarks>
               We set this field when there are many changes in the selection, to notify just one
               change at the end. It is used in the <see cref="M:OrdinaSoft.Data.SelectableItemCollection`1.SelectAll" /> and
               <see cref="M:OrdinaSoft.Data.SelectableItemCollection`1.UnselectAll" /> methods.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Data.SelectableItemCollection`1.List">
            <summary>
               Internal list of items.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.WhenItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
               Event handler called when a property of the item has changed.
             </summary>
             <param name="Sender">Sender of the event.</param>
             <param name="Args">Arguments for the event.</param>
             <remarks>
               If the <see cref="P:OrdinaSoft.Data.SelectableItem`1.IsSelected">IsSelected</see> property has changed,
               we will raise our <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.SelectionChanged" /> event.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.Dispose(System.Boolean)">
            <summary>
               Optionally releases the managed resources of the collection.
             </summary>
             <param name="Disposing">
               <b>true</b> to release both managed and unmanaged resources;<br />
               <b>false</b> to release only unmanaged resources.
             </param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.Dispose">
            <summary>
               Releases the resources used by the collection.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnItemSelected(`0)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemSelected" /> event for a specified item.
             </summary>
             <param name="Item">The item that was selected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnItemSelected(OrdinaSoft.Data.SelectedItemEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemSelected" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnItemUnselected(`0)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemUnselected" /> event for a specified item.
             </summary>
             <param name="Item">The item that was selected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnItemUnselected(OrdinaSoft.Data.SelectedItemEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemUnselected" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnPreviewItemSelected(`0)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemSelected" /> event for a specified item.
             </summary>
             <param name="Item">The item that is about to be selected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnPreviewItemSelected(OrdinaSoft.Data.PreviewSelectedItemEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemSelected" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnPreviewItemUnselected(`0)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemUnselected" /> event for a specified item.
             </summary>
             <param name="Item">The item that is about to be selected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnPreviewItemUnselected(OrdinaSoft.Data.PreviewSelectedItemEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemUnselected" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnSelectionChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.SelectionChanged" /> event with default arguments.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.OnSelectionChanged(System.EventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.Data.SelectableItemCollection`1.SelectionChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Initializes a collection with an initial list of items.
             </summary>
             <param name="Items">
               The list of items to add to the collection. Can be <b>null</b>.
             </param>
        </member>
        <member name="P:OrdinaSoft.Data.SelectableItemCollection`1.Count">
            <summary>
               Gets the number of selectable items in the collection.
             </summary>
             <value>The number of selectable items in the collection.</value>
        </member>
        <member name="P:OrdinaSoft.Data.SelectableItemCollection`1.Item(System.Int32)">
            <summary>
               Gets the selectable item at the specified index.
             </summary>
             <param name="ix">Index of the item to get.</param>
             <value>The item at index <paramref name="ix" />.</value>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than 0, or greater than or equal to
               <see cref="P:OrdinaSoft.Data.SelectableItemCollection`1.Count" />.
             </exception>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemSelected">
            <summary>
               Occurs when an item is selected.
             </summary>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItemCollection`1.ItemUnselected">
            <summary>
               Occurs when an item is unselected.
             </summary>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemSelected">
            <summary>
               Occurs when an item is about to be selected.
             </summary>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItemCollection`1.PreviewItemUnselected">
            <summary>
               Occurs when an item is about to be unselected.
             </summary>
        </member>
        <member name="E:OrdinaSoft.Data.SelectableItemCollection`1.SelectionChanged">
            <summary>
               Occurs when the selection has changed.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.AreAllSelected">
            <summary>
               Gets a value that indicates qhether all values are selected.
             </summary>
             <returns>
               <b>true</b> if all the values are selected;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.AreAllUnselected">
            <summary>
               Gets a value that indicates qhether all values are not selected.
             </summary>
             <returns>
               <b>false</b> if all the values are selected;<br />
               otherwise, <b>true</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.Select(`0)">
            <summary>
               Selects an item in the collection.
             </summary>
             <param name="Item">Item to select.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.SelectOnly(OrdinaSoft.Data.SelectableItemCollection{`0})">
            <summary>
               Selects the items from another collection.
             </summary>
             <param name="Items">The items to select in the collection.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Items" /> is <b>null</b>.
             </exception>
             <remarks>
               After this method is called, the current instance will have selected only the items
               that are in the collection and are selected in <paramref name="Items" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.SelectAll">
            <summary>
               Selects all the items in the list.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.Sort(System.Comparison{`0})">
            <summary>
               Sorts the items.
             </summary>
             <param name="Comparison">The comparison function to use for the sort.</param>
             <exception cref="T:System.ArgumentException">
               The implementation of <paramref name="Comparison" /> caused an error during the sort.
               For example, <paramref name="Comparison" /> might not return 0 when comparing an item
               with itself.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Comparison" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Data.SelectableItemCollection`1.UnselectAll">
            <summary>
               Unselects all the items in the list.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Data.SelectedItemEventArgs">
            <summary>
               Arguments for the selection of items.
             </summary>
             <seealso cref="T:OrdinaSoft.Data.SelectableItemCollection`1" />
        </member>
        <member name="M:OrdinaSoft.Data.SelectedItemEventArgs.#ctor(System.Object)">
            <summary>
               Initializes an instance or the arguments.
             </summary>
             <param name="Item">The item that was selected or unselected.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Item" /> is <b>null</b>.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Data.SelectedItemEventArgs.Item">
            <summary>
               Gets or sets the item that was selected or unselected.
             </summary>
             <value>The item</value>
        </member>
        <member name="T:OrdinaSoft.Date">
            <summary>
               A date.
             </summary>
             <remarks>
               <para>
                 This class hides the time part of the date.
               </para>
               <para>
                 An instance of the class cannot be changed.
               </para>
               <h3>Default format</h3>
               <para>
                 By default, when the format is not specified, the <i>ToString</i> methods uses the
                 <b>d</b> format. If you use a different default format, you can set the
                 <see cref="F:OrdinaSoft.Date.DefaultFormat" /> static field to a different value at program
                 initialization.<br />
                 The field must be set only at program initialization; changing it after, especially
                 when dates are formatted can yield to unexpected results.
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.DateExtension" />
        </member>
        <member name="M:OrdinaSoft.Date.#ctor">
            <summary>
               Initializes a date without a date.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Date.#ctor(System.DateTime)">
            <summary>
               Initializes a date from a specified date and time.
             </summary>
             <param name="DateTime">The date and time.</param>
             <remarks>
               The time part of <paramref name="DateTime" /> will be set to 0.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
               Initializes a date from its components.
             </summary>
             <param name="Year">The year.</param>
             <param name="Month">The month.</param>
             <param name="Day">The day.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="Year" /> is less than 1 or greater than 9999.<br />
               -or-<br />
               <paramref name="Month" /> is less than 1 or greater than 12.<br />
               -or-<br />
               <paramref name="Day" /> is less than 1 or greater than number of days in
               <paramref name="Month" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.#ctor(System.Int64)">
            <summary>
               Initializes a date from a number of ticks.
             </summary>
             <param name="Ticks">The number of ticks in the date.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The resulting date is less than
               <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see> or greater than
               <see cref="F:System.DateTime.MaxValue">DateTime.MaxValue</see>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.get_Day">
            <summary>
               Gets the day of the month.
             </summary>
             <returns>The day of the month.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Date.Day" /> property, see the property documentation
               for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.get_DayOfWeek">
            <summary>
               Gets the day of the week.
             </summary>
             <returns>The day of the week.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Date.DayOfWeek" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.get_Month">
            <summary>
               Gets the month.
             </summary>
             <returns>The month.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Date.Month" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.get_TotalDays">
            <summary>
               Gets the total number of days.
             </summary>
             <returns>The total number of days.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Date.TotalDays" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.get_Year">
            <summary>
               Gets the year.
             </summary>
             <returns>The year.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Date.Year" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.RaiseIfNull">
            <summary>
               Raises an <i>InvalidOperationException</i> if the current instance is
               <see cref="F:OrdinaSoft.Date.Null" />. 
             </summary>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="F:OrdinaSoft.Date.DefaultFormat">
            <summary>
               The default format.
             </summary>
             <remarks>
               <para>
                 The default value is <b>d</b> (the short string format).<br />
                 If your application uses a different string format, you can set this field to your
                 default format.
               </para>
               <para>
                 This format is used when one of the <i>ToString</i> overload is called and the
                 caller doesn't specify the format.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Date.MaxValue">
            <summary>
               The maximum date that is managed by this class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Date.MinValue">
            <summary>
               The minimum date that is managed by this class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Date.Null">
            <summary>
               A date without a date.
             </summary>
        </member>
        <member name="P:OrdinaSoft.Date.Day">
            <summary>
               Gets the day of the month.
             </summary>
             <value>The day of the month.</value>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Date.DayOfWeek">
            <summary>
               Gets the day of the week.
             </summary>
             <value>The day of the week.</value>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Date.Month">
            <summary>
               Gets the month.
             </summary>
             <value>The month.</value>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Date.TotalDays">
            <summary>
               Gets the total number of days of this instance.
             </summary>
             <value>The total number of days.</value>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Date.Value">
            <summary>
               The internal date and time that is used to keep the date.
             </summary>
             <value>
               <b>null</b> if the current instance is <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, the internal date and time.
             </value>
             <remarks>
               <para>The time part of the date / time is always 0.</para>
               <para>
                 This property can be useful for binding to UI elements, when the control needs a
                 .NET date.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Date.Year">
            <summary>
               Gets the year.
             </summary>
             <value>The year.</value>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.op_Equality(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether two dates are equal.
             </summary>
             <param name="Date1">The first date to compare. Can be <b>null</b>.</param>
             <param name="Date2">The second date to compare. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Date1" /> is equal to <paramref name="Date2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(System.DateTime)~OrdinaSoft.Date">
            <summary>
               Converts a date and time to a date.
             </summary>
             <param name="DateTime">The date and time to convert.</param>
             <returns>A date whose value is the date of <paramref name="DateTime" />.</returns>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(System.Nullable{System.DateTime})~OrdinaSoft.Date">
            <summary>
               Converts a nullable date and time to a date.
             </summary>
             <param name="DateTime">The date and time to convert. Can be <b>null</b>.</param>
             <returns>
               <see cref="F:OrdinaSoft.Date.Null" /> if <paramref name="DateTime" /> is <b>null</b>;<br />
               otherwise, a date whose value is the date of <paramref name="DateTime" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(OrdinaSoft.Date)~System.DateTime">
            <summary>
               Converts a date to a date and time.
             </summary>
             <param name="Date">The date to convert.</param>
             <returns>A date and time whose value is <paramref name="Date" />.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Date" /> is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(OrdinaSoft.Date)~System.Nullable{System.DateTime}">
            <summary>
               Converts a date to a date and time.
             </summary>
             <param name="Date">The date to convert. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Date" /> is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, a date and time whose value is <paramref name="Date" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(System.String)~OrdinaSoft.Date">
            <summary>
               Casts a string to a date.
             </summary>
             <param name="Text">The string. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Text" /> is <b>null</b>;<br />
               <see cref="F:OrdinaSoft.Date.Null" /> if <paramref name="Text" /> is empty or contains only white
               space;<br />
               otherwise, the date corresponding to <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> doesn't represent a valid date.
             </exception>
             <remarks>
               This method uses the default XML formatting for a date: <b>yyyy-MM-dd</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_Explicit(System.Xml.Linq.XAttribute)~OrdinaSoft.Date">
            <summary>
               Casts an XML attribute to a date.
             </summary>
             <param name="Attr">The XML attribute. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Attr" /> is <b>null</b>;<br />
               <see cref="F:OrdinaSoft.Date.Null" /> if <paramref name="Attr" /> is empty or contains only white
               space;<br />
               otherwise, the date corresponding to <paramref name="Attr" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Attr" /> doesn't represent a valid date.
             </exception>
             <remarks>
               This method uses the default XML formatting for a date: <b>yyyy-MM-dd</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_GreaterThan(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether a date is greater than another one.
             </summary>
             <param name="Left">The date at the left of the operator. Can be <b>null</b>.</param>
             <param name="Right">The date at the right of the operator. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date,
                 greater than a <b>null</b> date, but less than a a non <see cref="F:OrdinaSoft.Date.Null" />
                 date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_GreaterThanOrEqual(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether a date is greater than or equal to another one.
             </summary>
             <param name="Left">The date at the left of the operator. Can be <b>null</b>.</param>
             <param name="Right">The date at the right of the operator. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date,
                 greater than a <b>null</b> date, but less than a a non <see cref="F:OrdinaSoft.Date.Null" />
                 date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_LessThan(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether a date is less than another one.
             </summary>
             <param name="Left">The date at the left of the operator. Can be <b>null</b>.</param>
             <param name="Right">The date at the right of the operator. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date,
                 greater than a <b>null</b> date, but less than a a non <see cref="F:OrdinaSoft.Date.Null" />
                 date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_LessThanOrEqual(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether a date is less than or equal to another one.
             </summary>
             <param name="Left">The date at the left of the operator. Can be <b>null</b>.</param>
             <param name="Right">The date at the right of the operator. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date,
                 greater than a <b>null</b> date, but less than a a non <see cref="F:OrdinaSoft.Date.Null" />
                 date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_Inequality(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Indicates whether two dates are not equal.
             </summary>
             <param name="Date1">The first date to compare. Can be <b>null</b>.</param>
             <param name="Date2">The second date to compare. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Date1" /> is not equal to
               <paramref name="Date2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.op_Subtraction(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Subtracts two dates.
             </summary>
             <param name="Left">The date at left of the operator.</param>
             <param name="Right">The date at the right of the operator.</param>
             <returns>
               The time interval between <paramref name="Left" /> and <paramref name="Right" />;
               that is <i>Right</i> - <i>Left</i>.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Left" /> is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />;<br />
               -or-<br />
               <paramref name="Left" /> is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.AddDays(System.Int32)">
            <summary>
               Returns a new <b>Date</b> that adds the specified number of days to the current
               instance.
             </summary>
             <param name="NbDays">The number of days to add.</param>
             <returns>
               A date whose value is the current instance with the specified number of days added.
             </returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The resulting date is less than <see cref="F:OrdinaSoft.Date.MinValue" /> or greater than
               <see cref="F:OrdinaSoft.Date.MaxValue" />.
             </exception>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               <paramref name="NbDays" /> can be positive or negative.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.AddMonths(System.Int32)">
            <summary>
               Returns a new <b>Date</b> that adds the specified number of months to the current
               instance.
             </summary>
             <param name="NbMonths">The number of months to add.</param>
             <returns>
               A date whose value is the current instance with the specified number of months added.
             </returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The resulting date is less than <see cref="F:OrdinaSoft.Date.MinValue" /> or greater than
               <see cref="F:OrdinaSoft.Date.MaxValue" />.
             </exception>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               <paramref name="NbMonths" /> can be positive or negative.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.AddYears(System.Int32)">
            <summary>
               Returns a new <b>Date</b> that adds the specified number of years to the current
               instance.
             </summary>
             <param name="NbYears">The number of years to add.</param>
             <returns>
               A date whose value is the current instance with the specified number of years added.
             </returns>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The resulting date is less than <see cref="F:OrdinaSoft.Date.MinValue" /> or greater than
               <see cref="F:OrdinaSoft.Date.MaxValue" />.
             </exception>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
             <remarks>
               <paramref name="NbYears" /> can be positive or negative.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.CalcAge">
            <summary>
               Calculates the current age of a person, in completed years.
             </summary>
             <returns>The age.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.CalcAge(OrdinaSoft.Date)">
            <summary>
               Calculates the age of a person at a reference date, in completed years.
             </summary>
             <param name="ReferenceDate">The reference date.</param>
             <returns>The age.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="ReferenceDate" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.<br />
               -or-<br />
               <paramref name="ReferenceDate" /> is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.CalcAge(System.DateTime)">
            <summary>
               Calculates the age of a person at a reference date, in completed years.
             </summary>
             <param name="ReferenceDate">The reference date.</param>
             <returns>The age.</returns>
             <exception cref="T:System.InvalidOperationException">
               The current instance is <see cref="F:OrdinaSoft.Date.Null" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Date.CalcAge(System.DateTime,System.DateTime)">
            <summary>
               Calculates the age of a person in completed years.
             </summary>
             <param name="Birthdate">The birthdate.</param>
             <param name="ReferenceDate">The reference date.</param>
             <returns>The age.</returns>
        </member>
        <member name="M:OrdinaSoft.Date.Compare(OrdinaSoft.Date,OrdinaSoft.Date)">
            <summary>
               Compares two dates.
             </summary>
             <param name="Left">The date at the left of the operator. Can be <b>null</b>.</param>
             <param name="Right">The date at the right of the operator. Can be <b>null</b>.</param>
             <returns>
               <b>0</b> if <paramref name="Left" /> is equal to <paramref name="Right" />;<br />
               <b>&lt; 0</b> if <paramref name="Left" /> is less than
               <paramref name="Right" />;<br />
               <b>&gt; 0</b> if <paramref name="Left" /> is greater than
               <paramref name="Right" />.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date,
                 greater than a <b>null</b> date, but less than a a non <see cref="F:OrdinaSoft.Date.Null" />
                 date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.Equals(OrdinaSoft.Date)">
            <summary>
               Indicates whether this instance is equal to another one.
             </summary>
             <param name="Other">
               Another date to compare to the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if the current instance is equal to <paramref name="Other" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.Equals(System.Object)">
            <summary>
               Indicates whether this instance is equal to an object.
             </summary>
             <param name="Obj">
               An object to compare to the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Obj" /> is a <i>Date</i> and its value is equal to the
               current instance;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A <b>null</b> date is always equal to another <b>null</b> date, but less than a
                 a <b>non-null</b> date.<br />
                 A <see cref="F:OrdinaSoft.Date.Null" /> date is always equal to another <see cref="F:OrdinaSoft.Date.Null" /> date.
               </para>
               <para>The dates are compared by their internal value.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.GetHashCode">
            <summary>
               Gets the has code of the date.
             </summary>
             <returns>The hash code.</returns>
        </member>
        <member name="M:OrdinaSoft.Date.IsNull(OrdinaSoft.Date)">
            <summary>
               Indicates whether a date is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />.
             </summary>
             <param name="Date">The date to check. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Date" /> is <b>null</b> or <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.Parse(System.String)">
            <summary>
               Parses a date.
             </summary>
             <param name="Text">The date to parse. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Text" /> is <b>null</b>;<br />
               <see cref="F:OrdinaSoft.Date.Null" /> if <paramref name="Text" /> is empty or contains only white
               space;<br />
               otherwise, the date corresponding to <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> doesn't represent a valid date.
             </exception>
             <remarks>
               This method uses the formatting defined in the current thread culture.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.Today">
            <summary>
               Gets today's date.
             </summary>
             <returns>Today's date.</returns>
        </member>
        <member name="M:OrdinaSoft.Date.ToLongString">
            <summary>
               Formats the date, using the long date string format.
             </summary>
             <returns>
               An <b>empty string</b> if the instance is <b>null</b>;<br />
               otherwise, a string with the date, formatted with the "D" standard date and time
               format string.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.ToShortString">
            <summary>
               Formats the date, using the short date string format.
             </summary>
             <returns>
               An <b>empty string</b> if the instance is <b>null</b>;<br />
               otherwise, a string with the date, formatted with the "d" standard date and time
               format string.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.ToString">
            <summary>
               Formats the date.
             </summary>
             <returns>
               An <b>empty string</b> if the current instance is <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, the date, formatted using the <see cref="F:OrdinaSoft.Date.DefaultFormat" /> format.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Date.ToString(System.String)">
            <summary>
               Formats the date, using the specified format.
             </summary>
             <param name="Format">The format to use. Can be <b>null</b>.</param>
             <returns>
               An <b>empty string</b> if the current instance is <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, the date, formatted using the specific format.
             </returns>
             <remarks>
               <para>
                 If <paramref name="Format" /> is <b>null</b>, this method uses the
                 <see cref="F:OrdinaSoft.Date.DefaultFormat" /> format
               </para>
               <para>
                 As the time is always 0, you should not use the time specifiers in the format.
               </para>
               <para>
                 For standard date formats, you can look
                 <a href="https://msdn.microsoft.com/en-us/library/az4se3k1%28v=vs.110%29.aspx"
                    >here</a>.<br />
                 For custom date formats, you can look
                 <a href="https://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx"
                    >here</a>.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.ToString(System.String,System.IFormatProvider)">
            <summary>
               Formats the date, using the specified format.
             </summary>
             <param name="Format">The format to use. Can be <b>null</b>.</param>
             <param name="FormatProvider">
               The provider to use to format the date. Can be <b>null</b>.
             </param>
             <returns>
               An <b>empty string</b> if the current instance is <see cref="F:OrdinaSoft.Date.Null" />;<br />
               otherwise, the date, formatted using the specific format.
             </returns>
             <remarks>
               <para>
                 If <paramref name="Format" /> is <b>null</b>, this method uses the
                 <see cref="F:OrdinaSoft.Date.DefaultFormat" /> format
               </para>
               <para>
                 If <paramref name="FormatProvider" /> is <b>null</b>, this method will use the
                 format information from the current locale setting of the operating system.
               </para>
               <para>
                 As the time is always 0, you should not use the time specifiers in the format.
               </para>
               <para>
                 For standard date formats, you can look
                 <a href="https://msdn.microsoft.com/en-us/library/az4se3k1%28v=vs.110%29.aspx"
                    >here</a>.<br />
                 For custom date formats, you can look
                 <a href="https://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx"
                    >here</a>.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Date.TryParse(System.String,OrdinaSoft.Date@)">
            <summary>
               Tries to parse a date.
             </summary>
             <param name="Text">The date to parse. Can be <b>null</b>.</param>
             <param name="Date">
               <b>null</b> if <paramref name="Text" /> cannot be parsed or is <b>null</b>;<br />
               <see cref="F:OrdinaSoft.Date.Null" /> if <paramref name="Text" /> is empty or contains only white
               space;<br />
               otherwise, the date corresponding to <paramref name="Text" />.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> has been parsed successfully;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="T:OrdinaSoft.DateExtension">
            <summary>
               Extension methods for the <see cref="T:OrdinaSoft.Date" /> class.
             </summary>
             <remarks>
               This class defines the methods that accepts <b>null</b> as a valid value for the date.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DateExtension.ToJson(OrdinaSoft.Date,System.String)">
            <summary>
               Returns a JSON value with a date.
             </summary>
             <param name="Date">The date. Can be <b>null</b>.</param>
             <param name="Name">The name of the JSON value to return.</param>
             <returns>
               <b>null</b> if <paramref name="Date" /> is <b>null</b>;<br />
               an <see cref="T:OrdinaSoft.Json.JsonNullValue">JSON null value</see> named <paramref name="Name" /> if
               <paramref name="Date" /> is <see cref="F:OrdinaSoft.Date.Null">Null</see>;<br />
               otherwise, a JSON value named <paramref name="Name" /> with the date.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This method doesn't check whether <paramref name="Name" /> is a valid name for a
                 JSON value.
               </para>
               <para>This method uses the following formatting: <b>yyyy-MM-dd</b>.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DateExtension.ToXAttribute(OrdinaSoft.Date,System.String)">
            <summary>
               Returns an XML attribute with a date.
             </summary>
             <param name="Date">The date. Can be <b>null</b>.</param>
             <param name="Name">The name of the XML attribute to return.</param>
             <returns>
               <b>null</b> if <paramref name="Date" /> is <b>null</b>;<br />
               an empty XML attribute named <paramref name="Name" /> if <paramref name="Date" /> is
               <see cref="F:OrdinaSoft.Date.Null">Null</see>;<br />
               otherwise, an XML attribute named <paramref name="Name" /> with the date.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               <paramref name="Name" /> is not a valid name for an XML attribute.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Date" /> is <b>null</b>, <paramref name="Name" /> is not
                 checked.
               </para>
               <para>
                 This method uses the default XML formatting for a date: <b>yyyy-MM-dd</b>.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.DiscreteValue">
            <summary>
               Base class for a <b>discrete value</b>.
             </summary>
             <remarks>
               <para>
                 The <i>DiscreteValue</i> class is defined in two classes: this class define the base
                 definitions that are not tied to the type of the discrete value and the
                 <see cref="T:OrdinaSoft.DiscreteValue`1" /> class contains the definitions that are generic to the
                 discrete value.
               </para>
               <para>
                 A discrete value is a data with a finite number of possible values that can be saved
                 in a database.<br />
                 Each value in a set of discrete value is defined by its <see cref="P:OrdinaSoft.DiscreteValue.Value" /> (a
                 32-bit integer number), its <see cref="P:OrdinaSoft.DiscreteValue.Name" /> (any text) and its
                 <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> (the text to display to the user for the value). Contrary to
                 an enum value, a discrete value has the <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> property, that is
                 returned by the <see cref="M:OrdinaSoft.DiscreteValue.ToString" /> method, and shows a user friendly text to the
                 user, instead of a cryptic name.
               </para>
               <para>
                 This class has support for database <b>NULL</b> values, as well as <b>not defined</b>
                 value.<br />
                 The <b>not defined</b> value is specified with a <b>null</b> value of the variable,
                 field or property that contains a discrete value.<br />
                 The <b>NULL</b> database value is specified with the special
                 <see cref="P:OrdinaSoft.DiscreteValue`1.Null">Null</see> value that should be defined for each
                 discrete value set.
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue`1" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombination`2" />
             <seealso cref="T:OrdinaSoft.DiscreteValueSet`2" />
             <seealso cref="T:OrdinaSoft.TextResourcesDict" />
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.#ctor">
            <summary>
               Initializes an instance without any value.
             </summary>
             <remarks>
               <b>Note to class inheritors</b>: this constructor is used internally only, but must
               be defined as public in the final class because of generic constraints in
               <see cref="T:OrdinaSoft.DiscreteValue`1" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
               Initializes a discrete value.
             </summary>
             <param name="Name">The name.</param>
             <param name="Value">The value.</param>
             <param name="ResourceName">
               The name of the resource for the text to display to the user. Can be <b>null</b>.
             </param>
             <param name="UserText">
               The text to display to the user. Can be <b>null</b>.<br />
               Default value is <b>null</b>.
             </param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ResourceName" /> or <paramref name="UserText" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="ResourceName" /> is not <b>null</b>, <paramref name="UserText" />
               is ignored and the text to display to the user is taken from the text resources. In
               this case,  changing the text resources of the application changes also the text to
               display to the user.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue.Val_Null">
            <summary>
               Value for a database <b>NULL</b>.
             </summary>
             <remarks>
               <para>The value is <b>-1</b>.</para>
               <para>
                 As this value is -1, all the other values should be positive.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue.Name_Null">
            <summary>
               Name for a database <b>NULL</b> value.
             </summary>
             <remarks>
               The name is <b>Null</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue.Name">
            <summary>
               Gets or sets the name.
             </summary>
             <value>The name.</value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue.ResourceName">
            <summary>
               Gets or sets the name of the resource for the text to display to the user.
             </summary>
             <value>The name of the resource for the text to display to the user.</value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue.UserText">
            <summary>
               Gets or sets the text to display to the user.
             </summary>
             <value>The text to display to the user.</value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_Equality(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether two <b>DiscreteValue</b> are equal.
             </summary>
             <param name="Value1">
               The first <b>DiscreteValue</b> to compare. Can be <b>null</b>.
             </param>
             <param name="Value2">
               The second <b>DiscreteValue</b> to compare. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Value1" /> is equal to
               <paramref name="Value2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether the
                 instances are equal.
               </para>
               <para>
                 Two <b>null</b> values are considered equals and a <b>null</b> value is considered
                 not equal to any non-<b>null</b> value.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_Equality(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is equal to an integer value.
             </summary>
             <param name="Value1">The <b>DiscreteValue</b> to compare. Can be <b>null</b>.</param>
             <param name="Value2">The integer value to compare.</param>
             <returns>
               <b>true</b> if <paramref name="Value1" /> is not-<b>null</b> and is equal to
               <paramref name="Value2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of
               <paramref name="Value1" /> to identify whether the values are equal.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_GreaterThan(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is greater than another one.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The <b>DiscreteValue</b> at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether
                 <paramref name="Left" /> is greater than <paramref name="Right" />.
               </para>
               <para>
                 Any non-<b>null</b> reference is always greater than a <b>null</b> reference.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_GreaterThan(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is greater than an integer value.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">The integer value at the right of the operator.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is non-<b>null</b> and greater than
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of  <paramref name="Left" />
               to identify whether it is greater than <paramref name="Right" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_GreaterThanOrEqual(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is greater than or equal to another one.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The <b>DiscreteValue</b> at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is greater than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether
                 <paramref name="Left" /> is greater than or equal to <paramref name="Right" />.
               </para>
               <para>
                 Two <b>null</b> references are considered equals.<br />
                 Any non-<b>null</b> reference is always greater than a <b>null</b> reference.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_GreaterThanOrEqual(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is greater than or equal to an integer
               value.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">The integer value at the right of the operator.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is non-<b>null</b> and greater than or equal
               to <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of  <paramref name="Left" />
               to identify whether it is greater than <paramref name="Right" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_LessThan(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is less than another one.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The <b>DiscreteValue</b> at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether
                 <paramref name="Left" /> is less than <paramref name="Right" />.
               </para>
               <para>
                 A <b>null</b> reference is always less than any non-<b>null</b> reference.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_LessThan(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is less than an integer value.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">The integer value at the right of the operator.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is <b>null</b> or less than
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of  <paramref name="Left" />
               to identify whether it is less than <paramref name="Right" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_LessThanOrEqual(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is less than or equal to another one.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The <b>DiscreteValue</b> at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is less than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether
                 <paramref name="Left" /> is less than or equal to <paramref name="Right" />.
               </para>
               <para>
                 Two <b>null</b> references are considered equals.<br />
                 A <b>null</b> reference is always less than any non-<b>null</b> reference.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_LessThanOrEqual(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is less than or equal to an integer value.
             </summary>
             <param name="Left">
               The <b>DiscreteValue</b> at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">The integer value at the right of the operator.</param>
             <returns>
               <b>true</b> if <paramref name="Left" /> is <b>null</b> or less than or equal to
               <paramref name="Right" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of  <paramref name="Left" />
               to identify whether it is less than or equal to <paramref name="Right" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_Inequality(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether two <b>DiscreteValue</b> are not equal.
             </summary>
             <param name="Value1">
               The first <b>DiscreteValue</b> to compare. Can be <b>null</b>.
             </param>
             <param name="Value2">
               The second <b>DiscreteValue</b> to compare. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Value1" /> is not equal to
               <paramref name="Value2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether the
                 instances are not equal.
               </para>
               <para>
                 Two <b>null</b> values are considered equals and a <b>null</b> value is considered
                 not equal to any non-<b>null</b> value.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.op_Inequality(OrdinaSoft.DiscreteValue,System.Int32)">
            <summary>
               Indicates whether a <b>DiscreteValue</b> is not equal to an integer value.
             </summary>
             <param name="Value1">The <b>DiscreteValue</b> to compare. Can be <b>null</b>.</param>
             <param name="Value2">The integer value to compare.</param>
             <returns>
               <b>true</b> if <paramref name="Value1" /> is <b>null</b> or is not equal to
               <paramref name="Value2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This operator compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property of
               <paramref name="Value1" /> to identify whether the values are not equal.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.Compare(System.Object,System.Object)">
            <summary>
               Compares two discrete values.
             </summary>
             <param name="Left">
               The discrete value at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The discrete value at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>&lt; 0</b> if <paramref name="Left" /> is less than
               <paramref name="Right" />;<br />
               <b>0</b> if <paramref name="Left" /> is equal to <paramref name="Right" />;<br />
               <b>> 0</b> if <paramref name="Left" /> is greater than <paramref name="Right" />.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Left" /> is not a <b>DiscreteValue</b>.<br />
               -or-<br />
               <paramref name="Right" /> is not a <b>DiscreteValue</b>.
             </exception>
             <remarks>
               <para>
                 This method compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to compare the instances.
               </para>
               <para>
                 Two <b>null</b> references are considered equals.<br />
                 A <b>null</b> reference is always less than any non-<b>null</b> reference.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.CompareByUserText(OrdinaSoft.DiscreteValue,OrdinaSoft.DiscreteValue)">
            <summary>
               Compares two discrete values, using their <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> property.
             </summary>
             <param name="Left">
               The discrete value at the left of the operator. Can be <b>null</b>.
             </param>
             <param name="Right">
               The discrete value at the right of the operator. Can be <b>null</b>.
             </param>
             <returns>
               <b>&lt; 0</b> if <paramref name="Left" /> is less than
               <paramref name="Right" />;<br />
               <b>0</b> if <paramref name="Left" /> is equal to <paramref name="Right" />;<br />
               <b>> 0</b> if <paramref name="Left" /> is greater than <paramref name="Right" />.
             </returns>
             <remarks>
               The comparison is made in a case-insensitive way.<br />
               The comparison uses the current culture to obtain culture-specific information such
               as casing rules and the alphabetic order of individual characters.<br />
               For example, a culture could specify that certain combinations of characters be
               treated as a single character, or uppercase and lowercase characters be compared in a
               particular way, or that the sorting order of a character depends on the characters
               that precede or follow it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.CompareTo(System.Object)">
            <summary>
               Compares this instance to a specified object.
             </summary>
             <param name="Other">The object. Can be <b>null</b>.</param>
             <returns>
               <b>&lt; 0</b> if this instance is less than <paramref name="Other" />;<br />
               <b>0</b> if this instance is equal to <paramref name="Other" />;<br />
               <b>> 0</b> if this instance is greater than <paramref name="Other" />.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Other" /> is not a <b>DiscreteValue</b>.
             </exception>
             <remarks>
               <para>
                 This method compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to compare the instances.
               </para>
               <para>This method implements <see cref="T:System.IComparable" />.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.Equals(OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether this instance is equal to another <b>DiscreteValue</b>.
             </summary>
             <param name="Other">
               Another instance of <b>DiscreteValue</b> to compare to the current one. Can be
               <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Other" /> equals the value of this instance;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This method compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether the
                 instances are equal.
               </para>
               <para>This method implements <see cref="T:System.IEquatable`1" />.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.Equals(System.Object)">
            <summary>
               Returns a value indicating whether this instance is equal to a specified object.
             </summary>
             <param name="Obj">An object to compare with this instance. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Obj" /> is a <b>DiscreteValue</b> and equals the value
               of this instance;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This method compares the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property to identify whether the
               instances are equal.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.GetHashCode">
            <summary>
               Returns the hash code for this instance.
             </summary>
             <returns>A hash code for the discrete value.</returns>
             <remarks>
               This method returns the value of the <see cref="P:OrdinaSoft.DiscreteValue.Value" /> property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.IsNull(OrdinaSoft.DiscreteValue)">
            <summary>
               Indicates whether a discrete value is <b>null</b>.
             </summary>
             <param name="Value">A value to check. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Value" /> is <b>null</b> or its <see cref="P:OrdinaSoft.DiscreteValue.Value" />
               property contains <see cref="F:OrdinaSoft.DiscreteValue.Val_Null" />;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue.ToString">
            <summary>
               Returns a string representation of the discrete value.
             </summary>
             <returns>
              The value of the <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> property.
             </returns>
        </member>
        <member name="T:OrdinaSoft.DiscreteValue`1">
            <summary>
               Base generic class for a <b>discrete value</b>.
             </summary>
             <typeparam name="TValue">
               The type of the discrete value. See the remarks for the constriants.
             </typeparam>
             <remarks>
               <para>
                 The <i>DiscreteValue</i> class is defined in two classes: the
                 <see cref="T:OrdinaSoft.DiscreteValue" /> class defines the base definitions that are not tied to
                 the type of the discrete value and this class contains the definitions that are
                 generic to the discrete value.
               </para>
               <para>
                 A discrete value is a data with a finite number of possible values that can be saved
                 in a database.<br />
                 Each value in a set of discrete value is defined by its <see cref="P:OrdinaSoft.DiscreteValue.Value" /> (a
                 32-bit integer number), its <see cref="P:OrdinaSoft.DiscreteValue.Name" /> (any text, excepted only digits) and
                 its <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> (the text to display to the user for the value). Contrary
                 to an enum value, a discrete value has the <see cref="P:OrdinaSoft.DiscreteValue.UserText" /> property, that is
                 returned by the <see cref="M:OrdinaSoft.DiscreteValue.ToString" /> method, and shows a user friendly text to the
                 user, instead of a cryptic name.
               </para>
               <para>
                 This class has support for database <b>NULL</b> values, as well as <b>not defined</b>
                 value.<br />
                 The <b>not defined</b> value is specified with a <b>null</b> value of the variable,
                 field or property that contains a discrete value.<br />
                 The <b>NULL</b> value is specified with the special
                 <see cref="P:OrdinaSoft.DiscreteValue`1.Null">Null</see> value that should be defined for each
                 discrete value set.
               </para>
               <para>
                 To speed the parsing of the values, the text representation of the integer value of
                 each existing value is saved in a dictionary. To make this work correctly, the
                 <see cref="P:OrdinaSoft.DiscreteValue.Name" /> of a value should not contain only digits.
               </para>
               <para>
                 When getting a value, the <see cref="M:OrdinaSoft.DiscreteValue`1.FromValue(System.Nullable{System.Int32})" /> and
                 <see cref="M:OrdinaSoft.DiscreteValue`1.FromXAttribute(System.Xml.Linq.XAttribute)" /> methods adds a new discrete value when
                 possible, to avoid that the application crashes because of an unknown value. The
                 other methods, <i>IsDefined</i>, <i>Parse</i> and <i>TryParse</i>, doesn't use them.
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombination`2" />
             <seealso cref="T:OrdinaSoft.DiscreteValueSet`2" />
             <seealso cref="T:OrdinaSoft.TextResourcesDict" />
        </member>
        <member name="F:OrdinaSoft.DiscreteValue`1._List">
            <summary>
               List of all discrete values for this type.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.#cctor">
            <summary>
               Initializes the static data of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.#ctor">
            <summary>
               Initializes a discrete value without any value.
             </summary>
             <remarks>
               <b>Note to class inheritors</b>: this constructor is used internally only, but must
               be defined as public in the final class because of generic constraints.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
               Initializes a discrete value.
             </summary>
             <param name="Name">The name.</param>
             <param name="Value">The value.</param>
             <param name="ResourceName">
               The name of the resource for the text to display to the user. Can be <b>null</b>.
             </param>
             <param name="UserText">
               The text to display to the user. Can be <b>null</b>.<br />
               Default value is <b>null</b>.
             </param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ResourceName" /> or <paramref name="UserText" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="ResourceName" /> is not <b>null</b>, <paramref name="UserText" />
               is ignored and the text to display to the user is taken from the text resources. In
               this case,  changing the text resources of the application changes also the text to
               display to the user.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.WhenLanguageChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
               Event handler called when the user language has changed.
             </summary>
             <param name="Sender">Sender of the event.</param>
             <param name="Args">Arguments for the event.</param>
             <remarks>
               The goal of this method is to reload all the texts from their resource, to create and
               sort a new list of values and to notify of the changes.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue`1.AddedDict">
            <summary>
               The dictionary with the automatically generated discrete values.
             </summary>
             <remarks>
               <para>
                 The dictionary is indexed by value.
               </para>
               <para>
                 We need to use a <i>ConcurrentDictionary</i> because values can be added while
                 retrieving them at the same time and there can be more than one add at the same
                 time. As this dictionary is only used for unknown values, the cost of using it is
                 very low.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue`1.NameToValueDict">
            <summary>
               The dictionary to retrieve a discrete value from its name.
             </summary>
             <remarks>
               The dictionary is indexed by name, with a case-insensitive comparison.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue`1.NbToValueDict">
            <summary>
               The dictionary to retrieve a discrete value from its value.
             </summary>
             <remarks>
               The dictionary is indexed by value.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValue`1.UsesTextResources">
            <summary>
               Indicates whether the discrete values uses text resources.
             </summary>
             <remarks>
               <para>
                 The default value is <b>true</b>.
               </para>
               <para>
                 Changing the value after the first call to <see cref="M:OrdinaSoft.DiscreteValue`1.InitializeList" /> can have
                 inpredictable effects.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.Add(`0)">
            <summary>
               Adds a discrete value to the list of valid values.
             </summary>
             <param name="Value">Value to add.</param>
             <returns>The added value.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.FromXAttribute(System.Xml.Linq.XAttribute)">
            <summary>
               Returns a discrete value read from an XML attribute.
             </summary>
             <param name="Attr">
               The XML attribute with the discrete value. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Attr" /> is <b>null</b>;<br />
               otherwise, the discrete value that corresponds to the XML attribute.
             </returns>
             <exception cref="T:System.FormatException">
               The attribute value is neither an integer number nor a valid name.
             </exception>
             <remarks>
               If the attribute is not <b>null</b>, but an unknown value, the result is an
               automatically generated discrete value, with the value as its name and its value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.InitializeList">
            <summary>
               Initializes the list of all values, sorted by user text.
             </summary>
             <remarks>
               <para>
                 This method initialize thes <see cref="P:OrdinaSoft.DiscreteValue`1.List" /> static property. It should be
                 called after all the possible discrete values are initialized.
               </para>
               <para>
                 If this method is called when the <see cref="P:OrdinaSoft.DiscreteValue`1.List" /> static property is already
                 initialized, a new list of values is generated and sorted. This can be useful if
                 the user texts of the values are changed and the list should be sorted again.
               </para>
               <para>
                 In the discrete values, this method adds an event handler to be notified of the
                 change of the language, in order to automatically update the text resources and to
                 notify the changes to the UI.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.OnListChanged(System.EventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.DiscreteValue`1.ListChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.TryParseInternal(System.String,`0@)">
            <summary>
               Tries to parse a name or integer value to a discrete value.
             </summary>
             <param name="Name">
               The name or integer value of a discrete value. Can be <b>null</b>.
             </param>
             <param name="Value">
               Returns <b>null</b> if <paramref name="Name" /> is <b>null</b>;<br />
               returns <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> if <paramref name="Name" /> is an empty string and
               <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> is a valid value for the discrete value (i.e it is not
               <b>null</b>);<br />
               returns <b>null</b> if <paramref name="Name" /> is not a valid value for the discrete
               value;<br />
               otherwise, returns the value corresponding to <paramref name="Name" />.
             </param>
             <returns>
               <b>true</b> if <paramref name="Name" /> has been recognized as a valid name or value
               for the discrete value;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>The default method just returns <b>false</b>.</para>
               <para>
                 This method is called on the <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> instance, if it is defined, to let
                 descendant classes add additional parse algorithms for special versions.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue`1.Count">
            <summary>
               Gets the number of values in the discrete type.
             </summary>
             <value>The number of values in the discrete type.</value>
             <remarks>
               The count does not include the <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue`1.List">
            <summary>
               Gets the list of all discrete values.
             </summary>
             <value>The list of all discrete values, sorted by user text.</value>
             <remarks>
               The list does not contain the <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValue`1.Null">
            <summary>
               Gets a value that represents the database <b>NULL</b> value.
             </summary>
             <value>A value that represents the database <b>NULL</b> value.</value>
             <remarks>
               This property must be initialized in the derived class.
             </remarks>
        </member>
        <member name="E:OrdinaSoft.DiscreteValue`1.ListChanged">
            <summary>
               Occurs when the list of values has changed, normally because the program's resources
               are changed
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.Equals(`0)">
            <summary>
               Indicates whether this instance is equal to another one.
             </summary>
             <param name="Value">
               The value to compare to the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Value" /> is not <b>null</b> and is equal to the
               current instance;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.FromValue(System.Nullable{System.Int32})">
            <summary>
               Returns the discrete value equivalent to an integer value.
             </summary>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the discrete value with a value of <paramref name="Value" />.
             </returns>
             <remarks>
               If the attribute is not <b>null</b>, but an unknown value, the result is an
               automatically generated discrete value, with the value as its name and its value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.IsDefined(System.Int32)">
            <summary>
               Indicates whether a discrete value with the specified number exists.
             </summary>
             <param name="No">The number of a value.</param>
             <returns>
               <b>true</b> if there is a discrete value with the specified number;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This method doesn't take into account the automatically generated values. It only
               uses the officialy defined values.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.IsDefined(System.String)">
            <summary>
               Indicates whether a discrete value with the specified name exists.
             </summary>
             <param name="Name">The name of a value.</param>
             <returns>
               <b>true</b> if there is a discrete value with the specified name;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.Parse(System.String)">
            <summary>
               Returns the discrete value equivalent to the specified name or integer value.
             </summary>
             <param name="Name">The name or integer value to parse. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Name" /> is <b>null</b>;<br />
               otherwise, the discrete value corresponding to <paramref name="Name" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Name" /> is not a right name or value for the discrete value.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.Parse(System.String,`0)">
            <summary>
               Returns the discrete value equivalent to the specified name or integer value, with a
               default value.
             </summary>
             <param name="Name">The name or integer value to parse. Can be <b>null</b>.</param>
             <param name="DefaultValue">
               Default value to return if <paramref name="Name" /> is empty or contains only white
               space.
             </param>
             <returns>
               <b>null</b> if <paramref name="Name" /> is <b>null</b>;<br />
               <paramref name="DefaultValue" /> if <paramref name="Name" /> is empty or contains
               only white space.<br />
               otherwise, the value corresponding to <paramref name="Name" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Name" /> is not a right XML name or value for the discrete value.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValue`1.TryParse(System.String,`0@)">
            <summary>
               Tries to parse a name or integer value to a discrete value.
             </summary>
             <param name="Name">
               The name or integer value of a discrete value. Can be <b>null</b>.
             </param>
             <param name="Value">
               Returns <b>null</b> if <paramref name="Name" /> is <b>null</b>;<br />
               returns <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> if <paramref name="Name" /> is an empty string and
               <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> is a valid value for the discrete value (i.e it is not
               <b>null</b>);<br />
               returns <b>null</b> if <paramref name="Name" /> is not a valid value for the discrete
               value;<br />
               otherwise, returns the value corresponding to <paramref name="Name" />.
             </param>
             <returns>
               <b>true</b> if <paramref name="Name" /> has been recognized as a valid name or value
               for the discrete value;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 This method doesn't take into account the automatically generated values. It only
                 uses the officialy defined values.
               </para>
               <para>
                 If <see cref="P:OrdinaSoft.DiscreteValue`1.Null" /> is defined, this method calls the
                 <see cref="M:OrdinaSoft.DiscreteValue`1.TryParseInternal(System.String,`0@)" /> method on this instance before
                 looking at its normal parsing. This lets descendant classes add additional parse
                 algorithms for special versions.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueCombination">
            <summary>
               Non-generic combination of discrete values.
             </summary>
             <remarks>
               This class defines the members that doesn't depend on the type of the discrete value,
               so it can be used as a base class for all combinations.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.set_Value(System.Int32)">
            <summary>
               Sets the value that is the OR-ing of all the values in the combination.
             </summary>
             <param name="Value">
               The new value that is the OR-ing of all the values in the combination.
             </param>
             <remarks>
               This is the setter for the <see cref="P:OrdinaSoft.DiscreteValueCombination.Value" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.DiscreteValueCombination._Value">
            <summary>
               Value that is the OR-ing of all the values in the combination.
             </summary>
             <remarks>
               This is the back end field for the <see cref="P:OrdinaSoft.DiscreteValueCombination.Value" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueCombination.AllValues">
            <summary>
               Gets a value that represent all the possible discrete values.
             </summary>
             <value>A value that represent all the possible discrete values.</value>
             <remarks>
               This value is an OR-ing of all the values.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueCombination.Value">
            <summary>
               Gets or sets the value that is the OR-ing of all the values in the combination.
             </summary>
             <value>The value that is the OR-ing of all the media types in the combination.</value>
             <remarks>
               Settings this property raises a <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged" /> event for all the
               properties.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.op_Equality(OrdinaSoft.DiscreteValueCombination,OrdinaSoft.DiscreteValueCombination)">
            <summary>
               Indicates whether two values combinations are equal.
             </summary>
             <param name="Combination1">
               The first combination to compare. Can be <b>null</b>.
             </param>
             <param name="Combination2">
               The second combination to compare. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Combination1" /> is equal to
               <paramref name="Combination2" />;<br />
               otherwise <b>false</b>.
             </returns>
             <remarks>
               If both combinations are <b>null</b>, they are considered as equal. If only one is
               <b>null</b>, they are considered as different.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.op_Inequality(OrdinaSoft.DiscreteValueCombination,OrdinaSoft.DiscreteValueCombination)">
            <summary>
               Indicates whether two values combinations are different.
             </summary>
             <param name="Combination1">
               The first combination to compare. Can be <b>null</b>.
             </param>
             <param name="Combination2">
               The second combination to compare. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Combination1" /> is different from
               <paramref name="Combination2" />;<br />
               otherwise <b>false</b>.
             </returns>
             <remarks>
               If both combinations are <b>null</b>, they are considered as equal. If only one is
               <b>null</b>, they are considered as different.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.AddAll">
            <summary>
               Adds all the values in the combination.
             </summary>
             <remarks>
               This method sets <see cref="P:OrdinaSoft.DiscreteValueCombination.Value" /> to <see cref="P:OrdinaSoft.DiscreteValueCombination.AllValues" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.GetHashCode">
            <summary>
               Gets the hash code.
             </summary>
             <returns>The hash code.</returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination.IsEmpty">
            <summary>
               Indicates whether the combination is empty.
             </summary>
             <returns>
               <b>true</b> if the combination is empty;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueCombination`2">
            <summary>
               Combination of <see cref="T:OrdinaSoft.DiscreteValue`1">discrete values</see>.
             </summary>
             <typeparam name="TValue">
               The type of the values in the combination. See the remarks for the constriants.
             </typeparam>
             <typeparam name="TCombination">
               The type of the combination. See the remarks for the constriants.
             </typeparam>
             <remarks>
               <para>
                 This class is used when the discrete values represents flags that can be combined
                 using an integer <i>OR</i> operator. As the <see cref="P:OrdinaSoft.DiscreteValueCombination.Value" /> of the combination
                 is a 32-bit integer, there can be up to 32 different values combined.
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue" />
             <seealso cref="T:OrdinaSoft.DiscreteValue`1" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombination" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombinationExtension" />
             <seealso cref="T:OrdinaSoft.DiscreteValueSet`2" />
        </member>
        <member name="F:OrdinaSoft.DiscreteValueCombination`2._Text">
            <summary>
               A string combination of the combination.
             </summary>
             <remarks>
               This is the back end field for the <see cref="P:OrdinaSoft.DiscreteValueCombination`2.Text" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.GetEnumeratorNG">
            <summary>
               Gets a non-generic enumerator for the values in the combination.
             </summary>
             <returns>The enumerator.</returns>
             <exception cref="T:System.InvalidOperationException">
               The collection was modified after the enumerator was created.
             </exception>
             <remarks>
               The order of the values is that of the <see cref="P:OrdinaSoft.DiscreteValueCombination`2.Values" /> field.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.get_Text">
            <summary>
               Gets a string representation of the combination.
             </summary>
             <returns>
               A string that contains all the texts of the discrete values in the combination,
               sorted by user text.
             </returns>
             <remarks>
               This is the getter for the <see cref="P:OrdinaSoft.DiscreteValueCombination`2.Text" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Initializes an instance of the combination.
             </summary>
             <param name="Values">
               The list of all the discrete values that can be in the combination.
             </param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.#ctor(OrdinaSoft.DiscreteValueCombination{`0,`1})">
            <summary>
               Initializes an instance of the combination, from an existing one.
             </summary>
             <param name="Combination">The source combination</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Combination" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
               Initializes an instance of the combination, specifying the initial value.
             </summary>
             <param name="Values">
               The list of all the discrete values that can be in the combination.
             </param>
             <param name="InitialValue">The initial value of the combination.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="InitialValue" /> is the OR-ing of all the values in the new
               combination.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.#ctor(System.Collections.Generic.IEnumerable{`0},OrdinaSoft.DiscreteValueCombination{`0,`1})">
            <summary>
               Initializes an instance of the combination, specifying the initial value as a
               combination.
             </summary>
             <param name="Values">
               The list of all the discrete values that can be in the combination.
             </param>
             <param name="InitialValue">
               The initial value of the combination. Can be <b>null</b>.
             </param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="InitialValue" /> is <b>null</b>, the combination will be empty.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.FromString(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
               Gets a combination from a string.
             </summary>
             <param name="Values">
               The list of all the discrete values that can be in the combination.
             </param>
             <param name="Text">A string that contains the combination. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Text" /> is <b>null</b>;<br />
               an empty combination if <paramref name="Text" /> is empty;<br />
               otherwise, a combination with the values in <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               The value of <paramref name="Text" /> is not a valid integer number.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.FromXAttribute(System.Collections.Generic.IEnumerable{`0},System.Xml.Linq.XAttribute)">
            <summary>
               Gets a combination from an XML attribute.
             </summary>
             <param name="Values">
               The list of all the discrete values that can be in the combination.
             </param>
             <param name="Attr">
               An XML attribute that contains the combination. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Attr" /> is <b>null</b>;<br />
               an empty combination if <paramref name="Attr" /> is empty;<br />
               otherwise, a combination with the values in the attribute.
             </returns>
             <exception cref="T:System.FormatException">
               The value of <paramref name="Attr" /> is not a valid integer number.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.SetFlag(System.Int32,System.Boolean,System.String)">
            <summary>
               Sets a value in the combination.
             </summary>
             <param name="Mask">The mask for the value.</param>
             <param name="IsSet">
               <b>true</b> if the flag must be set;<br />
               otherwise, <b>false</b>.
             </param>
             <param name="PropName">
               The name of the property to notify if the value changes. Can be <b>null</b>.
             </param>
             <remarks>
               <para>
                 This is a helper method to change a value in the combination and notify of the
                 change.
               </para>
               <para>
                 In addition to the property specified in <paramref name="PropName" />, the
                 <see cref="P:OrdinaSoft.DiscreteValueCombination`2.Text" /> and <see cref="P:OrdinaSoft.DiscreteValueCombination.Value" /> properties are also notified of the
                 change.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.SetFlagInternal(System.Int32,System.Boolean)">
            <summary>
               Sets a value in the combination, without notifying of the change.
             </summary>
             <param name="Mask">The mask for the value.</param>
             <param name="IsSet">
               <b>true</b> if the flag must be set;<br />
               otherwise, <b>false</b>.
             </param>
             <returns>
               <b>true</b> if the combination has changed;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This is a helper method to change a value in the combination.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueCombination`2.Text">
            <summary>
               Gets a string representation of the combination.
             </summary>
             <value>
               A string that contains all the texts of the discrete values in the combination,
               sorted by user text.
             </value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueCombination`2.Values">
            <summary>
               Gets the list of all the discrete values that can be in the combination.
             </summary>
             <value>
               The list of all the discrete values that can be in the combination.
             </value>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.Add(`0)">
            <summary>
               Adds a value to the combination.
             </summary>
             <param name="Value">The value to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is already on the combination, the combination is not
               changed.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.Contains(`0)">
            <summary>
               Indicates whether the combination contains a specific value.
             </summary>
             <param name="Value">The value to check.</param>
             <returns>
               <b>true</b> if the combination contains <paramref name="Value" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.Equals(OrdinaSoft.DiscreteValueCombination{`0,`1})">
            <summary>
               Indicates whether the combination is equal to another one.
             </summary>
             <param name="Other">
               Another combination to compare to the current one. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if the current instance is equal to <paramref name="Other" />;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.GetEnumerator">
            <summary>
               Gets The enumerator for the values in the combination.
             </summary>
             <returns>The enumerator.</returns>
             <exception cref="T:System.InvalidOperationException">
               The collection was modified after the enumerator was created.
             </exception>
             <remarks>
               The order of the values is that of the <see cref="P:OrdinaSoft.DiscreteValueCombination`2.Values" /> field.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.Remove(`0)">
            <summary>
               Removes a value from the combination.
             </summary>
             <param name="Value">The value to remove.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is not on the combination, the combination is not
               changed.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombination`2.ToString">
            <summary>
               Returns a string representation of the combination.
             </summary>
             <returns>
               A string that contains all the texts of the value types in the combination, sorted by
               user text.
             </returns>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueCombinationExtension">
            <summary>
               Extension methods for the
               <see cref="T:OrdinaSoft.DiscreteValueCombination`2">DiscreteValueCombination&lt;TValue,TCombination&gt;</see>
               class.
             </summary>
             <remarks>
               This class defines the methods that accept <b>null</b> as a valid value for the
               combination.
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue" />
             <seealso cref="T:OrdinaSoft.DiscreteValue`1" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombination`2" />
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombinationExtension.ToJson``2(OrdinaSoft.DiscreteValueCombination{``0,``1},System.String)">
            <summary>
               Returns a JSON value with the combination.
             </summary>
             <typeparam name="TValue">The type of the values in the combination.</typeparam>
             <param name="Combination">The combination. Can be <b>null</b>.</param>
             <param name="Name">The name of the JSON value. Can be <b>null</b>.</param>
             <returns>
               A <see cref="T:OrdinaSoft.Json.JsonNullValue">null JSON value</see> if <paramref name="Combination" />
               is <b>null</b>;<br />
               otherwise, a JSON value named <paramref name="Name" /> with the value of the
               combination.
             </returns>
             <remarks>
               This method doesn't check whether <paramref name="Name" />, if not <b>null</b>, is a
               valid name for a JSON value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueCombinationExtension.ToXAttribute``2(OrdinaSoft.DiscreteValueCombination{``0,``1},System.String)">
            <summary>
               Returns an XML attribute with the combination.
             </summary>
             <typeparam name="TValue">The type of the values in the combination.</typeparam>
             <param name="Combination">The combination. Can be <b>null</b>.</param>
             <param name="Name">The name of the XML attribute.</param>
             <returns>
               <b>null</b> if <paramref name="Combination" /> is <b>null</b>;<br />
               otherwise, an XML attribute named <paramref name="Name" /> with the value of the
               combination.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               <paramref name="Name" /> is not a valid name for an XML attribute.
             </exception>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueExtension">
            <summary>
               Extension methods for the <see cref="T:OrdinaSoft.DiscreteValue" /> type.
             </summary>
             <remarks>
               This class contains the methods for which <b>null</b> is a valid value for the discrete
               value.
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue" />
             <seealso cref="T:OrdinaSoft.DiscreteValue`1" />
        </member>
        <member name="M:OrdinaSoft.DiscreteValueExtension.ToJson(OrdinaSoft.DiscreteValue,System.String)">
            <summary>
               Gets a JSON value with a discrete value.
             </summary>
             <param name="Value">
               The discrete value for which to return the JSON value. Can be <b>null</b>.
             </param>
             <param name="Name">The name of the JSON value to return.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               a <b>null</b> JSON value named <paramref name="Name" />, if
               <paramref name="Value" /> is <see cref="P:OrdinaSoft.DiscreteValue`1.Null">Null</see>;<br />
               otherwise, a JSON value named <paramref name="Name" />, whose value is the
               <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see> of <paramref name="Value" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueExtension.ToXAttribute(OrdinaSoft.DiscreteValue,System.String)">
            <summary>
               Gets an XML attribute with a discrete value.
             </summary>
             <param name="Value">
               The discrete value for which to return the XML attribute. Can be <b>null</b>.
             </param>
             <param name="Name">The name of the XML attribute to return.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               an <b>empty</b> XML attribute named <paramref name="Name" />, if
               <paramref name="Value" /> is <see cref="P:OrdinaSoft.DiscreteValue`1.Null">Null</see>;<br />
               otherwise, an XML attribute named <paramref name="Name" />, whose value is the
               <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see> of <paramref name="Value" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               <paramref name="Name" /> is not a valid value for an XML attribute.
             </exception>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueSet">
            <summary>
               Non-generic set of discrete values.
             </summary>
             <remarks>
               This class defines the members that doesn't depend on the type of the discrete value,
               so it can be used as a base class for all sets.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet.ToValueList">
            <summary>
               Returns a list of the values of all items in the set.
             </summary>
             <returns>A list of the values of all items in the set.</returns>
        </member>
        <member name="T:OrdinaSoft.DiscreteValueSet`2">
            <summary>
               Set of <see cref="T:OrdinaSoft.DiscreteValue`1">discrete values</see>.
             </summary>
             <typeparam name="TValue">The type of the values in the set.</typeparam>
             <typeparam name="TSet">The type of the set.</typeparam>
             <remarks>
               This class is used to select more than one value from a
               <see cref="T:OrdinaSoft.DiscreteValue`1">discrete values</see>.
             </remarks>
             <seealso cref="T:OrdinaSoft.DiscreteValue" />
             <seealso cref="T:OrdinaSoft.DiscreteValue`1" />
             <seealso cref="T:OrdinaSoft.DiscreteValueCombination`2" />
             <seealso cref="T:OrdinaSoft.DiscreteValueSet" />
        </member>
        <member name="F:OrdinaSoft.DiscreteValueSet`2.Set">
            <summary>
               Internal set of all the values.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Initializes an empty set of <see cref="T:OrdinaSoft.DiscreteValue`1">discrete values</see>.
             </summary>
             <param name="Values">The full list of values that can be in the set.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Initializes a set of <see cref="T:OrdinaSoft.DiscreteValue`1">discrete values</see>, specifying
               the initial values.
             </summary>
             <param name="Values">The full list of values that can be in the set.</param>
             <param name="InitialList">The list of values to add in the set.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.
               -or-<br /><paramref name="InitialList" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.#ctor(OrdinaSoft.DiscreteValueSet{`0,`1})">
            <summary>
               Initializes a set from another instance.
             </summary>
             <param name="Set">The set to copy to the new instance.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Set" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.AddInternal(`0)">
            <summary>
               Adds a value to the set.
             </summary>
             <param name="Value">The value to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <remarks>
               This method does not notify of the change in the set.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.AddParsedValues(System.String)">
            <summary>
               Adds to the set the values parsed from a string.
             </summary>
             <param name="Text">
               A string that contains the values of the set. Can be <b>null</b>.
             </param>
             <exception cref="T:System.FormatException">
               One of the values in <paramref name="Text" /> is not a valid name or value for the
               discrete values.
             </exception>
             <remarks>
               The values in <paramref name="Text" /> can be specified by their
               <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see> or their
               <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see>, and must be separated with spaces.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.FromText(System.String)">
            <summary>
               Returns a set constructed from a text.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <returns>
               A set with all the values if <paramref name="Text" /> is <b>null</b>;<br />
               otherwise, a set with the values in <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               One of the values in <paramref name="Text" /> is not a valid name or value for the
               discrete values.
             </exception>
             <remarks>
               <para>
                 The values in <paramref name="Text" /> can be specified by their
                 <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see> or their
                 <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see>, and must be separated with spaces.
               </para>
               <para>
                 If <paramref name="Text" /> is <b>null</b>, this method returns a set with
                 <b>all</b> the values. This is different to the <see cref="M:OrdinaSoft.DiscreteValueSet`2.Parse(System.String)" />
                 method, that returns an empty set in this case.
               </para>
             </remarks>
             <seealso cref="M:OrdinaSoft.DiscreteValueSet`2.Parse(System.String)" />
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.FromXAttribute(System.Xml.Linq.XAttribute)">
            <summary>
               Returns a set constructed from the value of an XML attribute.
             </summary>
             <param name="Attr">The XML attribute. Can be <b>null</b>.</param>
             <returns>
               A set with all the values if <paramref name="Attr" /> is <b>null</b>;<br />
               otherwise, a set with the values in <paramref name="Attr" />.
             </returns>
             <exception cref="T:System.FormatException">
               One of the values in <paramref name="Attr" /> is not a valid name or value for the
               discrete values.
             </exception>
             <remarks>
               The values in <paramref name="Attr" /> can be specified by their
               <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see> or their
               <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see>, and must be separated with spaces.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.OnChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.DiscreteValueSet`2.Changed" /> event with default arguments.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.OnChanged(System.EventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.DiscreteValueSet`2.Changed" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueSet`2.AllValues">
            <summary>
               Gets the full list of values that can be in the set.
             </summary>
             <value>The full list of values that can be in the set.</value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueSet`2.ContainsAllValues">
            <summary>
               Gets a value that indicates whether the set contains contains possible values.
             </summary>
             <value>
               <b>true</b> if the set contains all possible values;<br />
               otherwise, <b>false</b>.
             </value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueSet`2.Count">
            <summary>
               Gets the number of values in the set.
             </summary>
             <value>The number of values in the set.</value>
        </member>
        <member name="P:OrdinaSoft.DiscreteValueSet`2.IsEmpty">
            <summary>
               Gets a value that indicates whether the set is empty.
             </summary>
             <value>
               <b>true</b> if the set is empty;<br />
               otherwise, <b>false</b>.
             </value>
             <remarks>
               The set is empty if its <see cref="P:OrdinaSoft.DiscreteValueSet`2.Count" /> of values is <b>0</b>.
             </remarks>
        </member>
        <member name="E:OrdinaSoft.DiscreteValueSet`2.Changed">
            <summary>
               Occurs when the set has changed.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(`0)">
            <summary>
               Adds a value to the set.
             </summary>
             <param name="Value">The value to add.</param>
             <returns>
               <b>true</b> if <paramref name="Value" /> was not in the set and is added;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(`0,`0)">
            <summary>
              Adds two values to the set.
             </summary>
             <param name="Value1">The first value to add.</param>
             <param name="Value2">The second value to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value1" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value2" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(`0,`0,`0)">
            <summary>
              Adds three values to the set.
             </summary>
             <param name="Value1">The first value to add.</param>
             <param name="Value2">The second value to add.</param>
             <param name="Value3">The third value to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value1" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value2" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value3" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(`0,`0,`0,`0)">
            <summary>
              Adds four values to the set.
             </summary>
             <param name="Value1">The first value to add.</param>
             <param name="Value2">The second value to add.</param>
             <param name="Value3">The third value to add.</param>
             <param name="Value4">The fourth value to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value1" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value2" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value3" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value4" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(`0[])">
            <summary>
               Adds values to the set.
             </summary>
             <param name="Values">Values to add to the set.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.<br />
               -or-<br />
               One of the values in <paramref name="Values" /> is <b>null</b>.
             </exception>
             <remarks>
               If a value in <paramref name="Values" /> is already in the set, it will not be
               inserted into it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Adds values to the set.
             </summary>
             <param name="Values">The values to add. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Values" /> is <b>null</b>.<br />
               -or-<br />
               One of the values in <paramref name="Values" /> is <b>null</b>.
             </exception>
             <remarks>
               If a value in <paramref name="Values" /> is already in the set, it will not be
               inserted into it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.AddAll">
            <summary>
               Adds all the values in the set.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Clear">
            <summary>
               Clears all the values in the set.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Contains(`0)">
            <summary>
               Indicates whether the set contains a specified value.
             </summary>
             <param name="Value">The value to look at. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Value" /> is in the set;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Parse(System.String)">
            <summary>
               Parses a string that contains a set of values.
             </summary>
             <param name="Text">
               A string that contains a set of values, separated by spaces. Can be <b>null</b>.
             </param>
             <returns>A set that contains the values in <paramref name="Text" />.</returns>
             <exception cref="T:System.FormatException">
               One of the values in <paramref name="Text" /> is not a valid name or value for the
               discrete values.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Text" /> is <b>null</b>, the resulting set is empty.
               </para>
               <para>
                 The values in <paramref name="Text" /> can be specified by their
                 <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see> or their
                 <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see>, and must be separated with spaces.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Remove(`0)">
            <summary>
               Removes a value from the set.
             </summary>
             <param name="Value">The value to remove</param>
             <returns>
               <b>true</b> if <paramref name="Value" /> is in the set and was removed;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This method returns <b>false</b> if <paramref name="Value" /> is not found in the
               set.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.Select(`0,`0)">
            <summary>
               Selects two values in the set.
             </summary>
             <param name="Value1">The first value.</param>
             <param name="Value2">The second value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value1" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Value2" /> is <b>null</b>.
             </exception>
             <remarks>
               Calling this method is the same as calling <see cref="M:OrdinaSoft.DiscreteValueSet`2.Clear" /> and then
               <see cref="M:OrdinaSoft.DiscreteValueSet`2.Add(`0)" /> for each value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.SelectSingle(`0)">
            <summary>
               Selects a single value in the set.
             </summary>
             <param name="Value">The value to select in the set.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <remarks>
               Calling this method is the same as calling <see cref="M:OrdinaSoft.DiscreteValueSet`2.Clear" /> and then
               <see cref="M:OrdinaSoft.DiscreteValueSet`2.Add(`0)" /> with <paramref name="Value" /> as a its parameter.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.ToString">
            <summary>
               Returns a string representation of the values in the set.
             </summary>
             <returns>
               A string that contains all the user text for the values in the set, separated with
               spaces and sorted in the order of the <see cref="P:OrdinaSoft.DiscreteValueSet`2.AllValues">full list</see>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.ToValueList">
            <summary>
               Returns a list of the values of all items in the set.
             </summary>
             <returns>A list of the values of all items in the set.</returns>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.ToXAttribute(System.String)">
            <summary>
               Returns an XML attribute with the values in the set.
             </summary>
             <param name="Name">The name of the XML attribute to return.</param>
             <returns>
               <b>null</b> if the set contains all the possible values;<br />
               an <b>empty XML element</b> named <paramref name="Name" /> if the set is empty;<br />
               otherwise, an XML element named <paramref name="Name" /> with the
               <see cref="P:OrdinaSoft.DiscreteValue.Value">values</see> of all the values in the set, separated
               with spaces.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               <paramref name="Name" /> is not a valid name for an XML attribute.
             </exception>
        </member>
        <member name="M:OrdinaSoft.DiscreteValueSet`2.TryParse(System.String,`1@)">
            <summary>
               Tries to parse a string that contains a set of values.
             </summary>
             <param name="Text">
               A string that contains a set of values, separated by spaces. Can be <b>null</b>.
             </param>
             <param name="Set">
               If <paramref name="Text" /> contains a valid value, a set that contains the values in
               it;<br />
               otherwise, <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> contains a valid value;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 If <paramref name="Text" />, the resulting set is empty and the result of the
                 method is <b>true</b>.
               </para>
               <para>
                 The values in <paramref name="Text" /> can be specified by their
                 <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see> or their
                 <see cref="P:OrdinaSoft.DiscreteValue.Value">value</see>, and must be separated with spaces.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.EventArgs`1">
            <summary>
               Event arguments with a single item on it.
             </summary>
             <typeparam name="TItem">The type of the item in the arguments.</typeparam>
             <seealso cref="T:OrdinaSoft.osEventManager" />
        </member>
        <member name="M:OrdinaSoft.EventArgs`1.#ctor(`0)">
            <summary>
               Initializes an instance of the arguments.
             </summary>
             <param name="Item">The item. Cam be <b>null</b>.</param>
        </member>
        <member name="P:OrdinaSoft.EventArgs`1.Item">
            <summary>
               Gets the item.
             </summary>
             <value>The item.</value>
        </member>
        <member name="T:OrdinaSoft.IEventRaiser">
            <summary>
               Interface for a class that can raise events.
             </summary>
             <remarks>
               Implementing this interface in a class permits to raise the events in a specific
               thread. This can be useful in GUI application, where some events must be raised in the
               UI thread of a control in order to have it update correctly. See the remarks of the
               <see cref="T:OrdinaSoft.osEventManager" /> class for more information.
             </remarks>
             <seealso cref="T:OrdinaSoft.osEventManager" />
        </member>
        <member name="M:OrdinaSoft.IEventRaiser.Raise(OrdinaSoft.osEventManager,System.Object,System.EventArgs)">
            <summary>
               Raises an event.
             </summary>
             <param name="Manager">The manager for the event.</param>
             <param name="Sender">The sender of the event.</param>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="T:OrdinaSoft.osEventManager">
            <summary>
               Manager for events.
             </summary>
             <remarks>
               <para>
                 This manager permits to diminish the code to implement an event manager.
               </para>
               <para>
                 This manager is <i>thread-safe</i>, even after JIT compiler optimizations: if a
                 thread is adding or removing a handler during a call to
                 <see cref="M:OrdinaSoft.osEventManager.Raise(System.Object,System.EventArgs)" />, there is no risk to have a
                 <see cref="T:System.NullReferenceException">NullReferenceException</see>.
               </para>
               <para>
                 You can use the <b>OsEvent</b> aspect to automatically use this manager for an event.
               </para>
               <h3>GUI applications</h3>
               <para>
                 In GUI applications, events must be, in some cases, raised on the UI thread for them
                 to be recognized correctly by the controls. For the application assembly, it is easy
                 to have access to a dispatcher to raise the exceptions to the UI thread; but for a
                 model assembly that is compatible with .NET Standard and must run under Linux or
                 MacOS, the dispatcher is not available. In order to implement this correctly, you can
                 use the <see cref="T:OrdinaSoft.IEventRaiser" /> interface and the
                 <see cref="M:OrdinaSoft.osEventManager.Raise(OrdinaSoft.IEventRaiser,System.Object,System.EventArgs)" /> method.
               </para>
               <para>
                 In your application, you must define a class that implements the
                 <see cref="T:OrdinaSoft.IEventRaiser" /> interface; this can be the application class, the main
                 window class or another UI class. If your application can have more than one UI
                 thread, for example if there is more than one main window, it is recommended to
                 implement this interface for each UI thread you have.
               </para>
               <para>
                 When starting a background thread or task that must raise notifications in the UI
                 thread, you need to pass an instance of the <i>IEventRaiser</i> interface to the
                 thread or task. When the work is done and the changes must be notified, you must use
                 this instance to notify of the changes. If the interface is implemented correctly,
                 the notification is raised in the right thread.
               </para>
               <para>
                 <b>WPF example</b><br />
                 The <i>IEventRaiser.Raise</i> can be simply implemented with the following
                 code:<br />
                 <div class="code">
                   void Raise(osEventManager manager, Object sender, EventArgs args) {<br />
                     Dispatcher.BeginInvoke ( () => manager.Raise(sender, args) );<br />
                   }
                 </div>
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.EventArgs`1" />
             <seealso cref="T:OrdinaSoft.IEventRaiser" />
        </member>
        <member name="F:OrdinaSoft.osEventManager.HandlerList">
            <summary>
               Internal list of handlers to call.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osEventManager._Count">
            <summary>
               The number of handlers.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osEventManager.#ctor">
            <summary>
               Initializes an instance of the event manager.
             </summary>
        </member>
        <member name="P:OrdinaSoft.osEventManager.Count">
            <summary>
               Gets the number of handlers for this event.
             </summary>
             <value>The number of handlers for this event.</value>
        </member>
        <member name="P:OrdinaSoft.osEventManager.IsEmpty">
            <summary>
               Gets a value indicating whether the delegate list for the event is empty.
             </summary>
             <value>
               <b>true</b> if the delegate list for the event is empty;<br />
               otherwise <b>false</b>.
             </value>
        </member>
        <member name="M:OrdinaSoft.osEventManager.AddHandler(System.Delegate)">
            <summary>
               Adds a handler to call when the event is raised.
             </summary>
             <param name="Handler">The handler.</param>
             <remarks>
               The new handler will be called after those that are already registered.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osEventManager.Raise(System.Object,System.EventArgs)">
            <summary>
               Raises the event.
             </summary>
             <param name="Sender">The sender of the event. Can be <b>null</b>.</param>
             <param name="Args">Arguments for the event. Can be <b>null</b>.</param>
             <remarks>
               This method is thread-safe, so there is no problem when a thread is calling it when
               another one is adding or removing a handler.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osEventManager.Raise(OrdinaSoft.IEventRaiser,System.Object,System.EventArgs)">
            <summary>
               Raises the event, using a specific raiser.
             </summary>
             <param name="Raiser">The event raiser. Can be <b>null</b>.</param>
             <param name="Sender">The sender of the event. Can be <b>null</b>.</param>
             <param name="Args">Arguments for the event. Can be <b>null</b>.</param>
             <remarks>
               <para>
                 If <paramref name="Raiser" /> is <b>null</b>, the event is simply raised.
               </para>
               <para>
                 This method permits to raise the events in a specific thread. This can be useful in
                 GUI application, where come events must be raised in the UI thread of a control in
                 order to have it update correctly. See the remarks of the
                 <see cref="T:OrdinaSoft.osEventManager" /> class for more information.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osEventManager.RemoveHandler(System.Delegate)">
            <summary>
               Removes a handler to call when the event is raised.
             </summary>
             <param name="Handler">A handler to remove.</param>
        </member>
        <member name="T:OrdinaSoft.HResultValues">
            <summary>
               Common values for <i>HResult</i>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.HResultValues.SharingViolation">
            <summary>
               The process cannot access the file because it is being used by another process.
             </summary>
             <remarks>
               The value is <b>0x80070020</b>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.IO.FileSizeFormat">
            <summary>
               Format for the size of a file.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.Auto1000">
            <summary>
               The size will be displayed in automatic mode: the selected format will depend on the
               size, using powers of 1000.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.Auto1024">
            <summary>
               The size will be displayed in automatic mode: the selected format will depend on the
               size, using powers of 1024.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.B">
            <summary>
               The size will be formatted in <b>bytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.kB">
            <summary>
               The size will be formatted in <b>kilobytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.kiB">
            <summary>
               The size will be formatted in <b>kibibytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.MB">
            <summary>
               The size will be formatted in <b>megabytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.MiB">
            <summary>
               The size will be formatted in <b>mebibytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.GB">
            <summary>
               The size will be formatted in <b>gigabytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.GiB">
            <summary>
               The size will be formatted in <b>gibibytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.TB">
            <summary>
               The size will be formatted in <b>terabytes</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.FileSizeFormat.TiB">
            <summary>
               The size will be formatted in <b>tebibytes</b>.
             </summary>
        </member>
        <member name="T:OrdinaSoft.IO.osFileExtension">
            <summary>
               Standard extensions for the file names.
             </summary>
             <remarks>
               The extensions defined here are all lowercase.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.AllChars">
            <summary>
               Indicates that any char(s) are accepted.
             </summary>
             <remarks>
               The value is <b>*</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.AnyChar">
            <summary>
               Indicates that any single char is accepted.
             </summary>
             <remarks>
               The value is <b>?</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.AnyExtension">
            <summary>
               Indicates that any extension is accepted.
             </summary>
             <remarks>
               The value is <b>*</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Bmp">
            <summary>
               Extension for a <b>bitmap file</b>.
             </summary>
             <remarks>
               <para>The extension is <b>bmp</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Bitmap" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Bitmap">
            <summary>
               Extension for a <b>bitmap file</b>.
             </summary>
             <remarks>
               <para>The extension is <b>bmp</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Bmp" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Emf">
            <summary>
               File extension for an <b>Enhanced Windows Metafile</b> file.
             </summary>
             <remarks>
               The extension is <b>emf</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Exe">
            <summary>
               Short file extension for an <b>executable file</b> file.
             </summary>
             <remarks>
               The extension is <b>exe</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Exif">
            <summary>
               File extension for an <b>Exchangeable Image</b> file.
             </summary>
             <remarks>
               The extension is <b>exif</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Gif">
            <summary>
               File extension for a <b>Graphics Interchange Format</b> file.
             </summary>
             <remarks>
               The extension is <b>gif</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Icon">
            <summary>
               File extension for a <b>Windows Icon</b> file.
             </summary>
             <remarks>
               The extension is <b>ico</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Jpeg">
            <summary>
               File extension for a <b>JPEG</b> file.
             </summary>
             <remarks>
               The extension is <b>jpeg</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Jpg">
            <summary>
               Short file extension for a <b>JPEG</b> file.
             </summary>
             <remarks>
               The extension is <b>jpg</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Msi">
            <summary>
               Short file extension for a <b>msi</b> file.
             </summary>
             <remarks>
               The extension is <b>msi</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Png">
            <summary>
               File extension for a <b>W3C Portable Network Graphics</b> file.
             </summary>
             <remarks>
               The extension is <b>png</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Tif">
            <summary>
               Short file extension for a <b>TIFF</b> file.
             </summary>
             <remarks>
               The extension is <b>tif</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Tiff">
            <summary>
               File extension for a <b>TIFF</b> file.
             </summary>
             <remarks>
               The extension is <b>tiff</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Wmf">
            <summary>
               File extension for a <b>Windows Metafile</b> file.
             </summary>
             <remarks>
               The extension is <b>wmf</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Csv">
            <summary>
               File extension for a <b>CSV</b>  (comma-separated value) file.
             </summary>
             <remarks>
               The extension is <b>csv</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Log">
            <summary>
               Extension for a <b>log</b> file.
             </summary>
             <remarks>
               The extension is <b>log</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Text">
            <summary>
               Extension for a <b>text</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>txt</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Txt" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Txt">
            <summary>
               Extension for a <b>text</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>txt</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Text" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Aspx">
            <summary>
               Extension for a <b>ASP.NET page</b> file.
             </summary>
             <remarks>
               The extension is <b>aspx</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Css">
            <summary>
               Extension for a <b>Cascading Style Sheets</b> file.
             </summary>
             <remarks>
               The extension is <b>css</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.JavaScript">
            <summary>
               Extension for a <b>Javascript</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>js</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.JS" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.JS">
            <summary>
               Extension for a <b>Javascript</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>js</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Txt" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Xml">
            <summary>
               Extension for a <b>eXtended Markup Language</b> file.
             </summary>
             <remarks>
               The extension is <b>xml</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.XmlSchema">
            <summary>
               Extension for a <b>XML Schema Definition</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>xsd</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.Xsd" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Xsd">
            <summary>
               Extension for a <b>XML Schema Definition</b> file.
             </summary>
             <remarks>
               <para>The extension is <b>xsd</b>.</para>
               <para>This is a synonym for the <see cref="F:OrdinaSoft.IO.osFileExtension.XmlSchema" /> extension.</para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Excel">
            <summary>
               File extension for a <b>Microsoft Excel</b> file, compatible with Excel 97 or later.
             </summary>
             <remarks>
               The file extension is <b>xls</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Excel2007">
            <summary>
               File extension for a <b>Microsoft Excel</b> file, compatible with Excel 2007 or
               later.
             </summary>
             <remarks>
               The file extension is <b>xlsx</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.MP3">
            <summary>
               File extension for an <b>MP3</b> music file.
             </summary>
             <remarks>
               The file extension is <b>mp3</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Pdf">
            <summary>
               File extension for an Adobe <b>Portable Document Format</b> file.
             </summary>
             <remarks>
               The file extension is <b>pdf</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Temp">
            <summary>
               File extension for a <b>temporary</b> file.
             </summary>
             <remarks>
               The file extension is <b>temp</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Tmp">
            <summary>
               Short file extension for a <b>temporary</b> file.
             </summary>
             <remarks>
               The file extension is <b>tmp</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Word">
            <summary>
               File extension for a <b>Microsoft Word</b> file, compatible with Word 97 or later.
             </summary>
             <remarks>
               The file extension is <b>doc</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Word2007">
            <summary>
               File extension for a <b>Microsoft Word</b> file, compatible with Word 2007 or later.
             </summary>
             <remarks>
               The file extension is <b>docx</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Xps">
            <summary>
               File extension for an <b>XPS printing</b> file.
             </summary>
             <remarks>
               The file extension is <b>xps</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileExtension.Zip">
            <summary>
               File extension for a <b>ZIP</b>compressed file.
             </summary>
             <remarks>
               The file extension is <b>zip</b>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.IO.osFileInfo">
            <summary>
               Tools for file information.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.osFileInfo.DefaultSizeFormat">
            <summary>
               Default format to use for the size of a file.
             </summary>
             <remarks>
               <para>
                 The default value is <see cref="T:OrdinaSoft.IO.FileSizeFormat">Auto1000</see>.
               </para>
               <para>
                 To use a different default format for the whole application, set this field with
                 the desired format.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.osFileInfo.DefaultUseAbbrevForSize">
            <summary>
               Indicates whether to use the abbreviation for the units for the size of a file.
             </summary>
             <remarks>
               <para>
                 The default value is <b>false</b>.
               </para>
               <para>
                 To use a different default value for the whole application, set this field with the
                 desired value.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.IO.osFileInfo.FormatSize(System.Int64)">
            <summary>
               Formats the size of a file, using the <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultSizeFormat" /> and
               <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultUseAbbrevForSize" /> formats.
             </summary>
             <param name="Size">The size of the file.</param>
             <returns>
               A string representation of the size of the file, formatted following the
               <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultSizeFormat" /> and <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultUseAbbrevForSize" /> formats.
             </returns>
        </member>
        <member name="M:OrdinaSoft.IO.osFileInfo.FormatSize(System.Int64,System.Boolean)">
            <summary>
               Formats the size of a file, using the <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultSizeFormat" /> format.
             </summary>
             <param name="Size">The size of the file.</param>
             <param name="UseAbbrev">
               <b>true</b> to use abbreviations for the units;<br />
               <b>false</b> to use the full name.
             </param>
             <returns>
               A string representation of the size of the file, formatted following the
               <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultSizeFormat" /> and <paramref name="UseAbbrev" /> formats.
             </returns>
        </member>
        <member name="M:OrdinaSoft.IO.osFileInfo.FormatSize(System.Int64,OrdinaSoft.IO.FileSizeFormat)">
            <summary>
               Formats the size of a file, using the <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultUseAbbrevForSize" /> format.
             </summary>
             <param name="Size">The size of the file.</param>
             <param name="Format">Format to use for the size.</param>
             <returns>
               A string representation of the size of the file, formatted following the
               <paramref name="Format" /> and <see cref="F:OrdinaSoft.IO.osFileInfo.DefaultUseAbbrevForSize" /> formats.
             </returns>
        </member>
        <member name="M:OrdinaSoft.IO.osFileInfo.FormatSize(System.Int64,OrdinaSoft.IO.FileSizeFormat,System.Boolean)">
            <summary>
               Formats the size of a file, using a specified format.
             </summary>
             <param name="Size">The size of the file.</param>
             <param name="Format">Format to use for the size.</param>
             <param name="UseAbbrev">
               <b>true</b> to use abbreviations for the units;<br />
               <b>false</b> to use the full name.
             </param>
             <returns>
               A string representation of the size of the file, formatted following the
               <paramref name="Format" /> and <paramref name="UseAbbrev" /> formats.
             </returns>
        </member>
        <member name="T:OrdinaSoft.IO.osPath">
            <summary>
               Tools to manipulate file paths.
             </summary>
        </member>
        <member name="M:OrdinaSoft.IO.osPath.#cctor">
            <summary>
               Initializes the static data of the class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.osPath.InvalidFileNameChars">
            <summary>
               Dictionary of chars that are invalid in a file name.
             </summary>
        </member>
        <member name="M:OrdinaSoft.IO.osPath.GetExtensionWithoutPeriod(System.String)">
            <summary>
               Gets the extension of a path, without the period.
             </summary>
             <param name="Path">The path. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Path" /> is <b>null</b>;<br />
               an <b>empty string</b>, if the <paramref name="Path" /> doesn't have an
               extension;<br />
               otherwise, the extension.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Path" /> contains one or more of the invalid characters defined in
               <see cref="M:System.IO.Path.GetInvalidPathChars" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.IO.osPath.MakeFileNameValid(System.String,System.Char)">
            <summary>
               Replaces invalid chars in a path.
             </summary>
             <param name="Path">The path.</param>
             <param name="ReplaceChar">
               The char that will replace the invalid chars in <paramref name="Path" />.<br />
               Default value is <b>-</b>.
             </param>
             <returns>
               <paramref name="Path" /> with its invalid chars replaced by
               <paramref name="ReplaceChar" />.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="ReplaceChar" /> is not a valid char for a path.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.IO.osPath.SetDefaultExtension(System.String,System.String)">
            <summary>
               Sets the default extension of a path.
             </summary>
             <param name="Path">The path.</param>
             <param name="Extension">The extension.</param>
             <returns>
               <paramref name="Path" /> if it already contains an extension;<br />
               otherwise, <i>Path</i> with <paramref name="Extension" /> added at the end.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Extension" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Path" /> contains a dot, even at its end, it will not change.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.IO.osPath.SetExtension(System.String,System.String)">
            <summary>
               Sets the extension of a path.
             </summary>
             <param name="Path">The path.</param>
             <param name="Extension">The extension.</param>
             <returns>
               <paramref name="Path" /> with <paramref name="Extension" /> added at the end.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Extension" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.IO.SaveNewFileVersion">
            <summary>
               Tool that can be used when we need to save a new version of a file without the risk of
               losing the original file in case of error.
             </summary>
             <remarks>
               <para>
                 This tool works by saving the new file to a temporary file named
                 <see cref="F:OrdinaSoft.IO.SaveNewFileVersion.FileName" />. If the saving of the new file is successful, you must call
                 <see cref="M:OrdinaSoft.IO.SaveNewFileVersion.AcceptNewFile" /> so the old file will be deleted and the new file will be
                 renamed with the right file name. If the saving is not successful, you must call
                 <see cref="M:OrdinaSoft.IO.SaveNewFileVersion.KeepOldFile" /> to delete the new file.
               </para>
               <para>
                 The temporary file name is based on an GUID, so it "should" be unique.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.SaveNewFileVersion.OldFileName">
            <summary>
               Name of the old file.
             </summary>
        </member>
        <member name="M:OrdinaSoft.IO.SaveNewFileVersion.#ctor(System.String)">
            <summary>
               Initializes the tool to save a new version of a file.
             </summary>
             <param name="FileName">Name of the file.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor does not check if <paramref name="FileName" /> represents a valid
                 file name and if the user has access to the file.
               </para>
               <para>
                 After calling this constructor, you must save the new version to a file named
                 <see cref="F:OrdinaSoft.IO.SaveNewFileVersion.FileName" />, which is a temporary name.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.SaveNewFileVersion.FileName">
            <summary>
               Name to use for the new version of the file.
             </summary>
        </member>
        <member name="M:OrdinaSoft.IO.SaveNewFileVersion.AcceptNewFile">
            <summary>
               Indicates that the new version of the file is written successfully and that it can
               replace the old one.
             </summary>
             <exception cref="T:System.IO.IOException">
               The original or temporary file no more exists.<br />
               -or-<br />
               A file with a temporary file name already exists.
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               One of the file names is too long for the platform.
             </exception>
             <exception cref="T:System.UnauthorizedAccessException">
               The caller doesn't have the permission to rename or delete a file.
             </exception>
             <remarks>
               This method first renames the original file to a new, temporary generated, file name.
               The new file is then renamed to the original file name. Finally, the original file is
               deleted.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.IO.SaveNewFileVersion.KeepOldFile">
            <summary>
               Indicates that we must keep the old file and delete the new one.
             </summary>
             <exception cref="T:System.IO.IOException">
               The temporary file no more exists.
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               The temporary file name is too long for the platform.
             </exception>
             <exception cref="T:System.UnauthorizedAccessException">
               The caller doesn't have the permission to delete the temporary file.
             </exception>
             <remarks>
               This method just deletes the new, temporary, file.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.IO.BlockMemoryStream">
            <summary>
               A memory stream that keeps data in blocks.
             </summary>
             <remarks>
               The stream data is not saved as a huge array but as a list of blocks, the size of each
               block being less than 64K. This avoids allocating huge memory blocks that are not
               easily garbage collected.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.BlockMemoryStream.NodeSize">
            <summary>
               The size of a node.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.BlockMemoryStream._Nodes">
            <summary>
               The internal nodes.
             </summary>
        </member>
        <member name="F:OrdinaSoft.IO.BlockMemoryStream._Length">
            <summary>
               The length in bytes.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.IO.BlockMemoryStream.Length" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.IO.BlockMemoryStream._Position">
            <summary>
               The current position in the stream.
             </summary>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.CheckCallerBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Checks whether the buffer specified by the caller is correct.
             </summary>
             <param name="Buffer">The buffer.</param>
             <param name="Offset">The offset in the buffer.</param>
             <param name="Count">The number of bytes.</param>
             <exception cref="T:System.ArgumentException">
               The sum of <paramref name="Offset" /> and <paramref name="Count" /> is larger than
               the buffer length.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Buffer" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="Offset" /> or <paramref name="Count" /> is negative.
             </exception>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.GetNodeAndPosition">
            <summary>
               Gets the node and the position in the node, from the stream position.
             </summary>
             <returns>
               A tuple with the current node and the position in the node.<br />
               The node can be <b>null</b> if the current position is greater than the length of the
               stream.
             </returns>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.#ctor">
            <summary>
               Intializes an empty block memory stream.
             </summary>
        </member>
        <member name="P:OrdinaSoft.IO.BlockMemoryStream.CanRead">
            <summary>
               Gets a value that indicates whether the stream can be read.
             </summary>
             <value>
               <b>true</b> if the stream can be read;<br />
               otherwise, <b>false</b>.
             </value>
             <remarks>
               For this stream, the value is always <b>true</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.IO.BlockMemoryStream.CanSeek">
            <summary>
               Gets a value that indicates whether the stream can be seeked.
             </summary>
             <value>
               <b>true</b> if the stream can be seeked;<br />
               otherwise, <b>false</b>.
             </value>
             <remarks>
               For this stream, the value is always <b>true</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.IO.BlockMemoryStream.CanWrite">
            <summary>
               Gets a value that indicates whether the stream can be written.
             </summary>
             <value>
               <b>true</b> if the stream can be written;<br />
               otherwise, <b>false</b>.
             </value>
             <remarks>
               For this stream, the value is always <b>true</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.IO.BlockMemoryStream.Length">
            <summary>
               Gets the length of the stream, in bytes.
             </summary>
             <value>The length of the stream.</value>
        </member>
        <member name="P:OrdinaSoft.IO.BlockMemoryStream.Position">
            <summary>
               Gets or sets the position within the stream.
             </summary>
             <value>The position.</value>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.Flush">
            <summary>
               Flushes the stream.
             </summary>
             <remarks>
               As the stream is in memory, this method does nothing.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.FromFileAsync(System.String)">
            <summary>
               Gets a block memory stream with the content of a file.
             </summary>
             <param name="Path">The path of the file.</param>
             <returns>The block memory stream.</returns>
             <remarks>
               The memory allocated is just enough to load the file. If the stream is written past
               its end, new memory blocks are allocated.
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="Path" /> is a zero-length string, contains only white space, or
               contains one or more invalid characters.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">
               The specified path is invalid, (for example, it is on an unmapped drive).
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
               The file specified in <paramref name="Path" /> was not found.
             </exception>
             <exception cref="T:System.IO.IOException">
               An I/O error occurred while opening the file.
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               The specified path, file name, or both exceed the system-defined maximum length.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="Path" /> is in an invalid format.
             </exception>
             <exception cref="T:System.UnauthorizedAccessException">
               This operation is not supported on the current platform.<br />
               -or-<br />
               <paramref name="Path" /> specified a directory.<br />
               -or-<br />
               The caller does not have the required permission.
             </exception>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Reads data from the stream.
             </summary>
             <param name="Buffer">
               An array of bytes. When this method returns, the buffer contains the specified byte
               array with the values between <paramref name="Offset" /> and
               (<paramref name="Offset" /> + <paramref name="Count" /> - 1) replaced by the bytes
               read from the current source.
             </param>
             <param name="Offset">
               The zero-based byte offset in the buffer at which to begin storing the data read from
               the current stream.
             </param>
             <param name="Count">
               The maximum number of bytes to be read from the current stream.
             </param>
             <returns>
               The total number of bytes read into the buffer. This can be less than the number o
                bytes requested if that many bytes are not currently available, or zero (0) if the
                end of the stream has been reached.
             </returns>
             <exception cref="T:System.ArgumentException">
               The sum of <paramref name="Offset" /> and <paramref name="Count" /> is larger than
               the buffer length.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Buffer" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="Offset" /> or <paramref name="Count" /> is negative.
             </exception>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
               Sets the position within the current stream.
             </summary>
             <param name="Offset">
               A byte offset relative to the <paramref name="Origin" /> parameter.
             </param>
             <param name="Origin">
               Indicates the reference point used to obtain the new position.
             </param>
             <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.SetLength(System.Int64)">
            <summary>
               Sets the length.
             </summary>
             <param name="Length">The new length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="Length" /> is less than 0.
             </exception>
             <remarks>
               If <paramref name="Length" /> is less than the current length, the stream is
               truncated and the data after the new length is lost. If <i>Length</i> is greater
               than the current length, the method does nothing, as the stream is dynamic.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.IO.BlockMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Writes data to the stream.
             </summary>
             <param name="Buffer">
               An array of bytes. This method copies <paramref name="Count" /> bytes from the buffer
               to the current stream.
             </param>
             <param name="Offset">
               The zero-based byte offset in buffer at which to begin copying bytes to the current
               stream.
             </param>
             <param name="Count">
               The number of bytes to be written to the current stream.
             </param>
             <exception cref="T:System.ArgumentException">
               The sum of <paramref name="Offset" /> and <paramref name="Count" /> is larger than
               the buffer length.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Buffer" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="Offset" /> or <paramref name="Count" /> is negative.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Language">
            <summary>
               Language available for the user interface.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Language.#ctor(System.String)">
            <summary>
               Initializes a language.
             </summary>
             <param name="Code">The code.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Code" /> is <b>null</b>.
             </exception>
        </member>
        <member name="F:OrdinaSoft.Language.Code">
            <summary>
               The ISO code.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Language.Name">
            <summary>
               The name of the language.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Language.ToString">
            <summary>
               Returns a string representation of the language.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.TextResourcesDict">
            <summary>
               Dictionary of text resources.
             </summary>
             <remarks>
               <h3>Usage</h3>
               <para>
                 To use this class, you must:
                 <list type="number">
                   <item>Create an instance of the class.</item>
                   <item>
                     For each language supported by the application, add the language code to the
                     <see cref="F:OrdinaSoft.TextResourcesDict.LanguagesCodes" /> property. The <i>Windows language</i> can be added
                     with a empty string or <b>null</b> as the code.
                   </item>
                   <item>
                     For each resource defined in an assembly, you must call the
                     <see cref="M:OrdinaSoft.TextResourcesDict.AddSource(System.Reflection.Assembly,System.String)" /> method, specifying the assembly and the
                     path of the resource. The resource name can be absolute, starting with a slash
                     (<b>"/"</b>) or relative. For an absolute path, the beginning slash is removed
                     and the remaining part is used as the resource name. For a relative path, the
                     resource name is calculated with the name of the assembly, floowed by a dot and
                     the user-specified resource name. In both absolute and relative paths, the
                     slashes are replaced by dots, as .NET saves the resources names.<br />
                     The path of the resource must not contain the language or the <i>xml</i>
                     extension, as they are added automatically by the class. Note that the names of
                     the resources are case-sensitive; you can use the
                     <c>&lt;LogicalName>AssemblyName.TextResources.en.xml&lt;/LogicalName></c> child
                     in the project file, where the resource is defined, in order to change the name
                     of the resource in the compiled assembly.<br />
                     To reference the executing assembly, you can use the
                     <see cref="M:System.Reflection.Assembly.GetExecutingAssembly" /> method; for other assemblies, you
                     can use the <see cref="M:System.Reflection.Assembly.Load(System.String)" /> method.<br />
                     Note that the order is important and you need to load dependencies before loading
                     the assemblies. For excemple, suppose you need to load the resources for assembly
                     A, where A depends on assembly B, that has no resources. Depending on the
                     accesses made by the application, it is possible that assembly B is still not
                     loaded when trying to load assembly A. To avoid this, add the
                     <c>Assembly.Load ("B");</c> statement before loading the resources of assembly A.
                   </item>
                   <item>
                     Set the value of the <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode" /> property to load the
                     texts of the resources.
                   </item>
                   <item>
                     There are three possibilities to get the text of a resource:
                     <list type="bullet">
                       <item>
                         Use the <see cref="P:OrdinaSoft.TextResourcesDict.Text(System.String)" /> index property of the dictionary:
                         <c>TextResourcesDict.TextResources ["Name of the text resource"]</c>.
                       </item>
                       <item>
                         Use the <see cref="M:System.StringExtension.Text(System.String)">Text</see> String extension
                         method: <c>"Name of the resource".Text()</c>.
                       </item>
                       <item>
                         If you need more information about a text resource, you can use the
                         <see cref="M:OrdinaSoft.TextResourcesDict.GetInfo(System.String)">GetInfo</see> method that returns a
                         <see cref="T:OrdinaSoft.TextResourcesDict.TextInfo" /> instance.
                       </item>
                     </list>
                   </item>
                 </list>
               </para>
               <h3>Usage in XAML</h3>
               <para>
                 For XAML, the best method is to define, in the application constructor a resource
                 referencing the default dictionary:<br />
                 <div class="code">Resources ["TextResources"] =
                   TextResourcesDict.TextResources;</div><br />
                 Using a resource is then as simple as using the following XAML code, instead of the
                 text, for each XAML file in the application:<br />
                 <div class="code">{Binding [ResourceName],
                   Source={StaticResource TextResources}}</div>.
               </para>
               <para>
                 For text resource with XAML data, the <i>OrdinaSoft.Windows</i> assembly contains a
                 <b>LoadXaml</b> extension method that loads XAML data from the resources. This method
                 cannot be included directly here because it is depending on the
                 <i>Microsoft.Windows.Desktop.App.Ref</i> package, that is only available for Windows.
                 See the documentation for this extension method for more information.<br />
                 There is also an <i>XamlResourcesDict</i> class that can be used for binding in the
                 XAML markup. See the documentation of this method for more information.
               </para>
               <h3>Languages</h3>
               <para>
                 The languages codes are based on RFC 4646. The code is a combination of an
                 <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639</a> two-letter lowercase
                 culture code associated with a language and an
                 <a href="https://www.iso.org/obp/ui/#search/code/">ISO 3166-1-alpha-2</a> uppercase
                 subculture code associated with a country or region.<br />
                 The format for the code is "&lt;languagecode>-&lt;country/regioncode>", where
                 &lt;languagecode> is the language code and &lt;country/regioncode> is the
                 subculture code. Examples include ja-JP for Japanese (Japan) and en-US for English
                 (United States). In cases where a two-letter language code is not available, a
                 three-letter code derived from
                 <a href="http://en.wikipedia.org/wiki/ISO_639-2">ISO 639-2</a> is used.<br />
                 Note that some codes also specify an
                 <a href="http://en.wikipedia.org/wiki/ISO_15924">ISO 15924</a> script. For example,
                 "-Cyrl" specifies the Cyrillic script and "-Latn" specifies the Latin script. A
                 code including a script is rendered using the pattern
                 &lt;languagecode>-&lt;scripttag>-&lt;country/regioncode>. An example of this type
                 of code is uz-Cyrl-UZ for Uzbek (Cyrillic, Uzbekistan). A neutral code is
                 specified by only the two-letter lowercase language code. For example, "fr"
                 specifies the neutral code for French, and "de" specifies the neutral code for
                 German.<br />
                 This class also accepts an empty (or <b>null</b>) language code. It indicates to use
                 the Windows language. The Windows language is defined as the result of the
                 <i>Thread.CurrentThread.CurrentUICulture</i> call.
               </para>
               <para>
                 The languages available to the application are specified in the
                 <see cref="F:OrdinaSoft.TextResourcesDict.LanguagesCodes" /> static field. At the initialization of the application,
                 this field must be filled with all the codes of supported languages. The empty (or
                 <b>null</b>) language code can also be added if the Windows language is a valid
                 options.
               </para>
               <para>
                 The text resources are looked in the following order, stopping at the first find
                 resource:
                 <list type="number">
                   <item>If <i>UserLanguageCode</i> is specified, this language code.</item>
                   <item>
                     If <i>UserLanguageCode</i> is specified and is a composed code, its base language
                     code.
                   </item>
                   <item>The language code specified in Windows.</item>
                   <item>
                     If the language code specified in Windows is a composed code, its base language
                     code.
                   </item>
                   <item>The <i>en</i> language code, that is always defined.</item>
                 </list>
               </para>
               
               <h3>Getting the languages</h3>
               <para>
                 If you need to display the available languages, you can use the
                 <see cref="M:OrdinaSoft.TextResourcesDict.GetLanguages" /> method. The result is a list of the available languages,
                 ordered by name, with the <i>Windows Language</i> at the top of the list. The name of
                 the languages are taken from the resources. When the language is changed, you must
                 call this method again, in order to have the languages in the right language.
               </para>
               <h3>Changing the language</h3>
               <para>
                 To change the language of the application, you only need to change the value of the
                 <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode" /> property.
               </para>
               <h3>Text resources</h3>
               <para>
                 The text resources can come from different places, as each assembly can define its
                 own resources. You specify the sources of the resources with the
                 <see cref="M:OrdinaSoft.TextResourcesDict.AddSource(System.Reflection.Assembly,System.String)" /> method. The path of the resource must not
                 contain the language or the <i>xml</i> extension, as they are added automatically by
                 the class. 
               </para>
               <para>
                 The resources must be compiled with the <i>EmbeddedResource</i> build action, so they
                 are compatible with all application types.
               </para>
               <para>
                 The names of the resources are case-sensitive; you can use the
                 <c>&lt;LogicalName>AssemblyName.TextResources.en.xml&lt;/LogicalName></c> child in
                 the project file, where the resource is defined, in order to change the name of the
                 resource in the compiled assembly.
               </para>
               <para>
                 Each text is identified by a name, in a case-independant manner. The value is the
                 text to display. If a name is not in the dictionary, the name is displayed between
                 "&lt;" and "&gt;".
               </para>
               <para>
                 When loading a resource, the language must not be specified in the name of the
                 resource, as it is added automatically by the class.
               </para>
               <para>
                 The code of the current language is specified in the <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode" />
                 field.
               </para>
               <para>
                 It is possible for the application to load text resources from other sources, for
                 example an external file or resources retrieved from a web service. To do this, you
                 can use one of the <b>Load</b> methods. In this case, it is the responsability of the
                 application to manage the language.
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.Language" />
             <seealso cref="M:System.StringExtension.Text(System.String)" />
             <seealso cref="T:OrdinaSoft.TextResourcesDict.Source" />
             <seealso cref="T:OrdinaSoft.TextResourcesDict.TextInfo" />
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.Languages">
            <summary>
               The languages that are available in the application.
             </summary>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.Sources">
            <summary>
               The sources for the resources.
             </summary>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.Dict">
            <summary>
               The internal dictionary.
             </summary>
             <remarks>
               The key is the name of the resource and the value is the text to display.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict._UserLanguageCode">
            <summary>
               The code of the user language.
             </summary>
             <remarks>
               This is the back-end field of the <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode" /> property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.CheckAndLoad(OrdinaSoft.TextResourcesDict.Source,System.String)">
            <summary>
               Checks whether a resource exists and loads it.
             </summary>
             <param name="Source">The source of the resource.</param>
             <param name="LanguageCode">The ISO code of the langauge.</param>
             <returns>
               <b>true</b> if the resource was found and loaded;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentException">
               One of the <see cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group</see> elements doesn't have a name.<br />
               -or-<br />
               One of the <i>Text</i> elements doesn't have a name.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               The resource doesn't contain a valid XML element.
             </exception>
             <remarks>
               <para>
                 If a resource for the specified language cannot be found and the language code is
                 composed, this method tries to load the base language.
               </para>
               <para>
                 The resource must be compiled with the <i>EmbeddedResource</i> build action.
               </para>
               <para>
                 If a text is already defined, its value is changed with the new resource.
               </para>
               <para>
                 This method only reads the children elements of the resource that are defined. The
                 other children elements, the attributes and the content are ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.CheckAndLoadSingle(OrdinaSoft.TextResourcesDict.Source,System.String)">
            <summary>
               Checks whether a resource exists and loads it.
             </summary>
             <param name="Source">The source of the resource.</param>
             <param name="LanguageCode">The ISO code of the langauge.</param>
             <returns>
               <b>true</b> if the resource was found and loaded;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentException">
               One of the <see cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group</see> elements doesn't have a name.<br />
               -or-<br />
               One of the <i>Text</i> elements doesn't have a name.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               The resource doesn't contain a valid XML element.
             </exception>
             <remarks>
               <para>
                 The resource must be compiled with the <i>EmbeddedResource</i> build action.
               </para>
               <para>
                 If a text is already defined, its value is changed with the new resource.
               </para>
               <para>
                 This method only reads the children elements of the resource that are defined. The
                 other children elements, the attributes and the content are ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.get_Text(System.String)">
            <summary>
               Gets the text assigned to a specific name.
             </summary>
             <param name="Name">The name of the text. Can be <b>null</b>.</param>
             <returns>
               The <b>&lt;null&gt;</b> text if <paramref name="Name" /> is <b>null</b>;<br />
               <paramref name="Name" /> if there is no text for the specified key;<br />
               otherwise, the text.
             </returns>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.TextResourcesDict.Text(System.String)" /> static indexed property, see
               the property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.Load(System.Xml.Linq.XElement,System.String)">
            <summary>
               Loads the text resources from an XML element.
             </summary>
             <param name="Elmt">The XML element.</param>
             <param name="Prefix">The prefix for the names.</param>
             <exception cref="T:System.ArgumentException">
               One of the <see cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group</see> elements doesn't have a name.<br />
               -or-<br />
               One of the <i>Text</i> elements doesn't have a name.
             </exception>
             <remarks>
               <para>
                 The resource must be compiled with the <i>EmbeddedResource</i> build action.
               </para>
               <para>
                 If a text is already defined, its value is changed with the new resource.
               </para>
               <para>
                 This method only reads the children elements of the resource that are defined. The
                 other children elements, the attributes and the content are ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.Load(System.Xml.Linq.XElement)">
            <summary>
               Loads an XML element containing text resources.
             </summary>
             <param name="Elmt">The XML element.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Elmt" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentException">
               One of the <see cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group</see> elements doesn't have a name.<br />
               -or-<br />
               One of the <i>Text</i> elements doesn't have a name.
             </exception>
             <remarks>
               <para>
                 If a text is already defined, its value is changed with the new resource.
               </para>
               <para>
                 This method only reads the children elements of the text resources that are
                 defined. The other children elements, the attributes and the content are ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.Load(System.String)">
            <summary>
               Loads a text containing text resources.
             </summary>
             <param name="Text">
               The text. Must contain an XML element with the text resources. Can be <b>null</b> or
               an empty string.
             </param>
             <exception cref="T:System.ArgumentException">
               One of the <see cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group</see> elements doesn't have a name.<br />
               -or-<br />
               One of the <i>Text</i> elements doesn't have a name.
             </exception>
             <exception cref="T:System.Xml.XmlException">
               <paramref name="Text" /> doesn't contain a valid XML element.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Text" /> is <b>null</b> or contains only white space, the text
                 resources are not changed.
               </para>
               <para>
                 If a text is already defined, its value is changed with the new resource.
               </para>
               <para>
                 This method only reads the children elements of the text resources that are
                 defined. The other children elements, the attributes and the content are ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.set_UserLanguageCode(System.String)">
            <summary>
               Sets the language code to use.
             </summary>
             <param name="Code">The new language code. Can be <b>null</b>.</param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.GroupNameAttrName">
            <summary>
               Name of the XML attribute with the name of a group.
             </summary>
             <remarks>
               <para>The name of the XML attribute is <b>Name</b>.</para>
               <para>This attribute is mandatory.</para>
               <para>
                 If the group in inside another group, its name is prefixed by the names of the
                 other groups, separated with dots.
               </para>
             </remarks>
             <seealso cref="F:OrdinaSoft.TextResourcesDict.GroupElmtName">Group element</seealso>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.GroupElmtName">
            <summary>
               Name of the XML element with a group of resources.
             </summary>
             <remarks>
               <para>The name of the element is <b>Group</b>.</para>
               <para>
                 When this element is encountered, all the resources names are prefixed with the
                 name of the group (the <see cref="F:OrdinaSoft.TextResourcesDict.GroupNameAttrName">Name</see> attribute) and a
                 space. If the group in inside another group, its name is prefixed by the names of
                 the other groups, separated with dots.
               </para>
             </remarks>
             <seealso cref="F:OrdinaSoft.TextResourcesDict.GroupNameAttrName">Name attribute</seealso>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.LanguagesCodes">
            <summary>
               The codes of the languages that are available in the application.
             </summary>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.TextResources">
            <summary>
               The tool that contains the text resources.
             </summary>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.TrimTexts">
            <summary>
               Indicates whether the text in the resources must be trimmed.
             </summary>
             <remarks>
               <para>
                 Default values is <b>true</b>.
               </para>
               <para>
                 If the value is <b>true</b>, each loaded text has its beginning and end trimmed.
               </para>
               <para>
                 Leaving this value is useful if multi-lines texts are written in their own lines in
                 the resource file. With this value set to <b>false</b>, such resources will have
                 empty lines at the beginning and at the end.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.#ctor">
            <summary>
               Initializes an instance of the dictionary.
             </summary>
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.Culture">
            <summary>
               Gets the culture associated to the <see cref="P:OrdinaSoft.TextResourcesDict.UserLanguageCode">selected
               language</see>.
             </summary>
             <value>
               <b>null</b> if no language has been selected;<br />
               otherwise, the culture.
             </value>
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.Text(System.String)">
            <summary>
               Gets the text assigned to a specific name.
             </summary>
             <param name="Name">The name of the text. Can be <b>null</b>.</param>
             <value>
               The <b>&lt;null&gt;</b> text if <paramref name="Name" /> is <b>null</b>;<br />
               <paramref name="Name" /> if there is no text for the specified name;<br />
               otherwise, the text.
             </value>
             <remarks>
               This is the default indexed property.
             </remarks>
             <seealso cref="M:OrdinaSoft.TextResourcesDict.GetInfo(System.String)" />
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.UserLanguageCode">
            <summary>
               Gets or sets the code of the user language.
             </summary>
             <value>The language code. Can be <b>null</b>.</value>
             <remarks>
               <para>
                 The default value is <b>null</b> indicating that we must use the Windows language.
                 A empty value also indicates the Windows language.
               </para>
               <para>
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.AddSource(System.Reflection.Assembly,System.String)">
            <summary>
               Adds a source for the resources.
             </summary>
             <param name="Assembly">The assembly to which the resource belongs.</param>
             <param name="ResourceName">The name of the resource.</param>
             <returns>The current instance.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Assembly" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ResourceName" /> is <b>null</b>.
             </exception>
             <remarks>
               As the method returns the current instance, the calls chained be chained.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.GetInfo(System.String)">
            <summary>
               Gets information about a text resource.
             </summary>
             <param name="Name">The name of the text resource. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if there is no text resource with the specified name;<br />
               otherwise, the information about the text resource.
             </returns>
             <seealso cref="P:OrdinaSoft.TextResourcesDict.Text(System.String)" />
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.GetLanguages">
            <summary>
               Gets the languages that are available in the application.
             </summary>
             <returns>The languages.</returns>
             <remarks>
               The languages are sorted by their name.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.TextResourcesDict.TextInfo">
            <summary>
               Text for a <see cref="T:OrdinaSoft.TextResourcesDict">dictionary of text resources</see>.
             </summary>
             <seealso cref="T:OrdinaSoft.TextResourcesDict" />
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.TextInfo.#ctor(System.String,System.Xml.Linq.XElement)">
            <summary>
               Initializes a text from an XML element.
             </summary>
             <param name="Prefix">The prefix, from the group.</param>
             <param name="Elmt">The XML element.</param>
             <exception cref="T:System.ArgumentException">
               The <i>Name</i> attribute of <paramref name="Elmt" /> is not specified.
             </exception>
             <remarks>
               <para>
                 <paramref name="Prefix" /> must contain a dot at its end, excepted for root texts,
                 as this constructor just appends the text name to the prefix.
               </para>
               <para>
                 This constructor only reads the content of <paramref name="Elmt" /> and its
                 attributes that are defined. The other attributes and the children elements are
                 ignored.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.TextInfo.Format">
            <summary>
               Gets the format.
             </summary>
             <value>
               <b>null</b> if the format is not specified;<br />
               otherwise, the format.
             </value>
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.TextInfo.Name">
            <summary>
               Gets the name.
             </summary>
             <value>The name.</value>
        </member>
        <member name="P:OrdinaSoft.TextResourcesDict.TextInfo.Text">
            <summary>
               Gets the text.
             </summary>
             <value>The text.</value>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.TextInfo.ToString">
            <summary>
               Returns a string implementation of the text.
             </summary>
             <returns>The string implementation.</returns>
        </member>
        <member name="T:OrdinaSoft.TextResourcesDict.Source">
            <summary>
               Source for a language resource.
             </summary>
             <seealso cref="T:OrdinaSoft.TextResourcesDict" />
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.Source.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
               Initializes a source.
             </summary>
             <param name="Assembly">The assembly.</param>
             <param name="Path">The path.</param>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.Source.Assembly">
            <summary>
               The assembly.
             </summary>
        </member>
        <member name="F:OrdinaSoft.TextResourcesDict.Source.Path">
            <summary>
               The path.
             </summary>
             <remarks>
               <para>
                 The path has its slash replaced by a dot, as .NET saves the resources names.
               </para>
               <para>
                 The path contains the ending dot, so we just need to add the language code and the
                 extension.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextResourcesDict.Source.ToString">
            <summary>
               Returns a string representation of the source.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:System.osConsole">
            <summary>
               Extensions to the <i>Console</i> class.
             </summary>
             <remarks>
               We can't write extensions for the <i>Console</i> class, because it's a static class.
             </remarks>
        </member>
        <member name="M:System.osConsole.ClearCurrentLine">
            <summary>
               Clears the current line of a console.
             </summary>
             <remarks>
               At the end of the method, the cursor is placed at the beginning of the line.
             </remarks>
        </member>
        <member name="M:System.osConsole.WriteLineInverted(System.String)">
            <summary>
               Writes an inverted text, followed by an end of line.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <exception cref="T:System.IO.IOException">
               An I/O error occured.
             </exception>
             <exception cref="T:System.Security.SecurityException">
               The user does not have permission to perform this action.
             </exception>
             <remarks>
               The text is written in black with a white background.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.osHorizontalAlignment">
            <summary>
               Horizontal alignment for many purposes.
             </summary>
             <remarks>
               <para>
                 In many places, we need a class to define the horizontal alignment of many things, so
                 this class is here for that.
               </para>
               <para>
                 Depending of the use of this class, not all values are always valid. See the
                 documentation of the member that uses this class for more information.
               </para>
               <para>
                 This discrete value doesn't have fixed values, so use the <see cref="P:OrdinaSoft.DiscreteValue.Name">name</see>
                 when saving to an external storage
               </para>
               <para>
                 The <see cref="P:OrdinaSoft.DiscreteValue`1.Null">Null</see> property is not defined in this class. Use the
                 <see cref="F:OrdinaSoft.osHorizontalAlignment.Default" /> value instead.
               </para>
               <h3>Text resources</h3>
               <para>
                 All the texts used by the class are taken from text resources files. The assembly
                 defines the texts in English and in French. Other languages can be added with the
                 <see cref="T:OrdinaSoft.TextResourcesDict">text resources dictionary</see>.
               </para>
               <para>
                 The texts resources are in the <b>HorizontalAlignment</b> group, with the name of the
                 horizontal alignment appended.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osHorizontalAlignment.#cctor">
            <summary>
               Initializes the static data of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osHorizontalAlignment.#ctor(System.String,System.Int32)">
            <summary>
               Initializes an horizontal alignment value.
             </summary>
             <param name="Name">The name.</param>
             <param name="Value">The value.</param>
        </member>
        <member name="M:OrdinaSoft.osHorizontalAlignment.#ctor">
            <summary>
               Initializes an horizontal alignment type without any value.
             </summary>
             <remarks>
               This constructor is used internally only, but must be defined as public because of
               generic constraints.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.ResNamePrefix">
            <summary>
               The prefix for the resource names.
             </summary>
             <remarks>
               <para>
                 The prefix is <b>HorizontalAlignment.</b>.
               </para>
               <para>
                 The resource name is constructed by appending the name of the horizontal alignment
                 to this prefix.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.Center">
            <summary>
               The item is centered.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.Default">
            <summary>
               The item uses the default horizontal alignment.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.Justify">
            <summary>
               The item is justified.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.Left">
            <summary>
               The item is left aligned.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osHorizontalAlignment.Right">
            <summary>
               The item is right aligned.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osHorizontalAlignment.op_Explicit(System.Xml.Linq.XAttribute)~OrdinaSoft.osHorizontalAlignment">
            <summary>
               Casts an XML attribute to an <b>osHorizontalAlignment</b>.
             </summary>
             <param name="Attr">The XML attribute to cast. Can be <b>null</b>.</param>
             <returns>
               <b>null</b>, if <paramref name="Attr" /> is <b>null</b>;<br />
               otherwise, the <b>osHorizontalAlignment</b> that corresponds to the XML attribute.
             </returns>
             <exception cref="T:System.FormatException">
               The attribute value is neither an integer number nor a valid name.
             </exception>
             <remarks>
               If the attribute is not <b>null</b>, but an unknown value, the result is an
               automatically generated <b>osHorizontalAlignment</b>, with the value as its name and
               its value.
             </remarks>
        </member>
        <member name="T:System.Net.Http.HttpClientExtension">
            <summary>
               Extension methods for the <see cref="T:System.Net.Http.HttpClient" /> class.
             </summary>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PostAsync(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
               Sends a <i>POST</i> request with a string content.
             </summary>
             <param name="Client">The HTTP client.</param>
             <param name="RequestUri">The URI.</param>
             <param name="Content">The content.</param>
             <returns>The response.</returns>
             <exception cref="T:System.Net.Http.HttpRequestException">
               The request failed due to an underlying issue such as network connectivity, DNS
               failure, server certificate validation or timeout.
             </exception>
             <exception cref="T:System.InvalidOperationException">
               The <paramref name="RequestUri" /> must be an absolute URI or <i>BaseAddress</i> must
               be set.
             </exception>
             <exception cref="T:System.Threading.Tasks.TaskCanceledException">
               The request failed due to timeout.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Net.JsonApiData">
            <summary>
               Data for the JSON API.
             </summary>
             <remarks>
               This class is intended to be used to save the data returned by a web service, in the
               standard JSON format.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiData.ValueJsonName">
            <summary>
               Name of the JSON value with the data.
             </summary>
             <remarks>
               The name of the value is <b>data</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor">
            <summary>
               Initializes a JSON API data.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor(OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON API data with a child value.
             </summary>
             <param name="Child">The child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The name of <paramref name="Child" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Child" /> is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON API data with two children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The children have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON API data with three children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON API data with four children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <param name="Child4">The fourth child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child4" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiData.#ctor(OrdinaSoft.Json.JsonValue[])">
            <summary>
               Initializes a JSON API data with children values.
             </summary>
             <param name="Children">The children.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of a child is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Children" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Net.JsonApiError">
            <summary>
               Error for the JSON API.
             </summary>
             <remarks>
               This class works by getting and setting the properties of a
               <see cref="T:OrdinaSoft.Json.JsonObjectValue" />. You should not manipulate directly the standard
               properties for an error, but, instead, use the class properties.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiError._Status">
            <summary>
               The status.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Net.JsonApiError.Status" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiError.set_Status(System.Net.HttpStatusCode)">
            <summary>
               Sets the status.
             </summary>
             <param name="Status">The new status.</param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Net.JsonApiError.Status" />, see the property documentation for
               more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiError.StatusJsonName">
            <summary>
               Name of the JSON value with the status.
             </summary>
             <remarks>
               The name of the value is <b>status</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiError.#ctor(System.Int32,System.String)">
            <summary>
               Initializes a JSON API error, with an identifier and a code.
             </summary>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
             <remarks>
               This constructor sets the <see cref="P:OrdinaSoft.Net.JsonApiError.Status" /> to <i>400</i>, the standard HTTP
               status for a client error.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiError.#ctor(System.Int32,System.String,System.String)">
            <summary>
               Initializes a JSON API error, with an identifier, a code and a detail.
             </summary>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
             <param name="Detail">The detail. Can be <b>null</b>.</param>
             <remarks>
               This constructor sets the <see cref="P:OrdinaSoft.Net.JsonApiError.Status" /> to <i>400</i>, the standard HTTP
               status for a client error.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiError.#ctor(System.Net.HttpStatusCode,System.Int32,System.String)">
            <summary>
               Initializes a JSON API error, with a status, an identifier and a code.
             </summary>
             <param name="Status">The status.</param>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiError.#ctor(System.Net.HttpStatusCode,System.Int32,System.String,System.String)">
            <summary>
               Initializes a JSON API error, with a status, an identifier, a code and a detail.
             </summary>
             <param name="Status">The status.</param>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
             <param name="Detail">The detail. Can be <b>null</b>.</param>
        </member>
        <member name="P:OrdinaSoft.Net.JsonApiError.Status">
            <summary>
               Gets or sets the status.
             </summary>
             <value>
               <b>0</b> if the status is not defined;<br />
               otherwise, the status.
             </value>
        </member>
        <member name="T:OrdinaSoft.Net.JsonApiErrorList">
            <summary>
               List of <see cref="T:OrdinaSoft.Net.JsonApiError">errors for the JSON API</see>.
             </summary>
             <remarks>
               This class is intended to be used to save an array of errors, in the standard JSON
               format. To have a correct list of errors, you must only add values of the
               <see cref="T:OrdinaSoft.Net.JsonApiError" /> type.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiErrorList.ListJsonName">
            <summary>
               Name of the JSON value with the errors.
             </summary>
             <remarks>
               The name of the value is <b>errors</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiErrorList.#ctor">
            <summary>
               Initializes a list of errors.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiErrorList.#ctor(OrdinaSoft.Net.JsonApiError)">
            <summary>
               Initializes a list of errors with one error.
             </summary>
             <param name="Error">The error. Can be <b>null</b>.</param>
             <remarks>
               If <paramref name="Error" /> is <b>null</b>, the error list will be empty.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Net.JsonApiWarning">
            <summary>
               Error for the JSON API.
             </summary>
             <remarks>
               This class works by getting and setting the properties of a
               <see cref="T:OrdinaSoft.Json.JsonObjectValue" />. You should not manipulate directly the standard
               properties for a warning, but, instead, use the class properties.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.#ctor">
            <summary>
               Initializes a JSON API warning.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.#ctor(System.Int32,System.String)">
            <summary>
               Initializes a JSON API warning, with an identifier and a code.
             </summary>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.#ctor(System.Int32,System.String,System.String)">
            <summary>
               Initializes a JSON API warning, with an identifier, a code and a detail.
             </summary>
             <param name="Identifier">The identifier.</param>
             <param name="Code">The code. Can be <b>null</b>.</param>
             <param name="Detail">The detail. Can be <b>null</b>.</param>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning._Code">
            <summary>
               The code.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Code" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning._Detail">
            <summary>
               The detail.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Detail" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning._Identifier">
            <summary>
               The identifier.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Identifier" /> property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.set_Code(System.String)">
            <summary>
               Sets the code.
             </summary>
             <param name="Code">The new code. Can be <b>null</b>.</param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Code" />, see the property documentation for
               more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.set_Detail(System.String)">
            <summary>
               Sets the detail.
             </summary>
             <param name="Detail">The new detail. Can be <b>null</b>.</param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Detail" />, see the property documentation for
               more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarning.set_Identifier(System.Int32)">
            <summary>
               Sets the identifier.
             </summary>
             <param name="Identifier">The new identifier.</param>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Net.JsonApiWarning.Identifier" />, see the property documentation
               for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning.CodeJsonName">
            <summary>
               Name of the JSON value with the code.
             </summary>
             <remarks>
               The name of the value is <b>code</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning.DetailJsonName">
            <summary>
               Name of the JSON value with the detail.
             </summary>
             <remarks>
               The name of the value is <b>detail</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarning.IdentifierJsonName">
            <summary>
               Name of the JSON value with the identifier.
             </summary>
             <remarks>
               The name of the value is <b>id</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Net.JsonApiWarning.Code">
            <summary>
               Gets or sets the code.
             </summary>
             <value>
               <b>null</b> if the code is not defined;<br />
               otherwise, the code.
             </value>
        </member>
        <member name="P:OrdinaSoft.Net.JsonApiWarning.Detail">
            <summary>
               Gets or sets the detail.
             </summary>
             <value>
               <b>null</b> if the detail is not defined;<br />
               otherwise, the detail.
             </value>
        </member>
        <member name="P:OrdinaSoft.Net.JsonApiWarning.Identifier">
            <summary>
               Gets or sets the identifier.
             </summary>
             <value>
               <b>0</b> if the identifier is not defined;<br />
               otherwise, the identifier.
             </value>
        </member>
        <member name="T:OrdinaSoft.Net.JsonApiWarningList">
            <summary>
               List of <see cref="T:OrdinaSoft.Net.JsonApiWarning">warnings for the JSON API</see>.
             </summary>
             <remarks>
               This class is intended to be used to save an array of warnings, in the standard JSON
               format. To have a correct list of warnings, you must only add values of the
               <see cref="T:OrdinaSoft.Net.JsonApiWarning" /> type.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.JsonApiWarningList.ListJsonName">
            <summary>
               Name of the JSON value with the warnings.
             </summary>
             <remarks>
               The name of the value is <b>warnings</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarningList.#ctor">
            <summary>
               Initializes a list of warnings.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Net.JsonApiWarningList.#ctor(OrdinaSoft.Net.JsonApiWarning)">
            <summary>
               Initializes a list of warnings with one warning.
             </summary>
             <param name="Warning">The warning. Can be <b>null</b>.</param>
             <remarks>
               If <paramref name="Warning" /> is <b>null</b>, the warning list will be empty.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Net.MimeType">
            <summary>
               Common MIME types.
             </summary>
             <remarks>
               <para>The MIME types are defined as <i>String</i> to be included in the header.</para>
               <para>
                 Most of the MIME types, but not all are defined in different classes for .NET
                 Standard. Unfortunately some of them are not available under .NET Standard 2.0. This
                 class defines all common MIME types in a single place.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.AdobeIllustrator">
            <summary>
               MIME type that represents an <b>Adobe Illustrator</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/postscript</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.AdobePdf">
            <summary>
               MIME type that represents an <b>Adobe PDF</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/pdf</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Eps">
            <summary>
               MIME type that represents an <b>Encapsulated PostScript</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/postscript</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.JavaScript">
            <summary>
               MIME type that represents <b>JavaScript</b> data.
             </summary>
             <remarks>
               The MIME type is <b>application/javascript</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Json">
            <summary>
               MIME type that represents <b>JSON</b> data.
             </summary>
             <remarks>
               The MIME type is <b>application/json</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.MSExcel">
            <summary>
               MIME type that represents a <b>Microsoft Excel</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/ms-excel</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.MSPowerPoint">
            <summary>
               MIME type that represents a <b>Microsoft PowerPoint</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/ms-powerpoint</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.MSWord">
            <summary>
               MIME type that represents a <b>Microsoft Word</b> document.
             </summary>
             <remarks>
               The MIME type is <b>application/msword</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.MultipartFormData">
            <summary>
               MIME type that represents a multi-part form data.
             </summary>
             <remarks>
               The MIME type is <b>multipart/form-data</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.OctetStream">
            <summary>
               MIME type that represents an <b>octet stream</b>.
             </summary>
             <remarks>
               The MIME type is <b>application/octet-stream</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.UrlEncoded">
            <summary>
               MIME type that represents an URL encoded data.
             </summary>
             <remarks>
               The MIME type is <b>application/x-www-form-urlencoded</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.XmlApplication">
            <summary>
               MIME type that represents an <b>XML</b> application.
             </summary>
             <remarks>
               <para>The MIME type is <b>application/xml</b>.</para>
               <para>
                 This is the preferred MIME type for an XML file, because it can use an encoding
                 different of that defined by the HTTP headers.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Zip">
            <summary>
               MIME type that represents <b>ZIP</b> data.
             </summary>
             <remarks>
               The MIME type is <b>application/zip</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.CSV">
            <summary>
               MIME type that represents <b>CSV</b> data.
             </summary>
             <remarks>
               The MIME type is <b>text/csv</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Html">
            <summary>
               MIME type that represents <b>HTML</b> data.
             </summary>
             <remarks>
               The MIME type is <b>text/html</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Text">
            <summary>
               MIME type that represents <b>text</b> data.
             </summary>
             <remarks>
               The MIME type is <b>text/plain</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.XmlText">
            <summary>
               MIME type that represents an <b>XML</b> text.
             </summary>
             <remarks>
               <para>The MIME type is <b>text/xml</b>.</para>
               <para>
                 The preferred MIME type for an XML file is <see cref="F:OrdinaSoft.Net.MimeType.XmlApplication" />, because
                 it can use an encoding different of that defined by the HTTP headers. This MIME
                 type should use the encoding of the HTTP headers, or <b>us-ascii</b> if none is
                 defined.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Bitmap">
            <summary>
               MIME type that represents a <b>bitmap</b> image.
             </summary>
             <remarks>
               The MIME type is <b>image/bitmap</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Gif">
            <summary>
               MIME type that represents a <b>GIF</b> image.
             </summary>
             <remarks>
               The MIME type is <b>image/gif</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Jpeg">
            <summary>
               MIME type that represents a <b>JPEG</b> image.
             </summary>
             <remarks>
               The MIME type is <b>image/jpeg</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Png">
            <summary>
               MIME type that represents a <b>PNG</b> image.
             </summary>
             <remarks>
               The MIME type is <b>image/png</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Net.MimeType.Tiff">
            <summary>
               MIME type that represents a <b>TIFF</b> image.
             </summary>
             <remarks>
               The MIME type is <b>image/tiff</b>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Net.osMailAddress">
            <summary>
               Tools for mail addresses.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Net.osMailAddress.StandardSeparators">
            <summary>
               The standard separators between mail addresses.
             </summary>
             <remarks>
               This array just contains a comma (<b>","</b>).
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.osMailAddress.AreAllValid(System.String)">
            <summary>
               Indicates whether all the addresses in a list are valid.
             </summary>
             <param name="AddressList">The list of addresses to check. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if all the mail addresses in <paramref name="AddressList" /> are
               valid;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 If <paramref name="AddressList" /> is <b>null</b> or empty, the result is
                 <b>true</b>.
               </para>
               <para>
                 If there are multiple mail addresses in <paramref name="AddressList" />, they must
                 be separated by a comma (",").
               </para>
               <para>
                 Each address in <paramref name="AddressList" /> can contain a display name and the
                 associated mail address if the address is enclosed in angle brackets. For
                 example:<br />
                 <c>"Tom Smith &lt;tsmith@contoso.com>"</c><br />
                 White space is permitted between the display name and the angle brackets.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.osMailAddress.IsValid(System.String)">
            <summary>
               Indicates whether a mail address is valid.
             </summary>
             <param name="Address">The mail address to check. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Address" /> is <b>not-null</b> and a valid mail
               address;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <paramref name="Address" /> can contain a display name and the associated mail
               address if the address is enclosed in angle brackets. For example:<br />
               <c>"Tom Smith &lt;tsmith@contoso.com>"</c><br />
               White space is permitted between the display name and the angle brackets.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.osMailAddress.Split(System.String)">
            <summary>
               Split addresses in a list.
             </summary>
             <param name="AddressList">The addresses to splt.</param>
             <returns>
               An array of the addresses in <paramref name="AddressList" />.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="AddressList" /> is empty.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="AddressList" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 The addresses in <paramref name="AddressList" /> must be separated by a comma
                 (",").
               </para>
               <para>
                 This method doesn't check whether the mail addresses in
                 <paramref name="AddressList" /> are valid. Please use the
                 <see cref="M:OrdinaSoft.Net.osMailAddress.IsValid(System.String)" /> or the <see cref="M:OrdinaSoft.Net.osMailAddress.AreAllValid(System.String)" /> method to
                 check them.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Net.osMailAddress.Split(System.Char[],System.String)">
            <summary>
               Split addresses in a list.
             </summary>
             <param name="Separators">The separators between the addresses.</param>
             <param name="AddressList">The addresses to splt.</param>
             <returns>
               An array of the addresses in <paramref name="AddressList" />.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="AddressList" /> is empty.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="AddressList" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Separators" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Separators" /> should not contain chars that are normally in a mail
                 address, such as letters, digits, dash (<b>"-"</b>), ...
               </para>
               <para>
                 This method doesn't check whether the mail addresses in
                 <paramref name="AddressList" /> are valid. Please use the
                 <see cref="M:OrdinaSoft.Net.osMailAddress.IsValid(System.String)" /> or the <see cref="M:OrdinaSoft.Net.osMailAddress.AreAllValid(System.String)" /> method to
                 check them.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.DoubleExtension">
            <summary>
               Extension methods for the <i>Double</i> structure.
             </summary>
        </member>
        <member name="M:OrdinaSoft.DoubleExtension.IsANumber(System.Double)">
            <summary>
               Indicates whether a <i>Double</i> value represents a number.
             </summary>
             <param name="Value">The value to check.</param>
             <returns>
               <b>false</b> if <paramref name="Value" /> is <i>NaN</i>, <i>NegativeInfinity</i> or
               <i>PositiveInfinity</i>;<br />
               otherwise, <b>true</b>.
             </returns>
             <remarks>
               <paramref name="Value" /> is a number if it is neither <i>Infinity</i> nor <i>NaN</i>
               (not a number).
             </remarks>
        </member>
        <member name="T:OrdinaSoft.osDouble">
            <summary>
               Tools to work on <see cref="T:System.Double" /> floating-point numbers.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osDouble.ParseStyle">
            <summary>
               Number style that we use for the <see cref="M:OrdinaSoft.osDouble.Parse(System.String)" />,
               <see cref="M:OrdinaSoft.osDouble.Parse(System.String,System.Double)" /> and <see cref="M:OrdinaSoft.osDouble.TryParse(System.String,System.Double@)" />
               methods.
             </summary>
             <remarks>
               In addition to the default used in the <see cref="T:System.Double" /> structure, we add the
               possibility to have a trailing sign.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osDouble.IsValid(System.String)">
            <summary>
               Indicates whether a string contains a valid double-precision floating-point number.
             </summary>
             <param name="Text">The string to check.</param>
             <returns>
               <b>true</b> if the specified string contains a valid floating-point number;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osDouble.Parse(System.String)">
            <summary>
               Converts the string representation of a number to its double-precision floating-point
               number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty, <b>0</b>;<br />
               otherwise, a double-precision floating-point number that is equivalent to the numeric
               value or symbol specified in <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> does not represent a number in a valid format.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Text" /> represents a number that is less than
               <see cref="F:System.Double.MinValue">Double.MinValue</see> or greater than
               <see cref="F:System.Double.MaxValue">Double.MaxValue</see>.
             </exception>
             <remarks>
               This method does the same thing as
               <see cref="M:System.Double.Parse(System.String)">Double.Parse</see>, but use a different style by
               default; and also accepts <b>null</b> or an empty string for its text parameter.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osDouble.Parse(System.String,System.Double)">
            <summary>
               Converts the string representation of a number to its double-precision floating-point
               number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <param name="Default">Default value for the number.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty,
               <paramref name="Default" />;<br />
               otherwise, a double-precision floating-point number that is equivalent to the numeric
               value or symbol specified in <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> does not represent a number in a valid format.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Text" /> represents a number that is less than
               <see cref="F:System.Double.MinValue">Double.MinValue</see> or greater than
               <see cref="F:System.Double.MinValue">Double.MinValue</see>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.osDouble.TryParse(System.String,System.Double@)">
            <summary>
               Converts the string representation of a number to its double-precision floating-point
               number equivalent.<br />
               A return value indicates whether the conversion succeeded or failed.
             </summary>
             <param name="Text">A string containing a number to convert. Can be <b>null</b>.</param>
             <param name="Value">
               When this method returns, contains the double-precision floating-point number
               equivalent to the <paramref name="Text" /> parameter, if the conversion succeeded, or
               <b>0</b> if the conversion failed.<br />
               The value will also be <b>0</b> if <paramref name="Text" /> is <b>null</b> or
               contains only white-space. In this case the result of the method will be
               <b>true</b>.<br />
               The conversion fails if the <paramref name="Text" /> parameter is not a number in a
               valid format, or represents a number less than
               <see cref="F:System.Double.MinValue">Double.MinValue</see> or greater than
               <see cref="F:System.Double.MinValue">Double.MinValue</see>.<br />
               This parameter is passed uninitialized.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> can be parsed as a double-precision
               floating-point number value;<br />
               otherwise <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osDouble.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
               Converts the string representation of a number to its double-precision floating-point
               number equivalent.<br />
               A return value indicates whether the conversion succeeded or failed.
             </summary>
             <param name="Text">A string containing a number to convert. Can be <b>null</b>.</param>
             <param name="Format">
               An object that contains culture-specific formatting for <paramref name="Text" />. Can
               be <b>null</b>.
             </param>
             <param name="Value">
               When this method returns, contains the double-precision floating-point number
               equivalent to the <paramref name="Text" /> parameter, if the conversion succeeded, or
               <b>0</b> if the conversion failed.<br />
               The value will also be <b>0</b> if <paramref name="Text" /> is <b>null</b> or
               contains only white-space. In this case the result of the method will be
               <b>true</b>.<br />
               The conversion fails if the <paramref name="Text" /> parameter is not a number in a
               valid format, or represents a number less than
               <see cref="F:System.Double.MinValue">Double.MinValue</see> or greater than
               <see cref="F:System.Double.MinValue">Double.MinValue</see>.<br />
               This parameter is passed uninitialized.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> can be parsed as a double-precision
               floating-point number value;<br />
               otherwise <b>false</b>.
             </returns>
             <remarks>
               If <paramref name="Format" /> is <b>null</b> or can not return a
               <see cref="T:System.Globalization.NumberFormatInfo" /> object, the current culture will be used.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.osInt32">
            <summary>
               Tools to work on <see cref="T:System.Int32">32-bit integer</see> numbers.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osInt32.ParseStyle">
            <summary>
               Number style that we use for the <see cref="M:OrdinaSoft.osInt32.Parse(System.String)" />,
               <see cref="M:OrdinaSoft.osInt32.Parse(System.String,System.Int32)" /> and <see cref="M:OrdinaSoft.osInt32.TryParse(System.String,System.Int32@)" />
               methods.
             </summary>
             <remarks>
               In addition to the default used in the <see cref="T:System.Int32" /> structure, we add the
               possibility to have a trailing sign.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.osInt32.EmptySet">
            <summary>
               An empty set of integer numbers.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osInt32.IsValid(System.String)">
            <summary>
               Indicates whether a string contains a valid integer number.
             </summary>
             <param name="Text">The string to check.</param>
             <returns>
               <b>true</b> if the specified string contains a valid integer number;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt32.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
               Limits a number.
             </summary>
             <param name="Number">The number to limit.</param>
             <param name="Min">The minimum value that can take <paramref name="Number" />.</param>
             <param name="Max">The maximum value that can take <paramref name="Number" />.</param>
             <returns>
               <paramref name="Number" /> if its value in inside the
               <paramref name="Min" />..<paramref name="Max" /> range, including the bounds;<br />
               <paramref name="Min" /> if <paramref name="Number" /> is less than
               <paramref name="Min" />;<br />
               <paramref name="Max" /> if <paramref name="Number" /> is greater than
               <paramref name="Max" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt32.Parse(System.String)">
            <summary>
               Converts the string representation of a number to its integer number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty, <b>0</b>;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> does not represent a number in a valid format.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Text" /> represents a number that is less than
               <see cref="F:System.Int32.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int32.MaxValue">MaxValue</see>.
             </exception>
             <remarks>
               This method does the same thing as <see cref="M:System.Int32.Parse(System.String)">Int32.Parse</see>,
               but use a different style by default; and also accept <b>null</b> or an empty string
               for its text parameter.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osInt32.Parse(System.String,System.Int32)">
            <summary>
               Converts the string representation of a number to its integer number equivalent.
             </summary>
             <param name="Text">
               A string that contains a number to convert. Can be <b>null</b>.
             </param>
             <param name="Default">The default value for the number.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b>, empty, or does not represent a number in
               a valid format, or represents a number that is less than
               <see cref="F:System.Int32.MinValue">MinValue</see> or greater
               than <see cref="F:System.Int32.MaxValue">MaxValue</see>, <paramref name="Default" />;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt32.ParseWithNull(System.String)">
            <summary>
               Converts the string representation of a number to its nullable integer number
               equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty, <b>null</b>;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> does not represent a number in a valid format.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Text" /> represents a number that is less than
               <see cref="F:System.Int32.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int32.MaxValue">MaxValue</see>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.osInt32.ParseWithNull(System.String,System.Int32)">
            <summary>
               Converts the string representation of a number to its integer number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <param name="Default">The default value for the number.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty, <b>null</b>;<br />
               if <paramref name="Text" /> does not represent a number in a valid format, or
               represents a number that is less than <see cref="F:System.Int32.MinValue">MinValue</see> or
               greater than <see cref="F:System.Int32.MaxValue">MaxValue</see>,
               <paramref name="Default" />;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt32.ToOrdinalString(System.Int32)">
            <summary>
               Returns an ordinal representation of the number.
             </summary>
             <param name="Number">A number to show in its ordinal form.</param>
             <returns>
               A string that represents <paramref name="Number" /> in its ordinal form.
             </returns>
             <remarks>
               This method currently use the English rule for ordinal numbers.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osInt32.TryParse(System.String,System.Int32@)">
            <summary>
               Converts the string representation of a number to its integer number
               equivalent.<br />
               A return value indicates whether the conversion succeeded or failed.
             </summary>
             <param name="Text">A string containing a number to convert.</param>
             <param name="Value">
               When this method returns, contains the integer number equivalent to the
               <paramref name="Text" /> parameter, if the conversion succeeded, or <b>0</b> if the
               conversion failed.<br />
               The conversion fails if the <paramref name="Text" /> parameter is not a number in a
               valid format, or represents a number less than
               <see cref="F:System.Int32.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int32.MaxValue">MaxValue</see>.<br />
               This parameter is passed uninitialized.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> can be parsed as an integer number
               value;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt32.TryParse(System.String,System.Nullable{System.Int32}@)">
            <summary>
               Converts the string representation of a number to its nullable integer number
               equivalent.<br />
               A return value indicates whether the conversion succeeded or failed.
             </summary>
             <param name="Text">A string containing a number to convert.</param>
             <param name="Value">
               When this method returns, contains the integer number equivalent to the
               <paramref name="Text" /> parameter, if the conversion succeeded, or <b>null</b> if
               the conversion failed.<br />
               The conversion fails if the <paramref name="Text" /> parameter is not a number in a
               valid format, or represents a number less than
               <see cref="F:System.Int32.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int32.MaxValue">MaxValue</see>.<br />
               This parameter is passed uninitialized.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> can be parsed as an integer number
               value;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="T:OrdinaSoft.osInt64">
            <summary>
               Tools to work on <see cref="T:System.Int64">64-bit integer</see> numbers.
             </summary>
        </member>
        <member name="F:OrdinaSoft.osInt64.ParseStyle">
            <summary>
               Number style that we use for the <see cref="M:OrdinaSoft.osInt64.Parse(System.String)" />,
               <see cref="M:OrdinaSoft.osInt64.Parse(System.String,System.Int64)" /> and <see cref="M:OrdinaSoft.osInt64.TryParse(System.String,System.Int64@)" />
               methods.
             </summary>
             <remarks>
               In addition to the default used in the <see cref="T:System.Int64" /> structure, we add the
               possibility to have a trailing sign.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osInt64.IsValid(System.String)">
            <summary>
               Indicates whether a string contains a valid integer number.
             </summary>
             <param name="Text">The string to check.</param>
             <returns>
               <b>true</b> if the specified string contains a valid integer number;<br />
               otherwise <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt64.Limit(System.Int64,System.Int64,System.Int64)">
            <summary>
               Limits a number.
             </summary>
             <param name="Number">The number to limit.</param>
             <param name="Min">The minimum value that can take <paramref name="Number" />.</param>
             <param name="Max">The maximum value that can take <paramref name="Number" />.</param>
             <returns>
               <paramref name="Number" /> if its value in inside the
               <paramref name="Min" />..<paramref name="Max" /> range, including the bounds;<br />
               <paramref name="Min" /> if <paramref name="Number" /> is less than
               <paramref name="Min" />;<br />
               <paramref name="Max" /> if <paramref name="Number" /> is greater than
               <paramref name="Max" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt64.Parse(System.String)">
            <summary>
               Converts the string representation of a number to its integer number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b> or empty, <b>0</b>;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
             <exception cref="T:System.FormatException">
               <paramref name="Text" /> does not represent a number in a valid format.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Text" /> represents a number that is less than
               <see cref="F:System.Int64.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int64.MaxValue">MaxValue</see>.
             </exception>
             <remarks>
               This method does the same thing as <see cref="M:System.Int64.Parse(System.String)">Int64.Parse</see>,
               but use a different style by default; and also accept <b>null</b> or an empty string
               for its text parameter.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osInt64.Parse(System.String,System.Int64)">
            <summary>
               Converts the string representation of a number to its integer number equivalent.
             </summary>
             <param name="Text">A string that contains a number to convert.</param>
             <param name="Default">Default value for the number.</param>
             <returns>
               If <paramref name="Text" /> is <b>null</b>, empty, or does not represent a number in
               a valid format, or represents a number that is less than
               <see cref="F:System.Int64.MinValue">MinValue</see> or greater
               than <see cref="F:System.Int64.MaxValue">MaxValue</see>, <paramref name="Default" />;<br />
               otherwise, an integer number that is equivalent to the numeric value specified in
               <paramref name="Text" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.osInt64.ToOrdinalString(System.Int64)">
            <summary>
               Returns an ordinal representation of the number.
             </summary>
             <param name="Number">A number to show in its ordinal form.</param>
             <returns>
               A string that represents <paramref name="Number" /> in its ordinal form.
             </returns>
             <remarks>
               This method currently use the English rule for ordinal numbers.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osInt64.TryParse(System.String,System.Int64@)">
            <summary>
               Converts the string representation of a number to its integer number
               equivalent.<br />
               A return value indicates whether the conversion succeeded or failed.
             </summary>
             <param name="Text">A string containing a number to convert.</param>
             <param name="Value">
               When this method returns, contains the integer number equivalent to the
               <paramref name="Text" /> parameter, if the conversion succeeded, or <b>0</b> if the
               conversion failed.<br />
               The conversion fails if the <paramref name="Text" /> parameter is not a number in a
               valid format, or represents a number less than
               <see cref="F:System.Int64.MinValue">MinValue</see> or greater than
               <see cref="F:System.Int64.MaxValue">MaxValue</see>.<br />
               This parameter is passed uninitialized.
             </param>
             <returns>
               <b>true</b> if <paramref name="Text" /> can be parsed as an integer number
               value;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="T:OrdinaSoft.osNotifyPropertyChanged">
            <summary>
               Base class to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
             </summary>
             <remarks>
               This class uses the <see cref="F:OrdinaSoft.osNotifyPropertyChanged.EventRaiser" /> field to raise the notification events.
               See the remarks of the <see cref="T:OrdinaSoft.osEventManager" /> class and the
               <see cref="T:OrdinaSoft.IEventRaiser" /> interface for more information.
             </remarks>
             <seealso cref="T:OrdinaSoft.IEventRaiser" />
             <seealso cref="T:OrdinaSoft.osEventManager" />
        </member>
        <member name="F:OrdinaSoft.osNotifyPropertyChanged._PropertyChanged">
            <summary>
               Manager for the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event.
             </summary>
             <remarks>
               Unfortunately, we can't use the <b>OsEvent</b> aspect, because the event doesn't use
               the generic event definition.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
               Adds a handler to be called when the
               <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event is raised.
             </summary>
             <param name="Handler">The handler to add.</param>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
               Removes a handler that will no more be called when the
               <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event is raised.
             </summary>
             <param name="Handler">The handler to remove.</param>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event for multiple
               properties.
             </summary>
             <remarks>
               This method raises the event with a <b>null</b> property name, to notify that many
               properties have changed.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event, for two
               properties specified by their names.
             </summary>
             <param name="Name1">The name of the first property that has changed.</param>
             <param name="Name2">The name of the second property that has changed.</param>
             <remarks>
               To indicate that many properties have changed, without specifying their names, you
               can:
               <list type="bullet">
                 <item>
                   Call the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)" /> method with <b>null</b> or an
                   <b>empty string</b> for its <b>Name</b> parameter.
                 </item>
                 <item>
                   Use the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">OnPropertiesChanged</see> method.
                 </item>
               </list>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String,System.String)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event, for three
               properties specified by their names.
             </summary>
             <param name="Name1">The name of the first property that has changed.</param>
             <param name="Name2">The name of the second property that has changed.</param>
             <param name="Name3">The name of the third property that has changed.</param>
             <remarks>
               To indicate that many properties have changed, without specifying their names, you
               can:
               <list type="bullet">
                 <item>
                   Call the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)" /> method with <b>null</b> or an
                   <b>empty string</b> for its <b>Name</b> parameter.
                 </item>
                 <item>
                   Use the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">OnPropertiesChanged</see> method.
                 </item>
               </list>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String,System.String,System.String)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event, for four
               properties specified by their names.
             </summary>
             <param name="Name1">The name of the first property that has changed.</param>
             <param name="Name2">The name of the second property that has changed.</param>
             <param name="Name3">The name of the third property that has changed.</param>
             <param name="Name4">The name of the forth property that has changed.</param>
             <remarks>
               To indicate that many properties have changed, without specifying their names, you
               can:
               <list type="bullet">
                 <item>
                   Call the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)" /> method with <b>null</b> or an
                   <b>empty string</b> for its <b>Name</b> parameter.
                 </item>
                 <item>
                   Use the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">OnPropertiesChanged</see> method.
                 </item>
               </list>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String[])">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event, for many
               properties specified by their names.
             </summary>
             <param name="Names">The name of the properties that has changed.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Names" /> is <b>null</b>.
             </exception>
             <remarks>
               To indicate that many properties have changed, without specifying their names, you
               can:
               <list type="bullet">
                 <item>
                   Call the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)" /> method with <b>null</b> or an
                   <b>empty string</b> for its <b>Name</b> parameter.
                 </item>
                 <item>
                   Use the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">OnPropertiesChanged</see> method.
                 </item>
               </list>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
             <remarks>
               Inheritors must call the base method for the event to be raised.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event, for a property
               specified by its name.
             </summary>
             <param name="Name">
               <b>null</b> or an <b>empty string</b> if many properties have changed;<br />
               otherwise, the name of the property that has changed.
             </param>
             <remarks>
               To indicate that many properties have changed, you can:
               <list type="bullet">
                 <item>
                   Specify <b>null</b> or an <b>empty string</b> for the <paramref name="Name" />
                   parameter.
                 </item>
                 <item>
                   Use the <see cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged">OnPropertiesChanged</see> method.
                 </item>
               </list>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.osNotifyPropertyChanged.EventRaiser">
            <summary>
               The object to use to raise the notification events.
             </summary>
             <remarks>
               If this object is defined, it is used to raise the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged" />
               events. This is useful for GUI applications that have background worker that must
               notify to the UI thread. See the remarks of the <see cref="T:OrdinaSoft.osEventManager" /> class
               and the <see cref="T:OrdinaSoft.IEventRaiser" /> interface for more information.
             </remarks>
             <seealso cref="T:OrdinaSoft.IEventRaiser" />
             <seealso cref="T:OrdinaSoft.osEventManager" />
        </member>
        <member name="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">
            <summary>
               Occurs when one, or more, property of this instance has changed.
             </summary>
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged" />
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String)" />
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String,System.String)" />
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertiesChanged(System.String,System.String,System.String,System.String)" />
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.String)" />
             <seealso cref="M:OrdinaSoft.osNotifyPropertyChanged.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
        </member>
        <member name="T:OrdinaSoft.osObject">
            <summary>
               Tools for object management.
             </summary>
        </member>
        <member name="M:OrdinaSoft.osObject.EmptyAction">
            <summary>
               A method that does nothing.
             </summary>
             <remarks>
               This can be useful when we need to provide an <i>Action</i> to a method but we don't
               want this action to do something.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.osObject.Swap``1(``0@,``0@)">
            <summary>
               Swaps two objects of the same type.
             </summary>
             <typeparam name="TObject">The type of the objects to swap.</typeparam>
             <param name="Object1">The first object. Can be <b>null</b>.</param>
             <param name="Object2">The second object. Can be <b>null</b>.</param>
        </member>
        <member name="T:OrdinaSoft.Reflection.PropertyValueManager">
            <summary>
               Tool to get the value of a property.
             </summary>
             <remarks>
               The property name is specified as a path and can contain multiple properties separated
               by a dot. Currently indexed properties are not supported.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Reflection.PropertyValueManager.Names">
            <summary>
               The names of the properties in the path.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Reflection.PropertyValueManager.PropertyNotFound">
            <summary>
               The value that is returned from <see cref="M:OrdinaSoft.Reflection.PropertyValueManager.GetValue(System.Object)" /> when a property is
               not found.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Reflection.PropertyValueManager.#ctor(System.String)">
            <summary>
               Initializes an instance of the tool.
             </summary>
             <param name="Path">The path of the property to get.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.
             </exception>
             <remarks>
               The property name is specified as a path and can contain multiple properties
               separated by a dot. Currently indexed properties are not supported.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Reflection.PropertyValueManager.Path">
            <summary>
               The path of the property.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Reflection.PropertyValueManager.GetValue(System.Object)">
            <summary>
               Gets the value of the property on a specific object.
             </summary>
             <param name="Obj">
               The object on which to get the property value. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Obj" /> is <b>null</b>;<br />
               <see cref="F:OrdinaSoft.Reflection.PropertyValueManager.PropertyNotFound" /> if there is no property with the specified path in
               <paramref name="Obj" />;<br />
               Otherwise, the value of the property.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Reflection.PropertyValueManager.SetValue(System.Object,System.Object)">
            <summary>
               Sets the value of the property on a specific object.
             </summary>
             <param name="Obj">The object.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <returns>
               <b>false</b> if the value can't be set because the we found a property whose value is
               <b>null</b> while looking for the property;<br />
               <b>true</b> if the property was set successfully.
             </returns>
             <exception cref="T:System.ArgumentException">
               A property from the <see cref="F:OrdinaSoft.Reflection.PropertyValueManager.Path">path</see> was not found in
               <paramref name="Obj" />.<br />
               -or-<br />
               The property's <i>set</i> accessor is not found.<br />
               -or-<br />
               <paramref name="Value" /> cannot be converted to the type of the property.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Obj" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.MethodAccessException">
               There was an illegal attempt to access a private or protected method inside a class.
             </exception>
             <exception cref="T:System.Reflection.TargetException">
               The type of <paramref name="Obj" /> does not match the target type, or a property is
               an instance property but <paramref name="Obj" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Reflection.TargetInvocationException">
               An error occurred while setting the property value. The <i>InnerException</i>
               property indicates the reason for the error.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Reflection.PropertyValueManager.ToString">
            <summary>
               Gets a string representation of the manager.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.Settings">
            <summary>
               Settings for an application.
             </summary>
             <remarks>
               <para>The settings are based on an XML file.</para>
               <para>
                 <b>Note to inheritors</b>: the <see cref="M:OrdinaSoft.Settings.Save" /> method calls the
                 <see cref="M:OrdinaSoft.Settings.PrepareSave" /> method, so if you need to add information to the settings,
                 you should override the <b>PrepareSave</b> method to update the
                 <see cref="F:OrdinaSoft.Settings.XmlRoot" /> field with the relevant information.
               </para>
               <para>
                 To manage the lists of last opened items, you should use the
                 <see cref="P:OrdinaSoft.Settings.LastFilesList(System.String)" /> indexed property.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings._MaxNbLastFiles">
            <summary>
               Maximum number of last files to keep.
             </summary>
             <remarks>
               This is the back end field of the <see cref="P:OrdinaSoft.Settings.MaxNbLastFiles" /> property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.LastFiles">
            <summary>
               Dictionary that contains the list of last files.
             </summary>
             <remarks>
               The dictionary is indexed with the name of the list.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.Values">
            <summary>
               Dictionary that contains the <b>String</b> representation of each value in the
               settings.
             </summary>
             <remarks>
               The dictionary is indexed with the name of the value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.get_LastFilesList(System.String)">
            <summary>
               Gets the list of last files with a specified name.
             </summary>
             <param name="Name">The name of the list to retrieve.</param>
             <returns>The list of last files named <paramref name="Name" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Settings.LastFilesList(System.String)" /> indexed property, see
               the property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.ParseInt32(System.String,System.Int32)">
            <summary>
               Parses a 32-bit integer value.
             </summary>
             <param name="Text">
               The text that contains the value. Can be <b>null</b>.
             </param>
             <param name="DefaultValue">
               Default value if <paramref name="Text" /> is <b>null</b> or doesn't contain a valid
               value.
             </param>
             <returns>
               The <b>Int32</b> value in <paramref name="Text" />, if it exists and is valid;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Settings.set_MaxNbLastFiles(System.Int32)">
            <summary>
               Sets the maximum number of last files to keep.
             </summary>
             <param name="MaxNbLastFiles">The new maximum number of last files to keep.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="MaxNbLastFiles" /> is less than or equal to 0.
             </exception>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Settings.MaxNbLastFiles" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.#ctor">
            <summary>
               Initializes empty settings.
             </summary>
             <remarks>
               The purpose of this constructor is to make a copy of the current options, so that
               they can be edited by the user and a <b>Cancel</b> of the changes can be made.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.#ctor(System.String)">
            <summary>
               Initializes the settings from a file with the specified name.
             </summary>
             <param name="FileName">The absolute name of the file.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If no extension is specified for <paramref name="FileName" />, a default
                 <see cref="F:OrdinaSoft.IO.osFileExtension.Xml">.xml</see> extension is used.
               </para>
               <para>
                 If there is an error in the settings file, the settings are ignored and a new
                 settings file is created.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.#ctor(System.Boolean,System.String)">
            <summary>
               Initializes the settings from a file in the user or application settings.
             </summary>
             <param name="User">
               <b>true</b> if the settings are for the user;<br />
               <b>false</b> if the settings are for the application.
             </param>
             <param name="RelativeFileName">
               Name of the file relative to the settings.
             </param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="RelativeFileName" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If no extension is specified for <paramref name="RelativeFileName" />, a default
                 <see cref="F:OrdinaSoft.IO.osFileExtension.Xml">.xml</see> extension is used.
               </para>
               <para>
                 If there is an error in the settings file, the settings are ignored and a new
                 settings file is created.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XmlRoot">
            <summary>
               Root of the XML element.
             </summary>
             <remarks>
               This is the XML element that is saved when the <see cref="M:OrdinaSoft.Settings.Save" /> method is called.
               You must update this field by overriding the <b>PrepareSave</b> method.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetLastFiles(System.String,System.Int32)">
            <summary>
               Gets a new list of last files.
             </summary>
             <param name="Name">The name of the list.</param>
             <param name="DefaultMaxNbFiles"></param>
             <param name="DefaultMaxNbFiles">
               Default value for the maximum number of files to keep on the list.
             </param>
             <returns>The list of last files.</returns>
             <remarks>
               The default implementation creates an instance of <see cref="T:OrdinaSoft.SettingsLastFiles" />.
               It can be overriden to have another list.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetLastFiles(System.Xml.Linq.XElement,System.Int32)">
            <summary>
               Gets a list of last files from an XML element.
             </summary>
             <param name="Elmt">The XML element that contains the files.</param>
             <param name="DefaultMaxNbFiles">
               Default value for the maximum number of files to keep on the list.
             </param>
             <returns>The list of last files.</returns>
             <remarks>
               The default implementation creates an instance of <see cref="T:OrdinaSoft.SettingsLastFiles" />.
               It can be overriden to have another list.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.PrepareSave">
            <summary>
               Prepares saving the settings by updating the <see cref="F:OrdinaSoft.Settings.XmlRoot" /> field.
             </summary>
             <remarks>
               <para>
                 <b>Note to inheritors</b>: you must call the base method to be sure that all
                 settings are saved.
               </para>
               <para>This method will add all the values to the <see cref="F:OrdinaSoft.Settings.XmlRoot" /> field.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetDefaultValue(System.String,System.String)">
            <summary>
               Sets a default value for a string.
             </summary>
             <param name="Name">The name of the value to define.</param>
             <param name="Value">The default value.</param>
             <remarks>
               This method will update the store only if a value named <paramref name="Name" /> is
               not already defined.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XElmt_LastFiles">
            <summary>
               Name of the XML element for a list of last files.
             </summary>
             <remarks>
               <para>The name of the element is <b>LastFiles</b>.</para>
               <para>
                 The element must contain an attribute named <see cref="F:OrdinaSoft.Settings.XAttr_Name">Name</see> with
                 the name of the list. The last files are in children elements named
                 <see cref="F:OrdinaSoft.SettingsLastFiles.XElmt_List">LastFiles</see>.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XElmt_Settings">
            <summary>
               Name of the XML element at the root of the settings file.
             </summary>
             <remarks>
               The name of the element is <b>Settings</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XElmt_Value">
            <summary>
               Name of the XML element for a value.
             </summary>
             <remarks>
               <para>The name of the element is <b>Value</b>.</para>
               <para>
                 The element must contain an attribute named <see cref="F:OrdinaSoft.Settings.XAttr_Name">Name</see> with
                 the name of the value. The value itself is the value of the element.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XAttr_Name">
            <summary>
               Name of the XML attribute with a name.
             </summary>
             <remarks>
               <para>The name of the XML attribute is <b>Name</b>.</para>
               <para>
                 This attribute is used with the <see cref="F:OrdinaSoft.Settings.XElmt_Value">Value</see> element.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.XAttr_MaxNbLastFiles">
            <summary>
               Name of the XML attribute with the maximum number of last files to keep.
             </summary>
             <remarks>
               <para>The name of the XML attribute is <b>MaxNbLastFiles</b>.</para>
               <para>
                 This attribute is used with the <see cref="F:OrdinaSoft.Settings.XElmt_Settings">Settings</see> element.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Settings.FileName">
            <summary>
               Name of the file on which the settings are saved.
             </summary>
        </member>
        <member name="P:OrdinaSoft.Settings.LastFilesList(System.String)">
            <summary>
               Gets the list of last files with a specified name.
             </summary>
             <param name="Name">The name of the list to retrieve.</param>
             <value>The list of last files named <paramref name="Name" />.</value>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>This is the default indexed property.</para>
               <para>
                 If there is no list of last files with the specified name, a new list is created,
                 with a capacity of <see cref="P:OrdinaSoft.Settings.MaxNbLastFiles" /> entries, and is inserted into the
                 dictionary.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Settings.MaxNbLastFiles">
            <summary>
               Gets or sets the default maximum number of last files to keep.
             </summary>
             <value>
               The default maximum number of last files to keep.<br />
               Default value is <b>10</b>.
             </value>
             <exception cref="T:System.ArgumentException">
               Setting a new value that is less than or equal to 0.
             </exception>
             <remarks>
               <para>
                 This value is used when a list of last files must be created and we have no maximum
                 number of files for the list.
               </para>
               <para>
                 If the new number of files is less than the actual files number in a list, this
                 list is truincated.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetBoolean(System.String,System.Boolean)">
            <summary>
               Gets a <see cref="T:System.Boolean">Boolean</see> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <param name="DefaultValue">
               Default value if the settings don't contain the value or if the value is not valid.
             </param>
             <returns>
               The <i>Boolean</i> value named <paramref name="Name" />, if it exists and is
               valid;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetDateTime(System.String)">
            <summary>
               Gets a <see cref="T:System.DateTime" /> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <returns>
               The <i>DateTime</i> value named <paramref name="Name" />, if it exists and is
               valid;<br />
               otherwise, <b>null</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetDouble(System.String,System.Double)">
            <summary>
               Gets a <see cref="T:System.Double">Double</see> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <param name="DefaultValue">
               Default value if the settings don't contain the value or if the value is not valid.
             </param>
             <returns>
               The <b>Double</b> value named <paramref name="Name" />, if it exists and is
               valid;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetInt32(System.String,System.Int32)">
            <summary>
               Gets a <see cref="T:System.Int32">32-bit integer</see> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <param name="DefaultValue">
               Default value if the settings don't contain the value or if the value is not valid.
             </param>
             <returns>
               The <b>Int32</b> value named <paramref name="Name" />, if it exists and is
               valid;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetInt64(System.String,System.Int64)">
            <summary>
               Gets a <see cref="T:System.Int64">64-bit integer</see> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <param name="DefaultValue">
               Default value if the settings don't contain the value or if the value is not valid.
             </param>
             <returns>
               The <b>Int64</b> value named <paramref name="Name" />, if it exists and is
               valid;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetString(System.String)">
            <summary>
               Gets a <see cref="T:System.String">String</see> value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <returns>
               The value named <paramref name="Name" />, if it exists;<br />
               otherwise, an empty string.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.GetString(System.String,System.String)">
            <summary>
               Gets a <see cref="T:System.String">String</see> value, with a default value.
             </summary>
             <param name="Name">The name of the value to retrieve.</param>
             <param name="DefaultValue">
               Default value if the settings don't contain the value.
             </param>
             <returns>
               The <b>Double</b> value named <paramref name="Name" />, if it exists;<br />
               otherwise, <paramref name="DefaultValue" />.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <paramref name="Name" /> can contain any char, including spaces, and can be any
               length.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.RemoveValue(System.String)">
            <summary>
               Removes a value.
             </summary>
             <param name="Name">The name of the value to clear.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Name" /> has not a value, this method will do nothing.
               </para>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.Save">
            <summary>
               Saves the settings.
             </summary>
             <exception cref="T:System.IO.IOException">
               An exception has been raised while saving the settings.
             </exception>
             <remarks>
               If there is an error in saving the settings, the old settings are kept.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetBoolean(System.String,System.Boolean)">
            <summary>
               Sets a <see cref="T:System.Boolean">Boolean</see> value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetDateTime(System.String,System.DateTime)">
            <summary>
               Sets a <see cref="T:System.DateTime">DateTime</see> value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetDouble(System.String,System.Double)">
            <summary>
               Sets a <see cref="T:System.Double">Double</see> value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetInt32(System.String,System.Int32)">
            <summary>
               Sets a <see cref="T:System.Int32">Int32</see> value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetInt64(System.String,System.Int64)">
            <summary>
               Sets a <see cref="T:System.Int64">Int64</see> value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Settings.SetString(System.String,System.String)">
            <summary>
               Sets a string value.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="Name" /> can contain any char, including spaces, and can be any
                 length.
               </para>
               <para>
                 If there is already a value named <paramref name="Name" />, its value is replaced,
                 regardless of its type.
               </para>
               <para>
                 If <paramref name="Value" /> is <b>null</b>, the existing value is removed from the
                 values.
               </para>
             </remarks>
        </member>
        <member name="T:OrdinaSoft.SettingsFileInfo">
            <summary>
               Information about a file for the settings.
             </summary>
             <remarks>
               <para>
                 When checking for equality or getting the hash code, we use the
                 <see cref="P:OrdinaSoft.SettingsFileInfo.FileName" /> property, because the files are the same if the file name
                 they represent are the same.<br />
                 In case you're defining a descendant class, you should override the
                 <see cref="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)" /> method to have the files checked correctly
                 for equality.
               </para>
               <para>
                 When converting to / from an XML element, the XML element is named
                 <see cref="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">File</see>, the file name is in an attribute named
                 <see cref="F:OrdinaSoft.SettingsFileInfo.XAttr_FileName">FileName</see> and the display text is in the value of the
                 XML element.<br />
                 If the display text is the same as the name of the file, without path and extension,
                 it will be omitted from the XML element.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.#ctor">
            <summary>
               Initializes an instance of the file information.
             </summary>
             <remarks>
               This constructor is intended to be used in special cases, where the
               <see cref="P:OrdinaSoft.SettingsFileInfo.FileName" /> can be <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.#ctor(System.String)">
            <summary>
               Initializes the information for a file.
             </summary>
             <param name="FileName">Name of the file.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string, contains only white space, or
               contains illegal chars for a path.<br />
               -or- the system could not retrieve the absolute path.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> contains a colon (":") that is not part of a volume
               identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               <paramref name="FileName" />, the absolute path, or both exceed the system-defined
               maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               <para>
                 This constructor does not check whether a file named <paramref name="FileName" />
                 exists.
               </para>
               <para>
                 The <paramref name="FileName" /> will be corrected to include full path
                 information.
               </para>
               <para>
                 The <see cref="P:OrdinaSoft.SettingsFileInfo.DisplayText" /> property will be set to the
                 <paramref name="FileName" />, without any path or extension.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.#ctor(System.String,System.String)">
            <summary>
               Initializes the information for a file, with a text to display.
             </summary>
             <param name="FileName">Name of the file.</param>
             <param name="DisplayText">Text to display to the user. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string, contains only white space, or
               contains illegal chars for a path.<br />
               -or- the system could not retrieve the absolute path.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> contains a colon (":") that is not part of a volume
               identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               <paramref name="FileName" />, the absolute path, or both exceed the system-defined
               maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               <para>
                 This constructor does not check whether a file named <paramref name="FileName" />
                 exists.
               </para>
               <para>
                 The <paramref name="FileName" /> will be corrected to include full path
                 information.
               </para>
               <para>
                 If <paramref name="DisplayText" /> is <b>null</b> or an empty string, it will be
                 replaced by the file name part <paramref name="FileName" /> without any path or
                 extension.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
               Initializes the information for a file, from an XML element.
             </summary>
             <param name="Elmt">An XML element that contains the information.</param>
             <exception cref="T:System.ArgumentException">
               The name of <paramref name="Elmt" /> is not <see cref="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">File</see>.<br />
               -or- the <see cref="F:OrdinaSoft.SettingsFileInfo.XAttr_FileName">FileName</see> attribute of
               <paramref name="Elmt" /> is missing or contains only white space.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Elmt" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               The file name in <paramref name="Elmt" /> contains a colon (":") that is not part of
               a volume identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               The file name in <paramref name="Elmt" />, the absolute path, or both exceed the
               system-defined maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               <para>
                 The XML element must be named <see cref="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">File</see>, the file name must
                 be in an attribute named <see cref="F:OrdinaSoft.SettingsFileInfo.XAttr_FileName">FileName</see> and the display
                 text must be in the value of the XML element.
               </para>
               <para>
                 This constructor does not check whether a file named with the file name in
                 <paramref name="Elmt" /> exists.
               </para>
               <para>
                 If the value of the <paramref name="Elmt" /> is empty or cantains only white space,
                 the display text will be the name of the file, without path and extension.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">
            <summary>
               Name of the XML element with a file information.
             </summary>
             <remarks>
               The name of the element is <b>File</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsFileInfo.XAttr_FileName">
            <summary>
               Name of the XML attribute with the name of the file.
             </summary>
             <remarks>
               The name of the XML attribute is <b>FileName</b>.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.SettingsFileInfo.FileName">
            <summary>
               Gets the name of the file.
             </summary>
             <value>The name of the file.</value>
             <remarks>
               <para>This is an absolute path.</para>
               <para>
                 For the default implementation, intended to be used only for file names, this value
                 can never be <b>null</b>. For descendant classes, it can be <b>true</b>. See the
                 documentation of the descendant class for more information.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.SettingsFileInfo.DisplayText">
            <summary>
               Gets the text to display to the user.
             </summary>
             <value>The text to display to the user.</value>
             <remarks>
               This is the text returned by the <see cref="M:OrdinaSoft.SettingsFileInfo.ToString" /> method.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.op_Equality(OrdinaSoft.SettingsFileInfo,OrdinaSoft.SettingsFileInfo)">
            <summary>
               Indicates whether two information are equal.
             </summary>
             <param name="Info1">The first information to compare. Can be <b>null</b>.</param>
             <param name="Info2">The second information to compare. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Info1" /> and <paramref name="Info2" /> are
               equal;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               To check for equality, this method uses the <see cref="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)" />
               method, if <paramref name="Info1" /> and <paramref name="Info2" /> are not
               <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.op_Inequality(OrdinaSoft.SettingsFileInfo,OrdinaSoft.SettingsFileInfo)">
            <summary>
               Indicates whether two information are different.
             </summary>
             <param name="Info1">The first information to compare. Can be <b>null</b>.</param>
             <param name="Info2">The second information to compare. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Info1" /> and <paramref name="Info2" /> are
               different;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               To check for equality, this method uses the <see cref="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)" />
               method, if <paramref name="Info1" /> and <paramref name="Info2" /> are not
               <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.Equals(System.Object)">
            <summary>
               Indicates whether the current instance is equal to another object.
             </summary>
             <param name="Obj">
               An object to compare with the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Obj" /> is of the <b>SettingsFileInfo</b> type and is
               equal to the current instance;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               To check for equality, this method uses the <see cref="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)" />
               method, if <paramref name="Obj" /> is of the right type and not <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)">
            <summary>
               Indicates whether the current instance is equal to another one.
             </summary>
             <param name="Info">
               Another instance to compare with the current one. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Info" /> is equal to the current instance;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               <para>
                 A descendant class should just override this method, because all equality comparers
                 use it.
               </para>
               <para>
                 In case <paramref name="Info" /> is not <b>null</b>, it is considered equal to the
                 current instance if their <see cref="P:OrdinaSoft.SettingsFileInfo.FileName" /> properties are equal.
               </para>
               <para>
                 This method implements
                 <see cref="T:System.IEquatable`1">IEquatable&lt;SettingsFileInfo></see>.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.Equals(System.Object,System.Object)">
            <summary>
               Indicates whether two object instances are equal.
             </summary>
             <param name="Obj1">The first object to compare. Can be <b>null</b>.</param>
             <param name="Obj2">The second object to compare. Can be <b>null</b>.</param>
             <returns>
               <b>true</b> if <paramref name="Obj1" /> and <paramref name="Obj2" /> are equal;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               In case <paramref name="Obj1" /> and <paramref name="Obj2" /> are not <b>null</b>,
               they are considered equal if they are both of the <b>SettingsFileInfo</b> type and
               the <see cref="M:OrdinaSoft.SettingsFileInfo.Equals(OrdinaSoft.SettingsFileInfo)" /> method returns <b>true</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.GetHashCode">
            <summary>
               Returns the hash code for the file information.
             </summary>
             <returns>The hash code.</returns>
             <remarks>
               As equality is check with the <see cref="P:OrdinaSoft.SettingsFileInfo.FileName" /> property only, this method
               returns the hash code of this property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.ToString">
            <summary>
               Returns a string representation of the file information.
             </summary>
             <returns>A string representation of the file information.</returns>
             <remarks>
               This method returns <see cref="P:OrdinaSoft.SettingsFileInfo.DisplayText" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsFileInfo.ToXElement">
            <summary>
               Returns an XML element with the file information.
             </summary>
             <returns>An XML element with the file information.</returns>
             <remarks>
               The XML element is named <see cref="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">File</see>, the file name is in an
               attribute named <see cref="F:OrdinaSoft.SettingsFileInfo.XAttr_FileName">FileName</see> and the display text is in
               the value of the XML element.<br />
               If the display text is the same as the name of the file, without path and extension,
               it will be omitted from the XML element.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.SettingsLastFiles">
            <summary>
               List of last accessed files for the settings.
             </summary>
             <remarks>
               The files are kept with the last accessed one at the top of the list.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsLastFiles.FileList">
            <summary>
               Internal list of files.
             </summary>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.set_MaxNbFiles(System.Int32)">
            <summary>
               Sets the maximum number of last files to keep in the list.
             </summary>
             <param name="MaxNbFiles">
               The new maximum number of last files to keep in the list.
             </param>
             <exception cref="T:System.ArgumentException">
               <paramref name="MaxNbFiles" /> is less than or equal to 0.
             </exception>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.SettingsLastFiles.MaxNbFiles" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.GetFileInfo(System.Xml.Linq.XElement)">
            <summary>
               Gets the information about a file, from an XML element.
             </summary>
             <param name="Elmt">An XML element with the file information.</param>
             <returns>The file information loaded from <paramref name="Elmt" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Elmt" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               The file name in <paramref name="Elmt" /> contains a colon (":") that is not part of
               a volume identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               The file name in <paramref name="Elmt" />, the absolute path, or both exceed the
               system-defined maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               The base class loads the standard file information. If you want to save more
               information for a file, you need to create new classes based on
               <see cref="T:OrdinaSoft.SettingsFileInfo" /> and this class, and override this method.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.OnListChanged(System.EventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.SettingsLastFiles.ListChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
        </member>
        <member name="F:OrdinaSoft.SettingsLastFiles.XElmt_List">
            <summary>
               Name of the XML element with a list of last files.
             </summary>
             <remarks>
               The name of the element is <b>LastFiles</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsLastFiles.XAttr_MaxNbFiles">
            <summary>
               Name of the XML attribute with the maximum number of files to keep.
             </summary>
             <remarks>
               The name of the XML attribute is <b>MaxNbFiles</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsLastFiles.XAttr_Name">
            <summary>
               Name of the XML attribute with the name of the list of last files.
             </summary>
             <remarks>
               The name of the XML attribute is <b>Name</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.#ctor(System.String,System.Int32)">
            <summary>
               Initializes an empty list of last accessed files.
             </summary>
             <param name="Name">The name of the list.</param>
             <param name="MaxNbFiles">Maximum number of files to keep on the list.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="MaxNbFiles" /> is less than or equal to 0.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.#ctor(System.String,System.Xml.Linq.XElement,System.Int32)">
            <summary>
               Initializes a list of last accessed files from an XML element.
             </summary>
             <param name="Name">The name of the list. Can be <b>null</b>.</param>
             <param name="Elmt">An XML element that contains the files.</param>
             <param name="DefaultMaxNbFiles">
               Default value for the maximum number of files to keep on the list.
             </param>
             <exception cref="T:System.ArgumentException">
               The name of the <paramref name="Elmt" /> XML element is not
               <see cref="F:OrdinaSoft.SettingsLastFiles.XElmt_List">LastFiles</see>.<br />
               -or-<br />
               The name of the list. loaded from <paramref name="Elmt" /> is not the same as
               <paramref name="Name" />, if <paramref name="Name" /> is not <b>null</b>.<br />
               -or-<br />
               <paramref name="DefaultMaxNbFiles" /> is less than or equal to 0.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b> and there is no attribute named
               <see cref="F:OrdinaSoft.SettingsLastFiles.XAttr_Name">Name</see> in <paramref name="Elmt" />;<br />
               -or-<br />
               <paramref name="Elmt" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If the <see cref="F:OrdinaSoft.SettingsLastFiles.XAttr_MaxNbFiles">MaxNbFiles</see> attribute of
                 <paramref name="Elmt" /> is not specified or the value of the attribute is not a
                 valid integer number or has not a valid value, the maximum number of files is set
                 to <paramref name="DefaultMaxNbFiles" />.
               </para>
               <para>
                 If <paramref name="Name" /> is <b>null</b> and there is no attribute named
                 <see cref="F:OrdinaSoft.SettingsLastFiles.XAttr_Name">Name</see> in <paramref name="Elmt" />, an
                 <see cref="T:System.ArgumentNullException">ArgumentNullException</see> exception is
                 raised.<br />
                 If <paramref name="Name" /> is not <b>null</b> and there is an attribute named
                 <see cref="F:OrdinaSoft.SettingsLastFiles.XAttr_Name">Name</see> in <paramref name="Elmt" />, the names are
                 compared and an <see cref="T:System.ArgumentException">ArgumentException</see> exception
                 is raised if they are different.
               </para>
               <para>
                 This constructor loads the attributes of <paramref name="Elmt" /> that are defined
                 and its children element named <see cref="F:OrdinaSoft.SettingsFileInfo.XElmt_Main">File</see>.
                 The other attributes, the other children elements and the content areignored.
               </para>
               <para>
                 If <paramref name="Elmt" /> contains an invalid file definition, this file
                 definition is ignored.
               </para>
             </remarks>
        </member>
        <member name="F:OrdinaSoft.SettingsLastFiles.Name">
            <summary>
               The name of the list.
             </summary>
        </member>
        <member name="P:OrdinaSoft.SettingsLastFiles.Count">
            <summary>
               Gets the number of files that are currently on the list.
             </summary>
             <value>The number of files.</value>
        </member>
        <member name="P:OrdinaSoft.SettingsLastFiles.FileInfo(System.Int32)">
            <summary>
               Gets the file information at the specified index in the list.
             </summary>
             <param name="ix">Index of the file information to retrieve.</param>
             <value>The file information at index <paramref name="ix" /></value>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than <b>0</b>;<br />
               -or-<br />
               <paramref name="ix" /> is greater than or equal to <see cref="P:OrdinaSoft.SettingsLastFiles.MaxNbFiles" />.
             </exception>
             <remarks>
               This is the default indexed property.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.SettingsLastFiles.MaxNbFiles">
            <summary>
               Gets or sets the maximum number of files that this instance keeps,
             </summary>
             <value>The maximum number of files.</value>
             <exception cref="T:System.ArgumentException">
               Setting a new value that is less than or equal to 0.
             </exception>
             <remarks>
               If the new number of files is less than the actual files number, the list is
               truncated.
             </remarks>
        </member>
        <member name="E:OrdinaSoft.SettingsLastFiles.ListChanged">
            <summary>
               Occurs when the list of files has changed.
             </summary>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.Add(OrdinaSoft.SettingsFileInfo)">
            <summary>
               Adds a file information to the list.
             </summary>
             <param name="FileInfo">File information to add.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               If the file is already in the list, it is moved to the top of it.<br />
               Otherwise, if the list already contains <see cref="P:OrdinaSoft.SettingsLastFiles.MaxNbFiles" /> files, the last
               filte is removed. Then, the new file is inserted at the top of the list.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.Add(System.String)">
            <summary>
               Adds a file, given by its name, to the list
             </summary>
             <param name="FileName">File name.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string, contains only white space, or
               contains illegal chars for a path.<br />
               -or-<br />
               The system could not retrieve the absolute path.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> contains a colon (":") that is not part of a volume
               identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               <paramref name="FileName" />, the absolute path, or both exceed the system-defined
               maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               <para>
                 This method does not check whether a file named <paramref name="FileName" />
                 exists.
               </para>
               <para>
                 The <paramref name="FileName" /> is corrected to include full path information.
               </para>
               <para>
                 The display text is set to the <paramref name="FileName" />, without any path or
                 extension.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.Add(System.String,System.String)">
            <summary>
               Adds a file, given by its name and display text, to the list
             </summary>
             <param name="FileName">File name.</param>
             <param name="DisplayText">Text to display. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string, contains only white space, or
               contains illegal chars for a path.<br />
               -or-<br />
               The system could not retrieve the absolute path.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> contains a colon (":") that is not part of a volume
               identifier (for example, "c:\").
             </exception>
             <exception cref="T:System.IO.PathTooLongException">
               <paramref name="FileName" />, the absolute path, or both exceed the system-defined
               maximum length.<br />
               For example, on Windows-based platforms, paths must be less than 248 characters, and
               file names must be less than 260 characters.
             </exception>
             <remarks>
               <para>
                 This method does not check whether a file named <paramref name="FileName" />
                 exists.
               </para>
               <para>
                 The <paramref name="FileName" /> is corrected to include full path information.
                 information.
               </para>
               <para>
                 If <paramref name="DisplayText" /> is <b>null</b> or an empty string, it is
                 replaced by the file name part <paramref name="FileName" /> without any path or
                 extension.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.Remove(System.String)">
            <summary>
               Removes a file name from the list.
             </summary>
             <param name="FileName">The name of the file to remove.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.
             </exception>
             <remarks>
               This method does not check whether a file named <paramref name="FileName" /> exists.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.SettingsLastFiles.ToXElement">
            <summary>
               Returns an XML element with the list of last files.
             </summary>
             <returns>An XML element with the list of last files.</returns>
             <remarks>
               The files are exported with the more recently accessed file in the first position.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvCodec">
            <summary>
               Base class for the <see cref="T:OrdinaSoft.Csv.CsvReader">CsvReader</see> and
               <see cref="T:OrdinaSoft.Csv.CsvWriter">CsvWriter</see> classes.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvReader" />
             <seealso cref="T:OrdinaSoft.Csv.CsvWriter" />
        </member>
        <member name="F:OrdinaSoft.Csv.CsvCodec.SeparatorStr">
            <summary>
               The string used as the separator between two values.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvCodec.QuoteChar">
            <summary>
               The char used to quote values that contains special chars, or all values.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
        </member>
        <member name="F:OrdinaSoft.Csv.CsvCodec.EscapeChar">
            <summary>
               The char used to escape special chars.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvCodec.QuoteInValue">
            <summary>
               Indicates how a quote in a value is managed.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvCodec.#ctor(OrdinaSoft.Csv.CsvOptions)">
            <summary>
               Initializes an instance of the class.
             </summary>
             <param name="Options">The CSV options.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Options" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvOptions">
            <summary>
               Options that are common to the <b>CSV</b> reader and writer.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
             <seealso cref="T:OrdinaSoft.Csv.CsvReader" />
             <seealso cref="T:OrdinaSoft.Csv.CsvWriter" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvOptions.InitForExcel">
            <summary>
               Returns common options that are compatible with an <b>Excel</b> CSV file.
             </summary>
             <remarks>
               The <see cref="F:OrdinaSoft.Csv.CsvOptions.SeparatorStr">default field separator</see> depends on the Windows
               settings. If the separator is fixed, you must change its value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvOptions.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvOptions.SeparatorStr">
            <summary>
               The string used as the separator between two values.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvOptions.QuoteChar">
            <summary>
               The char used to quote values that contains special chars, or all values.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
        </member>
        <member name="F:OrdinaSoft.Csv.CsvOptions.EscapeChar">
            <summary>
               The char used to escape special chars.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvOptions.QuoteInValue">
            <summary>
               Indicates how a quote in a value is managed.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvQuote">
            <summary>
               Indicates how the <b>CSV</b> values are quoted.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvQuote.IfNeeded">
            <summary>
               <para>The values are quoted only if needed.</para>
               <para>
                 The quotes are needed when:
                 <list type="bullet">
                   <item>
                     The value begins with the <see cref="F:OrdinaSoft.Csv.CsvOptions.QuoteChar">quote char</see>.
                   </item>
                   <item>The value begins with a space.</item>
                   <item>The value ends with a space.</item>
                   <item>
                     The value contains a <b>CR</b> (carriage return) or a <b>LF</b> (line feed)
                     char.
                   </item>
                   <item>
                     The value contains the
                     <see cref="F:OrdinaSoft.Csv.CsvOptions.SeparatorStr">separator string</see>.
                   </item>
                 </list>
               </para>
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvQuote.OnlyStrings">
            <summary>
               Only the strings are quoted.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvQuote.AllValues">
            <summary>
               All the values are quoted.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvQuoteInValue">
            <summary>
               Indicates how a quote char in a value is managed.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvQuoteInValue.Repeated">
            <summary>
               The quote is repeated.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvQuoteInValue.Escaped">
            <summary>
               The quote is escaped with the <see cref="F:OrdinaSoft.Csv.CsvOptions.EscapeChar">escape char</see>.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvReader">
            <summary>
               Reader for a <b>CSV</b> file.
             </summary>
             <remarks>
               After using the CSV reader, you must call <see cref="M:OrdinaSoft.Csv.CsvReader.Close" /> or
               <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" /> to free the resources used.
             </remarks>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
             <seealso cref="T:OrdinaSoft.Csv.CsvReaderOptions" />
             <seealso cref="T:OrdinaSoft.Csv.CsvWriter" />
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._CurrentRowRemaining">
            <summary>
               Remaining of the current input row.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._EmptyEndItemUsed">
            <summary>
               Indicates whether an empty column at the end of an entry has been retrieved.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._NbColumns">
            <summary>
               The maximum number of columns.
             </summary>
             <remarks>
               Contains the maximum number of columns encountered in the file and is used to
               allocate a buffer of the right size when reading the next entry.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._QuoteStrDbl">
            <summary>
               A double quote char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._Reader">
            <summary>
               The reader to read the input data.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvReader._SeparatorFirstChar">
            <summary>
               The first separator char.
             </summary>
             <remarks>
               The value is a char with code <b>0</b> if there is no separator char.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.ReadNextRow">
            <summary>
               Reads the next row from the source stream.
             </summary>
             <returns>
               <b>false</b> if we are at the end of the source stream;<br />
               <b>true</b> otherwise.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
               Optionally releases the managed resources of the reader.
             </summary>
             <param name="Disposing">
               <b>true</b> to release both managed and unmanaged resources;<br />
               <b>false</b> to release only unmanaged resources.
             </param>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.Dispose">
            <summary>
               Releases the resources used by the reader and the underlying stream object.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.#ctor(System.IO.Stream,OrdinaSoft.Csv.CsvReaderOptions)">
            <summary>
               Initializes a <b>CSV</b> reader to read from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="Stream" /> is not readable.<br />
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <remarks>
               After using the CSV reader, you must call <see cref="M:OrdinaSoft.Csv.CsvReader.Close" /> or
               <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" /> to free the resources used.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.#ctor(System.IO.TextReader,OrdinaSoft.Csv.CsvReaderOptions)">
            <summary>
               Initializes a <b>CSV</b> reader to read from a text stream.
             </summary>
             <param name="Stream">The text stream.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <remarks>
               After using the CSV reader, you must call <see cref="M:OrdinaSoft.Csv.CsvReader.Close" /> or
               <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" /> to free the resources used.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.#ctor(System.String,OrdinaSoft.Csv.CsvReaderOptions)">
            <summary>
               Initializes a <b>CSV</b> reader to read from a file.
             </summary>
             <param name="FileName">The name of the file.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
               The file cannot be found.
             </exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">
               <paramref name="FileName" /> is invalid, such as being on an unmapped drive.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> includes an incorrect or invalid syntax for file name,
               directory name, or volume label.
             </exception>
             <remarks>
               <para>
                 After using the CSV reader, you must call <see cref="M:OrdinaSoft.Csv.CsvReader.Close" /> or
                 <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" /> to free the resources used.
               </para>
               <para>
                 <paramref name="FileName" /> can be a file name, including a file on a Universal
                 Naming Convention (UNC) share.
               </para>
               <para>
                 <paramref name="FileName" /> is not required to be a file stored on disk; it can be
                 any part of a system that supports access using streams.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.#ctor(System.String,System.Text.Encoding,OrdinaSoft.Csv.CsvReaderOptions)">
            <summary>
               Initializes a <b>CSV</b> reader to read from a file, using a specified encoding.
             </summary>
             <param name="FileName">The name of the file.</param>
             <param name="Encoding">The encoding of the file.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Encoding" /> is <b>null</b>.
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
               The file cannot be found.
             </exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">
               <paramref name="FileName" /> is invalid, such as being on an unmapped drive.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> includes an incorrect or invalid syntax for file name,
               directory name, or volume label.
             </exception>
             <remarks>
               <para>
                 After using the CSV reader, you must call <see cref="M:OrdinaSoft.Csv.CsvReader.Close" /> or
                 <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" /> to free the resources used.
               </para>
               <para>
                 <paramref name="FileName" /> can be a file name, including a file on a Universal
                 Naming Convention (UNC) share.
               </para>
               <para>
                 <paramref name="FileName" /> is not required to be a file stored on disk; it can be
                 any part of a system that supports access using streams.
               </para>
               <para>
                 This constructor initializes the encoding as specified by the
                 <paramref name="Encoding" /> parameter, and the internal buffer size to 1024 bytes.
                 The CsvReader object attempts to detect the encoding by looking at the first four
                 bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode,
                 big-endian Unicode, little-endian UTF-32, and big-endian UTF-32 text if the file
                 starts with the appropriate byte order marks. Otherwise, the user-provided encoding
                 is used.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Csv.CsvReader.CurrentRow">
            <summary>
               Gets the row that is currently processed.
             </summary>
             <value>The row.</value>
        </member>
        <member name="P:OrdinaSoft.Csv.CsvReader.NoColumn">
            <summary>
               Gets the number of the current column.
             </summary>
             <value>The column number.</value>
        </member>
        <member name="P:OrdinaSoft.Csv.CsvReader.NoRow">
            <summary>
               Gets the number of the current row.
             </summary>
             <value>The row number.</value>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.Close">
            <summary>
               Closes the reader and the underlying stream object.
             </summary>
             <remarks>
               This method does the same thing as <see cref="M:OrdinaSoft.Csv.CsvReader.Dispose" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.NextRow">
            <summary>
               Skips to next row from the source.
             </summary>
             <returns>
               <b>true</b> if there are still data;<br />
               <b>false</b> if we are at end of the data.
             </returns>
             <remarks>
               Thie method skips the data that remains on the current row, if any.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.ReadRow">
            <summary>
               Reads all the remaining columns in the current row.
             </summary>
             <returns>
               <b>null</b> if we are at the end of the data;<br />
               otherwise, a string array containing an entry for each column remaining on the row.
             </returns>
             <exception cref="T:System.FormatException">
               An end of file is encountered before the end of a quoted string;<br />
               -or-<br />
               A string continues after its end quote;<br />
               -or-<br />
               A bad escaped char is encountered.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReader.ReadValue">
            <summary>
               Reads the value of the next column.
             </summary>
             <returns>
               <b>null</b> if we are at the end of the row or the end of the data;<br />
               otherwise, a string containing the data of the column.
             </returns>
             <exception cref="T:System.FormatException">
               An end of file is encountered before the end of a quoted string;<br />
               -or-<br />
               A string continues after its end quote;<br />
               -or-<br />
               A bad escaped char is encountered.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvReaderOptions">
            <summary>
               Options for the <see cref="T:OrdinaSoft.Csv.CsvReader" />.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
             <seealso cref="T:OrdinaSoft.Csv.CsvReader" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReaderOptions.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvReaderOptions.ForExcel">
            <summary>
               Initializes reader options that are compatible with an <b>Excel</b> CSV file.
             </summary>
             <returns>The options.</returns>
             <remarks>
               The <see cref="F:OrdinaSoft.Csv.CsvOptions.SeparatorStr">default field separator</see> depends on the Windows
               settings. If the separator is fixed, you must change its value.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvWriter">
            <summary>
               Writer for a <b>CSV</b> file.
             </summary>
             <remarks>
               After using the CSV Writer, you must call <see cref="M:OrdinaSoft.Csv.CsvWriter.Close" /> or
               <see cref="M:OrdinaSoft.Csv.CsvWriter.Dispose" /> to free the resources used.
             </remarks>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
             <seealso cref="T:OrdinaSoft.Csv.CsvReader" />
             <seealso cref="T:OrdinaSoft.Csv.CsvWriterOptions" />
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._Columns">
            <summary>
               The text for the columns of a row.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._DateFormat">
            <summary>
               Indicates the format to use when exporting a date.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._DateTimeFormat">
            <summary>
               Indicates the format to use when exporting a date and time.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._DoubleQuoteStr">
            <summary>
               A double quote char, for an empty string.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._EscapeStr">
            <summary>
               The escape char, as a <b>String</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._EscapeStrDbl">
            <summary>
               A double escape char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._QuoteOption">
            <summary>
               Indicates how the values are quoted.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._QuoteStr">
            <summary>
               <see cref="F:OrdinaSoft.Csv.CsvOptions.QuoteChar">CsvOptions.QuoteChar</see> char, as a string.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._ReplaceQuote">
            <summary>
               The string to output when there is a quote char in a string.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._TimeFormat">
            <summary>
               Indicates the format to use when exporting a time.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._Write0AsEmpty">
            <summary>
               Indicates whether a <i>0</i> integer value must be written as an empty string.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._WriteEmptyColumns">
            <summary>
               Indicates if we must write empty columns.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriter._Writer">
            <summary>
               To write to the output stream.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.QuoteAndWrite(System.String)">
            <summary>
               Quotes a string and writes it.
             </summary>
             <param name="Text">The string.</param>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteRawText(System.String)">
            <summary>
               Writes a string without processing it.
             </summary>
             <param name="Text">The string. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Dispose(System.Boolean)">
            <summary>
               Optionally releases the managed resources of the writer.
             </summary>
             <param name="Disposing">
               <b>true</b> to release both managed and unmanaged resources;<br />
               <b>false</b> to release only unmanaged resources.
             </param>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Dispose">
            <summary>
               Releases the resources used by the writer and the underlying stream object.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteNotString(System.String)">
            <summary>
               Writes a string representation of a value that is not a string.
             </summary>
             <param name="Text">The string representation.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.#ctor(System.IO.TextWriter,OrdinaSoft.Csv.CsvWriterOptions)">
            <summary>
               Initializes a <b>CSV</b> writer to write to a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <param name="Options">The Options for the CSV data.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <remarks>
               After using the CSV writer, you must call <see cref="M:OrdinaSoft.Csv.CsvWriter.Close" /> or
               <see cref="M:OrdinaSoft.Csv.CsvWriter.Dispose" /> to free the resources used.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.#ctor(System.String,OrdinaSoft.Csv.CsvWriterOptions)">
            <summary>
               Initializes a <b>CSV</b> writer to write to a file.
             </summary>
             <param name="FileName">The name of the file.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
               The file cannot be found.
             </exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">
               <paramref name="FileName" /> is invalid, such as being on an unmapped drive.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> includes an incorrect or invalid syntax for file name,
               directory name, or volume label.
             </exception>
             <remarks>
               <para>
                 After using the CSV writer, you must call <see cref="M:OrdinaSoft.Csv.CsvWriter.Close" /> or
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.Dispose" /> to free the resources used.
               </para>
               <para>
                 <paramref name="FileName" /> can be a file name, including a file on a Universal
                 Naming Convention (UNC) share.
               </para>
               <para>
                 <paramref name="FileName" /> is not required to be a file stored on disk; it can be
                 any part of a system that supports access using streams.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.#ctor(System.String,System.Text.Encoding,OrdinaSoft.Csv.CsvWriterOptions)">
            <summary>
               Initializes a <b>CSV</b> writer to write to a file.
             </summary>
             <param name="FileName">The name of the file.</param>
             <param name="Encoding">The encoding of the file.</param>
             <param name="Options">The options for the CSV data.</param>
             <exception cref="T:System.ArgumentException">
               <paramref name="FileName" /> is an empty string.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="FileName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Encoding" /> is <b>null</b>.
               -or-<br />
               <paramref name="Options" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
               The file cannot be found.
             </exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">
               <paramref name="FileName" /> is invalid, such as being on an unmapped drive.
             </exception>
             <exception cref="T:System.NotSupportedException">
               <paramref name="FileName" /> includes an incorrect or invalid syntax for file name,
               directory name, or volume label.
             </exception>
             <remarks>
               <para>
                 After using the CSV writer, you must call <see cref="M:OrdinaSoft.Csv.CsvWriter.Close" /> or
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.Dispose" /> to free the resources used.
               </para>
               <para>
                 <paramref name="FileName" /> can be a file name, including a file on a Universal
                 Naming Convention (UNC) share.
               </para>
               <para>
                 <paramref name="FileName" /> is not required to be a file stored on disk; it can be
                 any part of a system that supports access using streams.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Close">
            <summary>
               Closes the writer and the underlying stream object.
             </summary>
             <remarks>
               This method does the same thing as <see cref="M:OrdinaSoft.Csv.CsvWriter.Dispose" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Flush">
            <summary>
               Flushes the internal buffer.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.Object)">
            <summary>
               Writes data in a column.
             </summary>
             <param name="Data">The data to write. Can be <b>null</b>.</param>
             <remarks>
               <para>
                 If <paramref name="Data" /> is <b>null</b>, an empty column is written.
               </para>
               <para>
                 The output format depends on the type of <paramref name="Data" />, if
                 <paramref name="Data" /> is of unmanaged data, its
                 <see cref="M:System.Object.ToString">ToString</see> method is called and the result string
                 is written.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.String)">
            <summary>
               Writes a string.
             </summary>
             <param name="Text">The string. Can be <b>null</b>.</param>
             <remarks>
               If <paramref name="Text" /> is <b>null</b>, an empty string is written.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.String,System.String)">
            <summary>
               Writes two strings.
             </summary>
             <param name="Text1">The first string. Can be <b>null</b>.</param>
             <param name="Text2">The second string. Can be <b>null</b>.</param>
             <remarks>
               If one of the strings is <b>null</b>, an empty string is written for it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.String,System.String,System.String)">
            <summary>
               Writes three strings.
             </summary>
             <param name="Text1">The first string. Can be <b>null</b>.</param>
             <param name="Text2">The second string. Can be <b>null</b>.</param>
             <param name="Text3">The third string. Can be <b>null</b>.</param>
             <remarks>
               If one of the strings is <b>null</b>, an empty string is written for it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.String,System.String,System.String,System.String)">
            <summary>
               Writes four strings.
             </summary>
             <param name="Text1">The first string. Can be <b>null</b>.</param>
             <param name="Text2">The second string. Can be <b>null</b>.</param>
             <param name="Text3">The third string. Can be <b>null</b>.</param>
             <param name="Text4">The fourth string. Can be <b>null</b>.</param>
             <remarks>
               If one of the strings is <b>null</b>, an empty string is written for it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.String[])">
            <summary>
               Writes many strings.
             </summary>
             <param name="Texts">The strings.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Texts" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the strings in <paramref name="Texts" /> is <b>null</b>, an empty string
               is written for it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
               Writes many strings.
             </summary>
             <param name="Texts">The strings.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Texts" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the strings in <paramref name="Texts" /> is <b>null</b>, an empty string
               is written for it.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.Int32)">
            <summary>
               Writes a 32-bit integer number.
             </summary>
             <param name="Nb">The number.</param>
             <remarks>
               If the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.Write0AsEmpty">Write0AsEmpty</see> field of the
               options is <b>true</b> and <paramref name="Nb" /> is 0, an empty string is written.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.Int64)">
            <summary>
               Writes a 64-bit integer number.
             </summary>
             <param name="Nb">The number.</param>
             <remarks>
               If the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.Write0AsEmpty">Write0AsEmpty</see> field of the
               options is <b>true</b> and <paramref name="Nb" /> is 0, an empty string is written.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.Double)">
            <summary>
               Writes a double-precision floating-point number.
             </summary>
             <param name="Nb">The number.</param>
             <remarks>
               If the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.Write0AsEmpty">Write0AsEmpty</see> field of the
               options is <b>true</b> and <paramref name="Nb" /> is 0, an empty string is written.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime)">
            <summary>
               Writes a date and time value.
             </summary>
             <param name="DT">The date and time.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The date and time is outside the range of dates supported by the calendar.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see>
               field of the options is 1, and it is not one of the format specifier characters
               defined for <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see> field of the
               options does not contain a valid custom format pattern.
             </exception>
             <remarks>
               <para>
                 This method uses the
                 <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see> field of the
                 options for the output format.
               </para>
               <para>
                 If you only need to output the date part, you can use the
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" /> method. For the time part only, there is the
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" /> method.
               </para>
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime,System.IFormatProvider)">
            <summary>
               Writes a date and time value, using a specified format provider.
             </summary>
             <param name="DT">The date and time.</param>
             <param name="Provider">
               An object that supplies culture-specific formatting information.
             </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The date and time is outside the range of dates supported by the calendar used by
               <paramref name="Provider" />.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see>
               field of the options is 1, and it is not one of the format specifier characters
               defined for <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see> field of the
               options does not contain a valid custom format pattern.
             </exception>
             <remarks>
               <para>
                 This method uses the
                 <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">DateTimeFormat</see> field of the
                 options for the output format.
               </para>
               <para>
                 If you only need to output the date part, you can use the
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" /> method. For the time part only, there is the
                 <see cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" /> method.
               </para>
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)">
            <summary>
               Writes a date and time value as a date only.
             </summary>
             <param name="DT">The date.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The date is outside the range of dates supported by the calendar.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field of
               the options is 1, and it is not one of the format specifier characters defined for
               <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field of the options
               does not contain a valid custom format pattern.
             </exception>
             <remarks>
               This method uses the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field
               of the options for the output format.
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime,System.IFormatProvider)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime,System.IFormatProvider)">
            <summary>
               Writes a date and time value as a date only, using a specified format provider.
             </summary>
             <param name="DT">The date.</param>
             <param name="Provider">
               An object that supplies culture-specific formatting information.
             </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The date is outside the range of dates supported by the calendar used by
               <paramref name="Provider" />.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field of
               the options is 1, and it is not one of the format specifier characters defined for
               <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field of the options
               does not contain a valid custom format pattern.
             </exception>
             <remarks>
               This method uses the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">DateFormat</see> field
               of the options for the output format.
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime,System.IFormatProvider)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime,System.IFormatProvider)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)">
            <summary>
               Writes a date and time value as a time only.
             </summary>
             <param name="DT">The time.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="DT" /> is outside the range of dates supported by the calendar.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field of
               the options is 1, and it is not one of the format specifier characters defined for
               <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field of the options
               does not contain a valid custom format pattern.
             </exception>
             <remarks>
               This method uses the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field
               of the options for the output format.
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime,System.IFormatProvider)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime,System.IFormatProvider)">
            <summary>
               Writes a date and time value as a time only, using a specified culture.
             </summary>
             <param name="DT">The time.</param>
             <param name="Provider">The provider for the format.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="DT" /> is outside the range of dates supported by the calendar used
               by <paramref name="Provider" />.
             </exception>
             <exception cref="T:System.FormatException">
               The length of the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field of
               the options is 1, and it is not one of the format specifier characters defined for
               <see cref="T:System.Globalization.DateTimeFormatInfo">DateTimeFormatInfo</see>.<br />
               -or-<br />
               The <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field of the options
               does not contain a valid custom format pattern.
             </exception>
             <remarks>
               This method uses the <see cref="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">TimeFormat</see> field
               of the options for the output format.
             </remarks>
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.Write(System.DateTime)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsDate(System.DateTime,System.IFormatProvider)" />
             <seealso cref="M:OrdinaSoft.Csv.CsvWriter.WriteAsTime(System.DateTime)" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteComment(System.String)">
            <summary>
               Writes a comment.
             </summary>
             <param name="Text">The text of the comment.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
             <remarks>
               The comment is written after a semicolon, in its own line. If a data record is
               pending it is written before the comment.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteEmpty">
            <summary>
               Writes an empty column.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteEmpty(System.Int32)">
            <summary>
               Writes multiple empty columns.
             </summary>
             <param name="Nb">The number of empty columns to write.</param>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteEndOfRecord">
            <summary>
               Writes an end of record.
             </summary>
             <remarks>
               An end of record should be written after the last record, to have it written to the
               <b>CSV</b> file.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriter.WriteHeader(System.String)">
            <summary>
               Writes a header.
             </summary>
             <param name="Text">The header text.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
             <remarks>
               The text of the header is written between square brackets, in its own line. If a data
               record is pending it is written before the header.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Csv.CsvWriterOptions">
            <summary>
               Options for the <see cref="T:OrdinaSoft.Csv.CsvWriter">CSV writer</see>.
             </summary>
             <seealso cref="T:OrdinaSoft.Csv.CsvQuote" />
             <seealso cref="T:OrdinaSoft.Csv.CsvQuoteInValue" />
             <seealso cref="T:OrdinaSoft.Csv.CsvWriter" />
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriterOptions.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.DateFormat">
            <summary>
               Indicates the format to use when exporting a date.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.DateTimeFormat">
            <summary>
               Indicates the format to use when exporting a date and time.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.QuoteOption">
            <summary>
               Indicates how the values are quoted.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.TimeFormat">
            <summary>
               Indicates the format to use when exporting a time.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.Write0AsEmpty">
            <summary>
               Indicates whether a <i>0</i> integer value must be written as an empty string.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Csv.CsvWriterOptions.WriteEmptyColumns">
            <summary>
               Indicates whether we must write empty columns at the end of a line.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Csv.CsvWriterOptions.ForExcel">
            <summary>
               Returns write options that are compatible with an <b>Excel</b> CSV file.
             </summary>
             <returns>The options.</returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonArrayValue">
            <summary>
               JSON value that contains an array of values.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonArrayValue.List">
            <summary>
               The internal list.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.#ctor(System.String)">
            <summary>
               Initializes a JSON array value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonArrayValue.Count">
            <summary>
               Gets the number of values in the array.
             </summary>
             <value>The number of values.</value>
        </member>
        <member name="P:OrdinaSoft.Json.JsonArrayValue.Value(System.Int32)">
            <summary>
               Gets the value at a specified index.
             </summary>
             <param name="ix">The index of the value.</param>
             <value>The value at the specified index.</value>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than 0, or greater than or equal to
               <see cref="P:OrdinaSoft.Json.JsonArrayValue.Count" />.
             </exception>
             <remarks>
               This is the default indexed property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.Int32)">
            <summary>
               Adds a 32-bit integer value to the array.
             </summary>
             <param name="Value">The value.</param>
             <remarks>
               The value will have no name.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.String,System.Int32)">
            <summary>
               Adds a 32-bit integer value with a name to the array.
             </summary>
             <param name="Name">The name of the value. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This method doesn't check whether <paramref name="Name" /> is a valid name for a JSON
               value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
               Adds 32-bit integer values to the array.
             </summary>
             <param name="Values">The values. Can be <b>null</b>.</param>
             <remarks>
               The values will have no name.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.Int32[])">
            <summary>
               Adds 32-bit integer values with a name to the array.
             </summary>
             <param name="Values">The values.</param>
             <remarks>
               The values will have no name.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.String)">
            <summary>
               Adds a string value to the array.
             </summary>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <remarks>
               The value will have no name.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.String,System.String)">
            <summary>
               Adds a string value with a name to the array.
             </summary>
             <param name="Name">The name of the value. Can be <b>null</b>.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <remarks>
               This method doesn't check whether <paramref name="Name" /> is a valid name for a JSON
               value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
               Adds string values to the array.
             </summary>
             <param name="Values">The values. Can be <b>null</b>.</param>
             <remarks>
               <para>The values will have no name.</para>
               <para>A value can be <b>null</b>.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(System.String[])">
            <summary>
               Adds string values with a name to the array.
             </summary>
             <param name="Values">The values.</param>
             <remarks>
               <para>The values will have no name.</para>
               <para>A value can be <b>null</b>.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds a value to the array.
             </summary>
             <param name="Value">The value. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds two values to the array.
             </summary>
             <param name="Value1">The first value. Can be <b>null</b>.</param>
             <param name="Value2">The second value. Can be <b>null</b>.</param>
        </member>
        <member name="M:OrdinaSoft.Json.JsonArrayValue.Add(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds three values to the array.
             </summary>
             <param name="Value1">The first value. Can be <b>null</b>.</param>
             <param name="Value2">The second value. Can be <b>null</b>.</param>
             <param name="Value3">The third value. Can be <b>null</b>.</param>
        </member>
        <member name="T:OrdinaSoft.Json.JsonBooleanValue">
            <summary>
               JSON value that is a <i>Boolean</i>.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonBooleanValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonBooleanValue.#ctor(System.String,System.Boolean)">
            <summary>
               Initializes a JSON value with a <i>Boolean</i> value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonBooleanValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="T:OrdinaSoft.Json.JsonDateTimeValue">
            <summary>
               JSON value that is a date and time.
             </summary>
             <remarks>
               This class uses the
               <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format for the date and
               time, but doesn't include fractions of seconds.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDateTimeValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="F:OrdinaSoft.Json.JsonDateTimeValue.FormatString">
            <summary>
               The format string for a JSON date and time.
             </summary>
             <remarks>
               The format is <b>yyyy\-MM\-dd\THH\:mm\:ssK</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDateTimeValue.#ctor(System.String,System.DateTime)">
            <summary>
               Initializes a JSON value with a date and time value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonDateTimeValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="T:OrdinaSoft.Json.JsonDateValue">
            <summary>
               JSON value that is a date.
             </summary>
             <remarks>
               This class uses the
               <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format for the date and
               time, but includes only the date part.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDateValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="F:OrdinaSoft.Json.JsonDateValue.FormatString">
            <summary>
               The format string for a JSON date.
             </summary>
             <remarks>
               The format is <b>yyyy\-MM\-dd</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDateValue.#ctor(System.String,System.DateTime)">
            <summary>
               Initializes a JSON value with a date and time value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonDateValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="T:OrdinaSoft.Json.JsonDoubleValue">
            <summary>
               JSON value that is a <i>Double</i> floating-point number.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDoubleValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonDoubleValue.#ctor(System.String,System.Double)">
            <summary>
               Initializes a JSON value with a <i>Double</i> value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonDoubleValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="T:OrdinaSoft.Json.JsonInt32Value">
            <summary>
               JSON value that is a 32-bit integer.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.#ctor(System.String,System.Int32)">
            <summary>
               Initializes a JSON value with a 32-bit integer value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON item.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonInt32Value.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Int32">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to an <i>Int32</i>.
             </summary>
             <param name="Value">The <i>JsonInt32Value</i> value to cast.</param>
             <returns>An <i>Int32</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.OverflowException">
               The value of <paramref name="Value" /> is less than <see cref="F:System.Int32.MinValue" /> or
               greater than <see cref="F:System.Int32.MaxValue" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Nullable{System.Int32}">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to a <i>Nullable&lt;Int32&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt32Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Int32&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Int64">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to an <i>Int64</i>.
             </summary>
             <param name="Value">The <i>JsonInt32Value</i> value to cast.</param>
             <returns>An <i>Int64</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Nullable{System.Int64}">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to a <i>Nullable&lt;Int64&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt32Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Int64&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Double">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to a <i>Double</i>.
             </summary>
             <param name="Value">The <i>JsonInt32Value</i> value to cast.</param>
             <returns>A <i>Double</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.Nullable{System.Double}">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to a <i>Nullable&lt;Double&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt32Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Double&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt32Value.op_Explicit(OrdinaSoft.Json.JsonInt32Value)~System.String">
            <summary>
               Casts the value of a <i>JsonInt32Value</i> to a <i>String</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt32Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>String</i> with the value of <paramref name="Value" />.
             </returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonInt64Value">
            <summary>
               JSON value that is a 64-bit integer.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.#ctor(System.String,System.Int64)">
            <summary>
               Initializes a JSON value with a 64-bit integer value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" /> is a valid name for a
               JSON item.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonInt64Value.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value.</value>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Int32">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to an <i>Int32</i>.
             </summary>
             <param name="Value">The <i>JsonInt64Value</i> value to cast.</param>
             <returns>An <i>Int32</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.OverflowException">
               The value of <paramref name="Value" /> is less than <see cref="F:System.Int32.MinValue" /> or
               greater than <see cref="F:System.Int32.MaxValue" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Nullable{System.Int32}">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to a <i>Nullable&lt;Int32&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt64Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Int32&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
             <exception cref="T:System.OverflowException">
               The value of <paramref name="Value" /> is less than <see cref="F:System.Int32.MinValue" /> or
               greater than <see cref="F:System.Int32.MaxValue" />.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Int64">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to an <i>Int64</i>.
             </summary>
             <param name="Value">The <i>JsonInt64Value</i> value to cast.</param>
             <returns>An <i>Int64</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Nullable{System.Int64}">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to a <i>Nullable&lt;Int64&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt64Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Int64&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Double">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to a <i>Double</i>.
             </summary>
             <param name="Value">The <i>JsonInt64Value</i> value to cast.</param>
             <returns>A <i>Double</i> with the value of <paramref name="Value" />.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.Nullable{System.Double}">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to a <i>Nullable&lt;Double&gt;</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt64Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>Nullable&lt;Double&gt;</i> with the value of
               <paramref name="Value" />.
             </returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonInt64Value.op_Explicit(OrdinaSoft.Json.JsonInt64Value)~System.String">
            <summary>
               Casts the value of a <i>JsonInt64Value</i> to a <i>String</i>.
             </summary>
             <param name="Value">
               The <i>JsonInt64Value</i> value to cast. Can be <b>null</b>.
             </param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, a <i>String</i> with the value of <paramref name="Value" />.
             </returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonNullValue">
            <summary>
               JSON value that is <b>null</b>.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonNullValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonNullValue.#ctor(System.String)">
            <summary>
               Initializes a JSON value that is <b>null</b>.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON value.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Json.JsonObjectValue">
            <summary>
               JSON value that is an object.
             </summary>
             <remarks>
               This value contains children values.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonObjectValue.ChildrenDict">
            <summary>
               The dictionary of the children.
             </summary>
             <remarks>
               This field implements <i>IEnumerable&lt;KeyValuePair&lt;String,JsonValue>></i>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor">
            <summary>
               Initializes an empty JSON value.
             </summary> 
             <remarks>
               The name of the JSON object value is <b>null</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with a child value.
             </summary>
             <param name="Child">The child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The name of <paramref name="Child" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Child" /> is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with two children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The children have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 The name of the JSON object value is <b>null</b>.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with three children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with four children values.
             </summary>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <param name="Child4">The fourth child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child4" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(OrdinaSoft.Json.JsonValue[])">
            <summary>
               Initializes a JSON object value with children values.
             </summary>
             <param name="Children">The children.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of a child is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Children" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 The name of the JSON object value is <b>null</b>.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String)">
            <summary>
               Initializes an empty JSON object value with a name.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if specified, is a
               valid name for a JSON value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with a name and a child value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Child">The child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The name of <paramref name="Child" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor doesn't check whether <paramref name="Name" />, if specified, is a
                 valid name for a JSON value.
               </para>
               <para>
                 If <paramref name="Child" /> is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with a name and two children values.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The children have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor doesn't check whether <paramref name="Name" />, if specified, is a
                 valid name for a JSON value.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with a name and three children values.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor doesn't check whether <paramref name="Name" />, if specified, is a
                 valid name for a JSON value.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Initializes a JSON object value with a name and four children values.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Child1">The first child. Can be <b>null</b>.</param>
             <param name="Child2">The second child. Can be <b>null</b>.</param>
             <param name="Child3">The third child. Can be <b>null</b>.</param>
             <param name="Child4">The fourth child. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child4" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor doesn't check whether <paramref name="Name" />, if specified, is a
                 valid name for a JSON value.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.#ctor(System.String,OrdinaSoft.Json.JsonValue[])">
            <summary>
               Initializes a JSON object value with a name and children values.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Children">The children.</param>
             <exception cref="T:System.ArgumentException">
               Two of the children, at least, have the same name.<br />
               -or-<br />
               The name of a child is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Children" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 This constructor doesn't check whether <paramref name="Name" />, if specified, is a
                 valid name for a JSON value.
               </para>
               <para>
                 If one of the children is <b>null</b>, it is ignored.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonObjectValue.Child(System.String)">
            <summary>
               Gets or sets the child with the specified name.
             </summary>
             <param name="Name">The name of the child.</param>
             <value>The child. Can be <b>null</b>.</value>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               When getting the child, there is no child with the specified name.
             </exception>
             <remarks>
               <para>This is the default indexed property.</para>
               <para>
                 When getting a child, if there is no child with the specified name, a
                 <see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see> is raised.
               </para>
               <para>
                 When setting a child, if there is no child with the specified name, a new child is
                 inserted; otherwise, the child with the specified name is replaced.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonObjectValue.Children">
            <summary>
               Gets the children.
             </summary>
             <value>The children.</value>
        </member>
        <member name="P:OrdinaSoft.Json.JsonObjectValue.Count">
            <summary>
               Gets the number of children in the value.
             </summary>
             <value>The number of children in the value.</value>
        </member>
        <member name="P:OrdinaSoft.Json.JsonObjectValue.HasChildren">
            <summary>
               Gets a value that indicates whether the value has children.
             </summary>
             <value>
               <b>true</b> if the value has children;<br />
               otherwise, <b>false</b>.
             </value>
        </member>
        <member name="P:OrdinaSoft.Json.JsonObjectValue.Names">
            <summary>
               Gets the names of the children.
             </summary>
             <value>The names of the children.</value>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Add(OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds a child to the value.
             </summary>
             <param name="Child">The child to add. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               There is already a child with the same name in the object.<br />
               -or-<br />
               The name of <paramref name="Child" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Child" /> is <b>null</b>, it is ignored
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Add(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds two children to the value.
             </summary>
             <param name="Child1">The first child to add. Can be <b>null</b>.</param>
             <param name="Child2">The second child to add. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               There is already a child with the same name in the object.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Add(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds three children to the value.
             </summary>
             <param name="Child1">The first child to add. Can be <b>null</b>.</param>
             <param name="Child2">The second child to add. Can be <b>null</b>.</param>
             <param name="Child3">The third child to add. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               There is already a child with the same name in the object.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Add(OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue,OrdinaSoft.Json.JsonValue)">
            <summary>
               Adds four children to the value.
             </summary>
             <param name="Child1">The first child to add. Can be <b>null</b>.</param>
             <param name="Child2">The second child to add. Can be <b>null</b>.</param>
             <param name="Child3">The third child to add. Can be <b>null</b>.</param>
             <param name="Child4">The forth child to add. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               There is already a child with the same name in the object.<br />
               -or-<br />
               The name of <paramref name="Child1" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child2" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child3" /> is <b>null</b>.<br />
               -or-<br />
               The name of <paramref name="Child4" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Add(OrdinaSoft.Json.JsonValue[])">
            <summary>
              Adds children to the value
             </summary>
             <param name="Children">The children.</param>
             <exception cref="T:System.ArgumentException">
               There is already a child with the same name in the object.<br />
               -or-<br />
               The name of a child is <b>null</b>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Children" /> is <b>null</b>.
             </exception>
             <remarks>
               If one of the children is <b>null</b>, it is ignored.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Contains(System.String)">
            <summary>
               Indicates whether the object contains a child with a specific name.
             </summary>
             <param name="Name">The name of the child.</param>
             <returns>
               <b>true</b> if the object contains a child name <paramref name="Name" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.GetChild(System.String)">
            <summary>
               Gets a child.
             </summary>
             <param name="Name">The name of the child.</param>
             <returns>
               <b>null</b> if there is no child with the specified name;<br />
               otherwise, the child with the specified name.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.Remove(System.String)">
            <summary>
               Remove a child, specified by its name, from the value.
             </summary>
             <param name="Name">The name of the child to remove.</param>
             <returns>
               <b>true</b> if a child with the specified name was found and removed;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonObjectValue.TryGetChild(System.String,OrdinaSoft.Json.JsonValue@)">
            <summary>
               Tries to get the value of a child.
             </summary>
             <param name="Name">The name of the child.</param>
             <param name="Value">
               If successful, the valur of the child;<br />
               otherwise, <b>null</b>.
             </param>
             <returns>
               <b>true</b> if there is a child named <paramref name="Name" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Json.JsonStringValue">
            <summary>
               JSON value that is a <i>String</i>.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonStringValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonStringValue.#ctor(System.String,System.String)">
            <summary>
               Initializes a JSON value with a <i>String</i> value.
             </summary>
             <param name="Name">The name. Can be <b>null</b>.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if not <b>null</b>,
               is a valid name for a JSON item.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonStringValue.Value">
            <summary>
               Gets or sets the value.
             </summary>
             <value>The value. Can be <b>null</b></value>
        </member>
        <member name="T:OrdinaSoft.Json.JsonTools">
            <summary>
               Tools for <b>JSON</b> format.
             </summary>
             <remarks>
               There are two methods to quote strings: <see cref="M:OrdinaSoft.Json.JsonTools.QuoteName(System.String)" /> and
               <see cref="M:OrdinaSoft.Json.JsonTools.QuoteString(System.String)" />. The difference is that <i>QuoteName</i> caches the
               quoted strings to reuse them, but not <i>QuoteString</i>. The caching is thread-safe.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonTools.QuotedDict">
            <summary>
               The dictionary with the quoted names.
             </summary>
             <remarks>
               The key is the name; the value is the quoted name.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonTools.False">
            <summary>
               The JSON text for a <b>false</b> value.
             </summary>
             <remarks>
               The text is <b>false</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonTools.Null">
            <summary>
               The JSON text for a <b>null</b> value.
             </summary>
             <remarks>
               The text is <b>null</b>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonTools.True">
            <summary>
               The JSON text for a <b>true</b> value.
             </summary>
             <remarks>
               The text is <b>true</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonTools.BooleanValue(System.Boolean)">
            <summary>
               Gets the text for a <i>Boolean</i> value.
             </summary>
             <param name="Value">The value.</param>
             <returns>The text for the value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonTools.QuoteName(System.String)">
            <summary>
               Quotes a JSON name.
             </summary>
             <param name="Name">The Name.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <returns>The quoted name.</returns>
             <remarks>
               The difference with the <see cref="M:OrdinaSoft.Json.JsonTools.QuoteString(System.String)" /> method is that this one
               keeps a cache of the quoted name, so the quoted names are reused.
             </remarks>
             <seealso cref="M:OrdinaSoft.Json.JsonTools.QuoteString(System.String)" />
        </member>
        <member name="M:OrdinaSoft.Json.JsonTools.QuoteString(System.String)">
            <summary>
               Quotes a JSON string.
             </summary>
             <param name="s">The string to quote. Can be <b>null</b>.</param>
             <returns>
               <see cref="F:OrdinaSoft.Json.JsonTools.Null" /> is <paramref name="s" /> is <b>null</b>;<br />
               otherwise, the quoted string.
             </returns>
             <seealso cref="M:OrdinaSoft.Json.JsonTools.QuoteName(System.String)" />
        </member>
        <member name="T:OrdinaSoft.Json.JsonValue">
            <summary>
               JSON value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonValue.Cache">
            <summary>
               The cache for the names of the values.
             </summary>
             <remarks>
               <para>
                 The cache is indexed by the user name.<br />
                 The value is the name, converted to camel case and quoted.
               </para>
               <para>
                 As we often use the same values, caching them diminues the memory footprint of the
                 application and speeds up the conversion.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.get_Value(System.Int32)">
            <summary>
               Gets the value at the specified index.
             </summary>
             <param name="ix">The index.</param>
             <returns>The value.</returns>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonArrayValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than 0, or greater than or equal to the number of
               values in the array.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Json.JsonValue.Value(System.Int32)" /> indexed property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.get_Value(System.String)">
            <summary>
               Gets the value with the specified name.
             </summary>
             <param name="Name">The name of the value.</param>
             <returns>The value.</returns>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonObjectValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               There is no value with the specified name.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Json.JsonValue.Value(System.String)" /> indexed property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.set_Value(System.Int32,OrdinaSoft.Json.JsonValue)">
            <summary>
               Sets the value at the specified index.
             </summary>
             <param name="ix">The index.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonArrayValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than 0, or greater than or equal to the number of
               values in the array.
             </exception>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Json.JsonValue.Value(System.Int32)" /> indexed property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.set_Value(System.String,OrdinaSoft.Json.JsonValue)">
            <summary>
               Sets the value with the specified name.
             </summary>
             <param name="Name">The name of the value.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonObjectValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <remarks>
               This is the setter of the <see cref="P:OrdinaSoft.Json.JsonValue.Value(System.String)" /> indexed property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.#ctor">
            <summary>
               Initializes a name-less JSON value.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.#ctor(System.String)">
            <summary>
               Initializes a JSON value.
             </summary>
             <param name="Name">The name of the value. Can be <b>null</b>.</param>
             <remarks>
               This constructor doesn't check whether <paramref name="Name" />, if specified, is a
               valid name for a JSON value.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.FormatValue">
            <summary>
               Returns the formatted value.
             </summary>
             <returns>The formatted value.</returns>
             <remarks>
               This method returns the JSON value, formatted correctly, without its name and the
               enclosing curly brackets.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.ToString(System.String)">
            <summary>
               Returns a string representation of the value.
             </summary>
             <param name="Value">
               The value, formatted correctly for JSON. Can be <b>null</b>.
             </param>
             <returns>A string representation of the value.</returns>
             <remarks>
               This method returns the JSON value with its name, but without the enclosing curly
               brackets.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.ToString">
            <summary>
               Returns a string representation of the value.
             </summary>
             <returns>A string representation of the value.</returns>
        </member>
        <member name="P:OrdinaSoft.Json.JsonValue.Value(System.Int32)">
            <summary>
               Gets or sets the value at the specified index.
             </summary>
             <param name="ix">The index.</param>
             <value>The value.</value>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonArrayValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.IndexOutOfRangeException">
               <paramref name="ix" /> is less than 0, or greater than or equal to the number of
               values in the array.
             </exception>
             <remarks>
               This is the default integer-indexed property.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonValue.Value(System.String)">
            <summary>
               Gets or sets the value with the specified name.
             </summary>
             <param name="Name">The name of the value.</param>
             <value>The value.</value>
             <exception cref="T:System.ArgumentException">
               The current instance is not a <see cref="T:OrdinaSoft.Json.JsonObjectValue">JSON object value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Name" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               When getting the value, there is no value with the specified name.
             </exception>
             <remarks>
               <para>This is the default string-indexed property.</para>
               <para>
                 When getting a value, if there is no value with the specified name, a
                 <see cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException</see> is raised.
               </para>
               <para>
                 When setting a value, if there is no value with the specified name, a new value is
                 inserted; otherwise, the value with the specified name is replaced.
               </para>
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Json.JsonValue.Name">
            <summary>
               Gets or sets the name.
             </summary>
             <value>
               <b>null</b> if the value doesn't have a name;<br />
               otherwise, the name.
             </value>
             <remarks>
               When exporting to JSON, the name is converted to <i>camelCase</i>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Boolean">
            <summary>
               Casts a JSON value to a boolean.
             </summary>
             <param name="Value">The JSON value.</param>
             <returns>The boolean.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonBooleanValue">JSON boolean
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid boolean.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Nullable{System.Boolean}">
            <summary>
               Casts a JSON value to a nullable boolean.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the boolean.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonBooleanValue">JSON boolean
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid boolean.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.DateTime">
            <summary>
               Casts a JSON value to a date and time.
             </summary>
             <param name="Value">The JSON value.</param>
             <returns>The date and time.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonDateValue">JSON date
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonDateTimeValue">JSON date and time value</see>, nor
               a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid date.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Nullable{System.DateTime}">
            <summary>
               Casts a JSON value to a nullable date and time.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the date and time.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonDateValue">JSON date
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonDateTimeValue">JSON date and time value</see>, nor
               a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid date.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Double">
            <summary>
               Casts a JSON value to a double-precision floating-point number.
             </summary>
             <param name="Value">The JSON value.</param>
             <returns>The double-precision floating-point number.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON 32-bit
               integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid floating-point number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>,
               but the value is too small or too big to be expressed as a double-precision
               floating-point number.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Nullable{System.Double}">
            <summary>
               Casts a JSON value to a nullable double-precision floating-point number.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the double-precision floating-point number.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonDoubleValue">JSON
               double-precision floating-point value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON
               32-bit integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid floating-point number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>,
               but the value is too small or too big to be expressed as a double-precision
               floating-point number.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Int32">
            <summary>
               Casts a JSON value to a 32-bit integer.
             </summary>
             <param name="Value">The JSON value.</param>
             <returns>The 32-bit integer.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON 32-bit
               integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid integer number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see> or a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>, but the value
               is too small or too big to be expressed as a 32-bit integer.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Nullable{System.Int32}">
            <summary>
               Casts a JSON value to a nullable 32-bit integer.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the 32-bit integer.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON 32-bit
               integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid integer number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see> or a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>, but the value
               is too small or too big to be expressed as a 32-bit integer.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Int64">
            <summary>
               Casts a JSON value to a 64-bit integer.
             </summary>
             <param name="Value">The JSON value.</param>
             <returns>The 64-bit integer.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON 32-bit
               integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Value" /> is <b>null</b>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid integer number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a<see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>,
               but the value is too small or too big to be expressed as a 64-bit integer.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.Nullable{System.Int64}">
            <summary>
               Casts a JSON value to a nullable 64-bit integer.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the 64-bit integer.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is neither a <see cref="T:OrdinaSoft.Json.JsonInt32Value">JSON 32-bit
               integer value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonInt64Value">JSON 64-bit integer
               value</see>, nor a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>.
             </exception>
             <exception cref="T:System.FormatException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>
               and doesn't contain a valid integer number.
             </exception>
             <exception cref="T:System.OverflowException">
               <paramref name="Value" /> is a<see cref="T:OrdinaSoft.Json.JsonStringValue">JSON string value</see>,
               but the value is too small or too big to be expressed as a 64-bit integer.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.op_Explicit(OrdinaSoft.Json.JsonValue)~System.String">
            <summary>
               Casts a JSON value to a string.
             </summary>
             <param name="Value">The JSON value. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Value" /> is <b>null</b>;<br />
               otherwise, the string.
             </returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Value" /> is a <see cref="T:OrdinaSoft.Json.JsonArrayValue">JSON array value</see> or a
               <see cref="T:OrdinaSoft.Json.JsonObjectValue">JSON object value</see>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.Parse(System.String)">
            <summary>
               Parses a text and returns the JSON value on it.
             </summary>
             <param name="Text">The text to parse.</param>
             <returns>The JSON value.</returns>
             <exception cref="T:System.ArgumentException">
               <paramref name="Text" /> is <b>null</b> or empty.
             </exception>
             <exception cref="T:System.FormatException">
               The JSON data in <paramref name="Text" /> is not correct. See the message of the
               exception for more information.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonValue.ToSimpleString">
            <summary>
               Returns a string representation of the value, without the enclosing curly brackets.
             </summary>
             <returns>A string representation of the value.</returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser">
            <summary>
               JSON parser.
             </summary>
             <remarks>
               Is used to parse a JSON string and return its content.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ArrayAfterValueTokens">
            <summary>
               The token after a value in an array.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ArrayStartTokens">
            <summary>
               The tokens at the start of an array.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ObjectAfterNameTokens">
            <summary>
               The tokens after the name in an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ObjectAfterValueTokens">
            <summary>
               The tokens after the value in an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ObjectNextValueTokens">
            <summary>
               The tokens for the next value in an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ObjectStartTokens">
            <summary>
               The tokens at the start of an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ObjectTokens">
            <summary>
               The tokens for an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ValueTokens">
            <summary>
               The tokens for a value.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.#cctor">
            <summary>
               Initializes the static data of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.#ctor(System.String)">
            <summary>
               Initializes an instance of the parser.
             </summary>
             <param name="Text">The text to parse.</param>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.ixInText">
            <summary>
               The index in the text.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.MaxIx">
            <summary>
               The maximum index in <see cref="F:OrdinaSoft.Json.JsonParser.Text" />.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Text">
            <summary>
               The text to parse.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.NextToken(System.Collections.Generic.HashSet{OrdinaSoft.Json.JsonParser.TokenType})">
            <summary>
               Returns the next token.
             </summary>
             <param name="Expected">The tokens that are expected at the current state.</param>
             <returns>The next token.</returns>
             <exception cref="T:System.FormatException">
               Invalid char.<br />
               -or-<br />
               The next token is not in the expected ones.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseArray(System.String)">
            <summary>
               Parse the JSON array at the current position.
             </summary>
             <param name="Name">The name of the array. Can be <b>null</b>.</param>
             <returns>The JSON array.</returns>
             <exception cref="T:System.FormatException">
               The JSON data in is not correct. See the message of the exception for more
               information.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseConstant(System.Char)">
            <summary>
               Parses a text to decode a token with a constant.
             </summary>
             <param name="c">The first char of the text.</param>
             <returns>The token.</returns>
             <remarks>
               <para>This method is used to decode <b>false</b>, <b>null</b> and <b>true</b>.</para>
               <para>The first char of the text is already decoded.</para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseNumber(System.Char)">
            <summary>
               Parses the number at the current position.
             </summary>
             <param name="c">The first char of the number.</param>
             <returns>The number token.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseObject(System.String)">
            <summary>
               Parse the JSON object at the current position.
             </summary>
             <param name="Name">The name of the object. Can be <b>null</b>.</param>
             <returns>The JSON object.</returns>
             <exception cref="T:System.FormatException">
               The JSON data in is not correct. See the message of the exception for more
               information.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseString">
            <summary>
               Parses the string at the current position.
             </summary>
             <returns>The string token.</returns>
             <exception cref="T:System.FormatException">
               The string is not terminated.<br />
               -or-<br />
               A backslash escape is at the end of the text.<br />
               -or-<br />
               An unknown escaped char is found.<br />
               -or-<br />
               A unicode char is not terminated.<br />
               -or-<br />
               A unicode char doesn't have 4 hex chars.
             </exception>
             <remarks>
               The quote at the beginning of the string is already decoded.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.ParseValue(OrdinaSoft.Json.JsonParser.Token,System.String)">
            <summary>
               Parses a value from a token.
             </summary>
             <param name="Token">The token.</param>
             <param name="Name">The name of the value. Can be <b>null</b>.</param>
             <returns>The value.</returns>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.SkipWhiteSpace">
            <summary>
               Skips the white space in <see cref="F:OrdinaSoft.Json.JsonParser.Text" />.
             </summary>
             <remarks>
               This method increments <see cref="F:OrdinaSoft.Json.JsonParser.ixInText" /> until it is at the end of
               <see cref="F:OrdinaSoft.Json.JsonParser.Text" /> or the current character is not a white space: space, line feed,
               carriage return or horizontal tab.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.Parse">
            <summary>
               Parses the text.
             </summary>
             <returns>The readed value.</returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser.TokenType">
            <summary>
               Type of a token for the JSON parser.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.Colon">
            <summary>
               Colon: <b>:</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.Comma">
            <summary>
               Comma: <b>,</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.End">
            <summary>
               End of the input text.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.EndArray">
            <summary>
               End of an array: <b>]</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.EndObject">
            <summary>
               End of an object: <b>}</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.False">
            <summary>
               The <b>false</b> value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.Null">
            <summary>
               The <b>null</b> value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.Number">
            <summary>
               Number.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.StartArray">
            <summary>
               Start of an array: <b>[</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.StartObject">
            <summary>
               Start of an object: <b>{</b>.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.String">
            <summary>
               String.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.TokenType.True">
            <summary>
               The <b>true</b> value.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser.Token">
            <summary>
               Token for the JSON parser.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.Token.#ctor(OrdinaSoft.Json.JsonParser.TokenType)">
            <summary>
               Initializes a token.
             </summary>
             <param name="Type">The type.</param>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.Colon">
            <summary>
               The token for a colon.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.Comma">
            <summary>
               The token for a comma.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.End">
            <summary>
               The token for the end of the input text.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.EndArray">
            <summary>
               The token for the end of an array.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.EndObject">
            <summary>
               The token for the end of an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.False">
            <summary>
               The token for the <b>false</b> value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.Null">
            <summary>
               The token for the <b>null</b> value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.StartArray">
            <summary>
               The token for the start of an array.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.StartObject">
            <summary>
               The token for the start of an object.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.True">
            <summary>
               The token for the <b>true</b> value.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.Token.Type">
            <summary>
               The type of the token.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.Token.ToString">
            <summary>
               Returns a string representation of the token.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser.StringToken">
            <summary>
               Token with a string value, for the JSON parser.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.StringToken.#ctor(System.String)">
            <summary>
               Initializes an instance of the token.
             </summary>
             <param name="Value">The text value.</param>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.StringToken.Value">
            <summary>
               The text value.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.StringToken.ToString">
            <summary>
               Returns a string representation of the token.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser.NumberType">
            <summary>
               Type of number for a <see cref="T:OrdinaSoft.Json.JsonParser.NumberToken" />.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.NumberType.FloatingPoint">
            <summary>
               Floating point number.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.NumberType.Int32">
            <summary>
               Integer number, in the range for a 32-bit number.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.NumberType.Int64">
            <summary>
               Integer number, in the range for a 64-bit number.
             </summary>
        </member>
        <member name="T:OrdinaSoft.Json.JsonParser.NumberToken">
            <summary>
               Token with a number value, for the JSON parser.
             </summary>
             <remarks>
               The number is vaed as a string, before it is decoded.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.NumberToken.#ctor(System.String)">
            <summary>
               Initializes an instance of the token.
             </summary>
             <param name="Value">The number value.</param>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.NumberToken.Type">
            <summary>
               The type of the number.
             </summary>
             <remarks>
               If the value contains a point or an exponent, or is not in the 64-bit range, its
               type is <i>FloatingPoint</i>.<br />
               otherwise, it is considered as an integer number. If it is in the range for a 32-bit
               integer, its type is <i>Int32</i>; otherwise it is <i>Int64</i>.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.Json.JsonParser.NumberToken.Value">
            <summary>
               The number value.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Json.JsonParser.NumberToken.ToString">
            <summary>
               Returns a string representation of the token.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.Mustache.MustacheHtml">
            <summary>
               The <i>mustache</i> template engine, for HTML.
             </summary>
             <remarks>
               <para>
                 This class works for HTML only: it automatically escapes the replacement texts. You
                 must use the <see cref="T:OrdinaSoft.Mustache.MustacheText" /> class for simple text. You are free to
                 define other descendant classes for a different behaviour.
               </para>
               <para>
                 This class uses the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see>
                 class, so you can use path instead of just a single variable name.
               </para>
               <h3>Mustache compliance</h3>
               <para>
                 Currently, this class is not finished and doesn't apply all the mustache syntax.
                 The following specifications are implemented:
                 <list type="bullet">
                   <item>
                     <b>Comments</b>.
                   </item>
                   <item>
                     <b>Variables in a tag</b>. This class enhances the <i>mustache</i> specification
                     by allowing path in addition to simple variable names.
                   </item>
                 </list>
               </para>
               <h3>enhancements to the mustache specification</h3>
               <para>
                 The following enhancements are added by this class:
                 <list type="bullet">
                   <item>
                     The variable is specified as a path, not a single property name. See the remarks
                     of the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see> class.
                   </item>
                   <item>
                     The start tag and end tag texts can be specified by the user, with a special
                     constructor.
                   </item>
                 </list>
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.Mustache.MustacheText" />
             <seealso cref="T:OrdinaSoft.Mustache.MustacheXml" />
             <seealso cref="T:OrdinaSoft.Reflection.PropertyValueManager" />
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheHtml.GetValue(System.String,System.Object)">
            <summary>
               Gets a value.
             </summary>
             <param name="Path">The path of the value.</param>
             <param name="Obj">The object on which to look for the value.</param>
             <returns>The value.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Obj" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 As this class is for HTML, this method escapes the value of the property.
               </para>
               <para>
                 If a value can't be found, this method calls the
                 <see cref="M:OrdinaSoft.Mustache.MustacheText.ValueNotFound(System.String)" /> method in order to take the appropriate
                 action.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheHtml.#ctor(System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}? and the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheHtml.#ctor(System.String,System.String,System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheHtml.#ctor(System.IO.Stream)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}' as the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheHtml.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Mustache.MustacheText">
            <summary>
               The <i>mustache</i> template engine, for text.
             </summary>
             <remarks>
               <para>
                 This class works for text only, so it doesn't try to quote or escape the replacement
                 text. You must use the <i>MustachHtml</i> class for HTML. You are free to define
                 other descendant classes for a different behaviour.
               </para>
               <para>
                 This class uses the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see>
                 class, so you can use path instead of just a single variable name.
               </para>
               <h3>Mustache compliance</h3>
               <para>
                 Currently, this class is not finished and doesn't apply all the mustache syntax.
                 The following specifications are implemented:
                 <list type="bullet">
                   <item>
                     <b>Comments</b>.
                   </item>
                   <item>
                     <b>Variables in a tag</b>. This class enhances the <i>mustache</i> specification
                     by allowing path in addition to simple variable names.
                   </item>
                 </list>
               </para>
               <h3>enhancements to the mustache specification</h3>
               <para>
                 The following enhancements are added by this class:
                 <list type="bullet">
                   <item>
                     The variable is specified as a path, not a single property name. See the remarks
                     of the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see> class.
                   </item>
                   <item>
                     The start tag and end tag texts can be specified by the user, with a special
                     constructor.
                   </item>
                 </list>
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.Mustache.MustacheHtml" />
             <seealso cref="T:OrdinaSoft.Mustache.MustacheXml" />
             <seealso cref="T:OrdinaSoft.Reflection.PropertyValueManager" />
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.GetValue(System.String,System.Object)">
            <summary>
               Gets a value.
             </summary>
             <param name="Path">The path of the value.</param>
             <param name="Obj">The object on which to look for the value.</param>
             <returns>The value.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Obj" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 As this class is for text only, this method just returns the value of the property
                 as is, without quoting or escaping it.
               </para>
               <para>
                 If a value can't be found, this method calls the
                 <see cref="M:OrdinaSoft.Mustache.MustacheText.ValueNotFound(System.String)" /> method in order to take the appropriate
                 action.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.ValueNotFound(System.String)">
            <summary>
               Called when a value is not found.
             </summary>
             <param name="Path">The path to the value.</param>
             <returns>The value to use.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.
             </exception>
             <remarks>
               The base method just returns an empty string. Inheritors can log the error, return
               the quoted path, raise an exception, or whatever they want.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.#ctor(System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}' as the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.#ctor(System.String,System.String,System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.#ctor(System.IO.Stream)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}' as the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Mustache.MustacheText.EndTag">
            <summary>
               Gets the text that ends a tag.
             </summary>
             <value>The text.</value>
        </member>
        <member name="P:OrdinaSoft.Mustache.MustacheText.SourceText">
            <summary>
               Gets the source text.
             </summary>
             <value>The source text.</value>
        </member>
        <member name="P:OrdinaSoft.Mustache.MustacheText.StartTag">
            <summary>
               Gets the text that starts a tag.
             </summary>
             <value>The text.</value>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheText.Render(System.Object)">
            <summary>
               Renders the template to a text.
             </summary>
             <param name="Obj">The object on which to look the values.</param>
             <returns>The rendered text.</returns>
             <exception cref="T:System.InvalidOperationException">
               A tag has its starting text, for no end text was found.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Mustache.MustacheXml">
            <summary>
               The <i>mustache</i> template engine, for XML.
             </summary>
             <remarks>
               <para>
                 This class works for XML only: it automatically escapes the replacement texts. You
                 must use the <see cref="T:OrdinaSoft.Mustache.MustacheText" /> class for simple text. You are free to
                 define other descendant classes for a different behaviour.
               </para>
               <para>
                 This class uses the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see>
                 class, so you can use path instead of just a single variable name.
               </para>
               <h3>Mustache compliance</h3>
               <para>
                 Currently, this class is not finished and doesn't apply all the mustache syntax.
                 The following specifications are implemented:
                 <list type="bullet">
                   <item>
                     <b>Comments</b>.
                   </item>
                   <item>
                     <b>Variables in a tag</b>. This class enhances the <i>mustache</i> specification
                     by allowing path in addition to simple variable names.
                   </item>
                 </list>
               </para>
               <h3>enhancements to the mustache specification</h3>
               <para>
                 The following enhancements are added by this class:
                 <list type="bullet">
                   <item>
                     The variable is specified as a path, not a single property name. See the remarks
                     of the <see cref="T:OrdinaSoft.Reflection.PropertyValueManager">PropertyValueManager</see> class.
                   </item>
                   <item>
                     The start tag and end tag texts can be specified by the user, with a special
                     constructor.
                   </item>
                 </list>
               </para>
             </remarks>
             <seealso cref="T:OrdinaSoft.Mustache.MustacheXml" />
             <seealso cref="T:OrdinaSoft.Mustache.MustacheText" />
             <seealso cref="T:OrdinaSoft.Reflection.PropertyValueManager" />
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheXml.GetValue(System.String,System.Object)">
            <summary>
               Gets a value.
             </summary>
             <param name="Path">The path of the value.</param>
             <param name="Obj">The object on which to look for the value.</param>
             <returns>The value.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Path" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="Obj" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 As this class is for XML, this method escapes the value of the property.
               </para>
               <para>
                 If a value can't be found, this method calls the
                 <see cref="M:OrdinaSoft.Mustache.MustacheText.ValueNotFound(System.String)" /> method in order to take the appropriate
                 action.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheXml.#ctor(System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}? and the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheXml.#ctor(System.String,System.String,System.String)">
            <summary>
               Initializes an instance of the engine.
             </summary>
             <param name="SourceText">The source text.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="SourceText" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheXml.#ctor(System.IO.Stream)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor uses '{{' as the start tag and '}}' as the end tag.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Mustache.MustacheXml.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
               Initializes an instance of the engine, from a stream.
             </summary>
             <param name="Stream">The stream.</param>
             <param name="StartTag">The text that starts a tag.</param>
             <param name="EndTag">The text that ends a tag.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Stream" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="StartTag" /> is <b>null</b>.<br />
               -o-<br />
               <paramref name="EndTag" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.Parser">
            <summary>
               Base parser for a text.
             </summary>
             <seealso cref="T:OrdinaSoft.TextPosition" />
             <seealso cref="T:OrdinaSoft.TextRange" />
             <seealso cref="T:OrdinaSoft.Token`1" />
        </member>
        <member name="F:OrdinaSoft.Parser._ixText">
            <summary>
               The current index in the text.
             </summary>
        </member>
        <member name="F:OrdinaSoft.Parser._MaxIx">
            <summary>
               The mximum index in the text.
             </summary>
        </member>
        <member name="M:OrdinaSoft.Parser.get_CurrentChar">
            <summary>
               Gets the current char.
             </summary>
             <returns>The current char.</returns>
             <exception cref="T:System.InvalidOperationException">
               The parser is past the last char of the text.
             </exception>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.Parser.CurrentChar" /> property, see the property
               documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Parser.IsSeparator(System.Char)">
            <summary>
               Indicates whether a char is a separator.
             </summary>
             <param name="c">The char.</param>
             <returns>
               <b>true</b> if the char is a separator;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               This method uses the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Parser.#ctor(System.String)">
            <summary>
               Initializes an instance of the parser.
             </summary>
             <param name="Text">Th text to parse.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
        </member>
        <member name="F:OrdinaSoft.Parser.Text">
            <summary>
               The text to read.
             </summary>
        </member>
        <member name="P:OrdinaSoft.Parser.CurrentChar">
            <summary>
               Gets the current char.
             </summary>
             <value>The current char.</value>
             <exception cref="T:System.InvalidOperationException">
               The parser is past the last char of the text.
             </exception>
        </member>
        <member name="P:OrdinaSoft.Parser.IsEndOfText">
            <summary>
               Indicates if we are at the end of the source text.
             </summary>
             <value>
               <b>true</b> if we are at the end of the source text;<br />
               otherwise, <b>false</b>.
             </value>
        </member>
        <member name="P:OrdinaSoft.Parser.Position">
            <summary>
               Gets the position of the current char.
             </summary>
             <value>The position.</value>
        </member>
        <member name="M:OrdinaSoft.Parser.MoveToNextChar">
            <summary>
               Moves the parser to the next char of the text.
             </summary>
             <returns>
               <b>true</b> if there's still chars to parse;<br />
               <b>false</b> if the parser is past the last char of the text.
             </returns>
             <remarks>
               There is no error if the parser is already past the last char. In this case, the
               method returns <b>false</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Parser.MoveToNextChar(System.Boolean)">
            <summary>
               Moves the parser to the next char of the text, eventually skipping separators.
             </summary>
             <param name="SkipSeparators">
               <b>true</b> if the separators must be skipped;<br />
               otherwise, <b>false</b>.
             </param>
             <returns>
               <b>true</b> if there's still chars to parse;<br />
               <b>false</b> if the parser is past the last char of the text.
             </returns>
             <remarks>
               There is no error if the parser is already past the last char. In this case, the
               method returns <b>false</b>.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.TextPosition">
            <summary>
               Position in a text.
             </summary>
             <remarks>
               A position of a text is specified by a line number and a column number.
             </remarks>
             <seealso cref="T:OrdinaSoft.TextRange" />
        </member>
        <member name="M:OrdinaSoft.TextPosition.#ctor">
            <summary>
               Initializes a position with default values.
             </summary>
             <remarks>
               The instance is set to line 1 and column 1.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.#ctor(System.Int32,System.Int32)">
            <summary>
               Initializes a position.
             </summary>
             <param name="NoLine">The line number.</param>
             <param name="NoColumn">The column number.</param>
        </member>
        <member name="M:OrdinaSoft.TextPosition.#ctor(OrdinaSoft.TextPosition)">
            <summary>
               Initializes a position from another instance.
             </summary>
             <param name="Position">The position to copy to the new instance.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Position" /> is <b>null</b>.
             </exception>
        </member>
        <member name="P:OrdinaSoft.TextPosition.NoColumn">
            <summary>
               Gets the number of the current column in the current line of the parser.
             </summary>
             <value>The number of the current column.</value>
             <remarks>
               The first column has the number <b>1</b>.
             </remarks>
             <seealso cref="P:OrdinaSoft.TextPosition.NoLine" />
        </member>
        <member name="P:OrdinaSoft.TextPosition.NoLine">
            <summary>
               Gets the number of the current line of the parser.
             </summary>
             <value>The number of the current line.</value>
             <remarks>
               The first line has the number <b>1</b>.
             </remarks>
             <seealso cref="P:OrdinaSoft.TextPosition.NoColumn" />
        </member>
        <member name="M:OrdinaSoft.TextPosition.op_Equality(OrdinaSoft.TextPosition,OrdinaSoft.TextPosition)">
            <summary>
               Indicates whether two positions are equal.
             </summary>
             <param name="Position1">The first position. Can be <b>null</b></param>
             <param name="Position2">The second position. Can be <b>null</b></param>
             <returns>
               <b>true</b> if <paramref name="Position1" /> is equal to
               <paramref name="Position2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               If noth positions are <b>null</b>, they are considered equal.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.op_Inequality(OrdinaSoft.TextPosition,OrdinaSoft.TextPosition)">
            <summary>
               Indicates whether two positions are not equal.
             </summary>
             <param name="Position1">The first position. Can be <b>null</b></param>
             <param name="Position2">The second position. Can be <b>null</b></param>
             <returns>
               <b>true</b> if <paramref name="Position1" /> is not equal to
               <paramref name="Position2" />;<br />
               otherwise, <b>false</b>.
             </returns>
             <remarks>
               If noth positions are <b>null</b>, they are considered equal.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.Equals(System.Object)">
            <summary>
               Indicates whether the position is equal to an object.
             </summary>
             <param name="Obj">
               The object to compare to the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Obj" /> is a <i>TextPosition</i> and is equal to the
               current instance;<br />
               otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:OrdinaSoft.TextPosition.Equals(OrdinaSoft.TextPosition)">
            <summary>
               Indicates whether the position is equal to another one.
             </summary>
             <param name="Other">
               A position to compare to the current instance. Can be <b>null</b>.
             </param>
             <returns>
               <b>true</b> if <paramref name="Other" /> is equal to the current instance;<br />
               otherwise, <b>false</b>
             </returns>
        </member>
        <member name="M:OrdinaSoft.TextPosition.GetHashCode">
            <summary>
               Gets the hash code of the position.
             </summary>
             <returns>The hash code.</returns>
        </member>
        <member name="M:OrdinaSoft.TextPosition.NextColum">
            <summary>
               Sets the position to the next column.
             </summary>
             <remarks>
               The <see cref="P:OrdinaSoft.TextPosition.NoLine">line number</see> is not changed and the
               <see cref="P:OrdinaSoft.TextPosition.NoColumn">column number</see> is incremented.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.NextLine">
            <summary>
               Sets the position to the beginning of the next line.
             </summary>
             <remarks>
               The <see cref="P:OrdinaSoft.TextPosition.NoLine">line number</see> is incremented and the
               <see cref="P:OrdinaSoft.TextPosition.NoColumn">column number</see> is set to <b>1</b>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.SetPosition(System.Int32,System.Int32)">
            <summary>
               Sets the position to the specified line and column.
             </summary>
             <param name="NoLine">The line number.</param>
             <param name="NoColumn">The column number.</param>
             <remarks>
               Using this method changes both the line and the column at the same time and notifies
               both both properties with a single call.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextPosition.SetPosition(OrdinaSoft.TextPosition)">
            <summary>
               Sets the position to the specified one.
             </summary>
             <param name="Position">The position to copy to the current instance.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Position" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.TextPosition.ToString">
            <summary>
               Returns a string representation of the position.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.TextRange">
            <summary>
               Range of text.
             </summary>
             <remarks>
               A range of text is specified by the position of the first char and the position of the
               last char. If the last char position is not specified or is the same as those of the
               first char, the text contains only one char.
             </remarks>
             <seealso cref="T:OrdinaSoft.TextPosition" />
        </member>
        <member name="M:OrdinaSoft.TextRange.#ctor(OrdinaSoft.TextPosition)">
            <summary>
               Initializes a range of text with only the position of the first char.
             </summary>
             <param name="FirstChar">The position of the first char. Can be <b>null</b>.</param>
             <remarks>
               <para>
                 This constructor is used when the text contains only one char or when the position
                 of the first char is currently known
               </para>
               <para>
                 This constructor makes a clone of <paramref name="FirstChar" />.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextRange.#ctor(OrdinaSoft.TextPosition,OrdinaSoft.TextPosition)">
            <summary>
               Initializes a range of text.
             </summary>
             <param name="FirstChar">The position of the first char. Can be <b>null</b>.</param>
             <param name="LastChar">The position of the last char. Can be <b>null</b>.</param>
             <remarks>
               This constructor makes a clone of <paramref name="FirstChar" /> and
               <paramref name="LastChar" />.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.TextRange.#ctor(OrdinaSoft.TextRange)">
            <summary>
               Initializes a range of text from another instance.
             </summary>
             <param name="Range">The range to copy to the new instance.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Range" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor makes a clone of the positions in <paramref name="Range" />.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.TextRange.FirstChar">
            <summary>
               Gets the position of the first char.
             </summary>
             <value>The position of the first char.</value>
             <seealso cref="P:OrdinaSoft.TextRange.LastChar" />
        </member>
        <member name="P:OrdinaSoft.TextRange.LastChar">
            <summary>
               Gets the position of the last char.
             </summary>
             <value>
               <b>null</b> if the range contains only one char;<br />
               otherwise, the position of the last char.
             </value>
             <remarks>
               If the text only contains one char, this property can be <b>null</b> or contains the
               same position as <see cref="P:OrdinaSoft.TextRange.FirstChar" />
             </remarks>
             <seealso cref="P:OrdinaSoft.TextRange.FirstChar" />
        </member>
        <member name="M:OrdinaSoft.TextRange.ToString">
            <summary>
               Returns a string representation of the range.
             </summary>
             <returns>The string representation.</returns>
             <remarks>
               If the range contains only one char (<see cref="P:OrdinaSoft.TextRange.LastChar" /> is <b>null</b> or has
               the same value as <see cref="P:OrdinaSoft.TextRange.FirstChar" />), only the position of the first char is
               returned.
             </remarks>
        </member>
        <member name="T:OrdinaSoft.Token`1">
            <summary>
               Token for the parser.
             </summary>
             <typeparam name="TType">The type of the token type.</typeparam>
             <seealso cref="T:OrdinaSoft.TextPosition" />
             <seealso cref="T:OrdinaSoft.TextRange" />
        </member>
        <member name="M:OrdinaSoft.Token`1.#ctor(`0)">
            <summary>
               Initializes a token without its position.
             </summary>
             <param name="Type">The token type.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Type" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Token`1.#ctor(`0,OrdinaSoft.TextPosition)">
            <summary>
               Initializes a token, specifying the position of its first char.
             </summary>
             <param name="Type">The token type.</param>
             <param name="FirstChar">The position of the first char. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Type" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor should be used when the token contains only one char or the position
               of the ned char is unknown.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.Token`1.#ctor(`0,OrdinaSoft.TextPosition,OrdinaSoft.TextPosition)">
            <summary>
               Initializes a token.
             </summary>
             <param name="Type">The token type.</param>
             <param name="FirstChar">The position of the first char. Can be <b>null</b>.</param>
             <param name="LastChar">The position of the last char. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Type" /> is <b>null</b>.
             </exception>
        </member>
        <member name="M:OrdinaSoft.Token`1.#ctor(`0,OrdinaSoft.TextRange)">
            <summary>
               Initializes a token, specifying the position of its first char.
             </summary>
             <param name="Type">The token type.</param>
             <param name="Range">The range of text. Can be <b>null</b>.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Type" /> is <b>null</b>.
             </exception>
             <remarks>
               This constructor makes a clone of <paramref name="Range" />.
             </remarks>
        </member>
        <member name="P:OrdinaSoft.Token`1.Range">
            <summary>
               Gets or sets the range of text that contains the token.
             </summary>
             <value>The range of text.</value>
        </member>
        <member name="P:OrdinaSoft.Token`1.Type">
            <summary>
               Gets the token type.
             </summary>
             <value>The token type.</value>
        </member>
        <member name="M:OrdinaSoft.Token`1.ToString">
            <summary>
               Returns a string representation of the tag.
             </summary>
             <returns>The string representation.</returns>
        </member>
        <member name="T:OrdinaSoft.SpecialChar">
            <summary>
               Special chars.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.BackSpace">
            <summary>
               Value for a <b>Backspace</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.CarriageReturn">
            <summary>
               Value for a <b>Carriage Return</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.FormFeed">
            <summary>
               Value for a <b>Form Feed</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.LineFeed">
            <summary>
               Value for a <b>Line Feed</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.LineSeparator">
            <summary>
               Value for a <b>Line Separator</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.NextLine">
            <summary>
               Value for a <b>Next Line</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.ParagraphSeparator">
            <summary>
               Value for a <b>Paragraph Separator</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.Tab">
            <summary>
               Value for a <b>Tabulator</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.BS">
            <summary>
               Value for a <b>Backspace</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.CR">
            <summary>
               Value for a <b>Carriage Return</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.FF">
            <summary>
               Value for a <b>Form Feed</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.LF">
            <summary>
               Value for a <b>Line Feed</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.LS">
            <summary>
               Value for a <b>Line Separator</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.NEL">
            <summary>
               Value for a <b>Next Line</b> char.
             </summary>
        </member>
        <member name="F:OrdinaSoft.SpecialChar.PS">
            <summary>
               Value for a <b>Paragraph Separator</b> char.
             </summary>
        </member>
        <member name="T:System.StringExtension">
            <summary>
               Extension methods for strings.
             </summary>
             <remarks>
               These extension methods are in the <i>System</i> namespace, so they are available
               almost always.
             </remarks>
        </member>
        <member name="F:System.StringExtension.SimpleLettersDict">
            <summary>
               Dictionary of the simple letters.
             </summary>
             <remarks>
               For each simple letter, the dictionary contains the string that must be used to
               replace the letter.
             </remarks>
             <seealso cref="M:System.StringExtension.InitializeSimpleLettersDict" />
             <seealso cref="M:System.StringExtension.OnlySimpleLetters(System.String)" />
        </member>
        <member name="M:System.StringExtension.InitializeSimpleLettersDict">
            <summary>
               Initializes the <see cref="F:System.StringExtension.SimpleLettersDict" /> field, if necessary.
             </summary>
             <seealso cref="M:System.StringExtension.OnlySimpleLetters(System.String)" />
        </member>
        <member name="M:System.StringExtension.OnlySimpleLetters(System.String)">
            <summary>
               Keeps only the simple letters of a string.
             </summary>
             <param name="Text">The string. Can be <b>null</b>.</param>
             <returns>
               <paramref name="Text" /> if it is <b>null</b> or contains only white space;<br />
               otherwise, <paramref name="Text" /> with all the special letters replaced by their
               equivalent simple letter.
             </returns>
             <seealso cref="M:System.StringExtension.RemoveDiacritics(System.String)" />
        </member>
        <member name="M:System.StringExtension.PathToCamelCase(System.String)">
            <summary>
               Converts a string with a path to <b>Camel case</b>.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <returns>
               <paramref name="Text" /> if it is <b>null</b> or contains only white space;<br />
               otherwise, <paramref name="Text" /> converted to camel case.
             </returns>
             <remarks>
               A path contains a suite of names separated by a dot. This method sets the first char
               of each name in <paramref name="Text" /> to lower case.
             </remarks>
             <seealso cref="M:System.StringExtension.ToCamelCase(System.String)" />
             <seealso cref="M:System.StringExtension.ToPascalCase(System.String)" />
        </member>
        <member name="M:System.StringExtension.Quote(System.String,System.Char)">
            <summary>
               Quotes a text.
             </summary>
             <param name="Text">The text to quote.</param>
             <param name="QuoteChar">The char to use to quote the string.</param>
             <returns>The quoted text.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If a quote char is found in <paramref name="Text" />, it is doubled.
               </para>
               <para>
                 This method is optimized to not allocate too much memory: the <i>StringBuilder</i>
                 used internally has just the right size for the quoted char.
               </para>
             </remarks>
        </member>
        <member name="M:System.StringExtension.Quote(System.String,System.Char,System.Collections.Generic.Dictionary{System.Char,System.String})">
            <summary>
               Quotes a text, with a dictionary of escape sequences.
             </summary>
             <param name="Text">The text to quote.</param>
             <param name="QuoteChar">The char to use to quote the string.</param>
             <param name="EscapeDict">The disctionary with the escape sequences.</param>
             <returns>The quoted text.</returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="EscapeDict" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 <paramref name="QuoteChar" /> is used at the beginning and at the end of quoted
                 string. The <paramref name="EscapeDict" /> must contain an entry for
                 <i>QuoteChar</i> in order to quote it correctly.
               </para>
             </remarks>
        </member>
        <member name="M:System.StringExtension.RemoveDiacritics(System.String)">
            <summary>
               Removes the diacritics in a string.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <returns>
               <paramref name="Text" /> if it is <b>null</b> or contains only white space;<br />
               otherwise, <paramref name="Text" /> with all the diacritics replaced by their
               equivalent string.
             </returns>
             <seealso cref="M:System.StringExtension.OnlySimpleLetters(System.String)" />
        </member>
        <member name="M:System.StringExtension.Split(System.String,System.String)">
            <summary>
               Splits a string.
             </summary>
             <param name="Text">The string. Can be <b>null</b>.</param>
             <param name="Separator">The separator. Can be <b>null</b>.</param>
             <returns>
               <b>null</b> if <paramref name="Separator" /> is <b>null</b>;<br />
               otherwise, an array whose elements contain the substrings from this instance that are
               delimited by <paramref name="Separator" />.
             </returns>
             <remarks>
               <para>
                 This method is needed to .NET Standard 2.0, but not for .NET Standard 2.1.
               </para>
               <para>
                 The delimiter string is not included in the elements of the returned array. For
                 example, if the separator is the string ", " and the value of the current string
                 instance is "aa, bb, cc", the method returns an array that contains three elements:
                 "aa", "bb", and "cc".
               </para>
               <para>
                 If this instance does not contain the delimiter string, the returned array consists
                 of a single element that contains this instance.
               </para>
             </remarks>
        </member>
        <member name="M:System.StringExtension.Text(System.String)">
            <summary>
               Gets the text related to a text resource name.
             </summary>
             <param name="TextResourceName">The name of the text resource.</param>
             <returns>The text.</returns>
             <remarks>
               See the remarks of the <see cref="T:OrdinaSoft.TextResourcesDict" /> class for more information
               about text resources.
             </remarks>
             <seealso cref="T:OrdinaSoft.TextResourcesDict" />
        </member>
        <member name="M:System.StringExtension.ToCamelCase(System.String)">
            <summary>
               Converts a string to <b>Camel case</b>.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <returns>
               <paramref name="Text" /> if it is <b>null</b> or contains only white space;<br />
               otherwise, <paramref name="Text" /> converted to camel case.
             </returns>
             <remarks>
               This method sets the first char of <paramref name="Text" /> to lower case.
             </remarks>
             <seealso cref="M:System.StringExtension.PathToCamelCase(System.String)" />
             <seealso cref="M:System.StringExtension.ToPascalCase(System.String)" />
        </member>
        <member name="M:System.StringExtension.ToPascalCase(System.String)">
            <summary>
               Converts a string to <b>Pascal case</b>.
             </summary>
             <param name="Text">The text. Can be <b>null</b>.</param>
             <returns>
               <paramref name="Text" /> if it is <b>null</b> or contains only white space;<br />
               otherwise, <paramref name="Text" /> converted to pascal case.
             </returns>
             <remarks>
               This method sets the first char of <paramref name="Text" /> to upper case.
             </remarks>
             <seealso cref="M:System.StringExtension.ToCamelCase(System.String)" />
        </member>
        <member name="M:System.StringExtension.Truncate(System.String,System.Int32)">
            <summary>
               Truncates a string.
             </summary>
             <param name="Text">The string.</param>
             <param name="MaxLength">The maximum length of the returned string.</param>
             <returns>
               <paramref name="Text" /> if its length is less than or equal to
               <paramref name="MaxLength" />;<br />
               otherwise, <paramref name="Text" />, truncated to its first
               <paramref name="MaxLength" /> chars.
             </returns>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Text" /> is <b>null</b>.
             </exception>
        </member>
        <member name="T:OrdinaSoft.ComponentModel.DataErrorInfo`1">
            <summary>
               Class that implements the INotifyDataErrorInfo interface.
             </summary>
             <typeparam name="TErrorInfo">The type of an information about an error.</typeparam>
             <remarks>
               This class implements the
               <see cref="T:System.ComponentModel.INotifyPropertyChanged">INotifyPropertyChanged</see> interface, so it can be
               used as a base class for model classes. It can also be used alone to keep the errors
               of an item.
             </remarks>
        </member>
        <member name="F:OrdinaSoft.ComponentModel.DataErrorInfo`1.EmptyErrorsList">
            <summary>
               An empty list of errors.
             </summary>
        </member>
        <member name="F:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsByProperty">
            <summary>
              Dictionary of the errors for each property.
             </summary>
             <remarks>
               The index is the name of the property. The value is the list of the errors for each
               property. For the entity-level errors, the key is an <i>empty string</i>.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.get_Errors(System.String)">
            <summary>
               Gets the errors for the specified property or the entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
             <returns>The validation errors for the property or entity.</returns>
             <remarks>
               This is the getter of the <see cref="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.Errors(System.String)" /> indexed property, see the
               property documentation for more information.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.#ctor">
            <summary>
               Initializes an instance of the class.
             </summary>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.GetErrorsInternal(System.String)">
            <summary>
               Gets the errors for the specified property or the entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
             <returns>The validation errors for the property or entity.</returns>
             <remarks>
               If there is no errors in the dictionary for <paramref name="PropertyName" />, a new
               list of errors will be created.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.NotifyErrorsChanged">
            <summary>
               Notifies that the errors has changed.
             </summary>
             <remarks>
               This method raises the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event for the entity-level and
               the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> for the
               <see cref="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.HasErrors" /> property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.NotifyErrorsChanged(System.String)">
            <summary>
               Notifies that the errors has changed for a specific property.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
             <remarks>
               This method raises the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event for the specified property
               and the <see cref="E:OrdinaSoft.osNotifyPropertyChanged.PropertyChanged">PropertyChanged</see> for the
               <see cref="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.HasErrors" /> property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.OnErrorsChanged">
            <summary>
               Raises the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event, for entity-level errors.
             </summary>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.OnErrorsChanged(System.String)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event, for the specified property or the
               entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.OnErrorsChanged(System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
               Raises the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event.
             </summary>
             <param name="Args">Arguments for the event.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="Args" /> is <b>null</b>.
             </exception>
        </member>
        <member name="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.AllErrors">
            <summary>
               Gets an enumerable with all the errors.
             </summary>
             <value>The enumerable.</value>
        </member>
        <member name="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.Errors(System.String)">
            <summary>
               Gets the errors for the specified property or the entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
             <value>The validation errors for the property or entity.</value>
        </member>
        <member name="P:OrdinaSoft.ComponentModel.DataErrorInfo`1.HasErrors">
            <summary>
               Gets a value that indicates if any error is detected.
             </summary>
             <value>
               <b>true</b> if there are errors;<br />
               otherwise, <b>false</b>.
             </value>
        </member>
        <member name="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged">
            <summary>
               Occurs when there are changes in the errors.
             </summary>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckEmailAddress(System.String,System.String,`0)">
            <summary>
               Adds an error if an email address is not valid.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The email address.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If <paramref name="Value" /> is <b>null</b> or contains only white space, it is
                 considered as valid.
               </para>
               <para>
                 The check is made using the .NET validator.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckIfNotZero(System.String,System.Int32,`0)">
            <summary>
               Adds an error if a 32-bit integer value is 0.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The value.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is <b>0</b>, this method adds the
               <paramref name="ErrorInfo" /> error for the property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckMaxLength(System.String,System.String,System.Int32,`0)">
            <summary>
               Adds an error if a string value is longer than a specified value.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <param name="MaxLength">The maximum length of <paramref name="Value" />.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               <para>
                 If <paramref name="PropertyName" /> is <b>null</b> or <paramref name="MaxLength" />
                 is <b>0</b>, no error is added.
               </para>
               <para>
                 If the length of <paramref name="Value" /> is greater than
                 <paramref name="MaxLength" />, this method adds the <paramref name="ErrorInfo" />
                 error for the property.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckRequired(System.String,System.Object,`0)">
            <summary>
               Adds an error if a required object is not specified.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The object. Can be <b>null</b>.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is <b>null</b>, this method adds the
               <paramref name="ErrorInfo" /> error for the property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckRequired(System.String,System.String,`0)">
            <summary>
               Adds an error if a required string value is not specified.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The value. Can be <b>null</b>.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is <b>null</b> or an <b>empty string</b>, this method
               adds the <paramref name="ErrorInfo" /> error for the property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.CheckRequired(System.String,OrdinaSoft.DiscreteValue,`0)">
            <summary>
               Adds an error if a required discrete value is not specified.
             </summary>
             <param name="PropertyName">The name of the property.</param>
             <param name="Value">The discrete value. Can be <b>null</b>.</param>
             <param name="ErrorInfo">The error message for the user.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="PropertyName" /> is <b>null</b>.<br />
               -or-<br />
               <paramref name="ErrorInfo" /> is <b>null</b>.
             </exception>
             <remarks>
               If <paramref name="Value" /> is <b>null</b> or <b>Null</b>, this method adds the
               <paramref name="ErrorInfo" /> error for the property.
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.ClearErrors">
            <summary>
               Clears all the errors in this instance.
             </summary>
             <remarks>
               This method doesn't raise the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event, use the
               <see cref="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.ClearErrorsAndNotify" /> method if you want to notify of the changes.
             </remarks>
             <seealso cref="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.ClearErrorsAndNotify" />
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.ClearErrorsAndNotify">
            <summary>
               Clears all the errors in this instance and notifies of the changes.
             </summary>
             <seealso cref="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.ClearErrors" />
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.GetErrors(System.String)">
            <summary>
               Gets the errors for the specified property or the entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to retrieve entity-level errors;<br />
               otherwise, the name of the property to retrieve validation errors for.
             </param>
             <returns>The validation errors for the property or entity.</returns>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Sets the error for a property or the entity.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to set entity-level errors;<br />
               otherwise, the name of the property to set validation errors for.
             </param>
             <param name="Errors">The errors for the entity. Can be <b>null</b>.</param>
             <remarks>
               <para>
                 If <paramref name="Errors" /> is <b>null</b> or empty, the list of errors for the
                 property or the entity is removed.
               </para>
               <para>
                 This method doesn't raise the <see cref="E:OrdinaSoft.ComponentModel.DataErrorInfo`1.ErrorsChanged" /> event, use the
                 <see cref="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.SetErrorsAndNotify(System.String,System.Collections.Generic.IEnumerable{`0})" /> method if you
                 want to notify of the changes.
               </para>
             </remarks>
        </member>
        <member name="M:OrdinaSoft.ComponentModel.DataErrorInfo`1.SetErrorsAndNotify(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Sets the error for a property or the entity and notifies of the changes.
             </summary>
             <param name="PropertyName">
               <b>null</b> or an <b>empty string</b> to set entity-level errors;<br />
               otherwise, the name of the property to set validation errors for.
             </param>
             <param name="Errors">The errors for the entity. Can be <b>null</b>.</param>
             <remarks>
               If <paramref name="Errors" /> is <b>null</b> or empty, the list of errors for the
               property or the entity is removed.
             </remarks>
        </member>
    </members>
</doc>
